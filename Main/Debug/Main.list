
Main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007894  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08007a34  08007a34  00008a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c5c  08007c5c  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007c5c  08007c5c  00008c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c64  08007c64  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c64  08007c64  00008c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c68  08007c68  00008c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007c6c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000068  08007cd4  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000498  08007cd4  00009498  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011304  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002769  00000000  00000000  0001a39c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  0001cb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca6  00000000  00000000  0001db48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197d0  00000000  00000000  0001e7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f4b  00000000  00000000  00037fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a216a  00000000  00000000  0004af09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005064  00000000  00000000  000ed0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000f211c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007a1c 	.word	0x08007a1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08007a1c 	.word	0x08007a1c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <DWT_Delay_Init>:
 *
 */
#include "ds18b20.h"

static uint32_t DWT_Delay_Init(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80005a4:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <DWT_Delay_Init+0x58>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4a13      	ldr	r2, [pc, #76]	@ (80005f8 <DWT_Delay_Init+0x58>)
 80005aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80005ae:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <DWT_Delay_Init+0x58>)
 80005b2:	68db      	ldr	r3, [r3, #12]
 80005b4:	4a10      	ldr	r2, [pc, #64]	@ (80005f8 <DWT_Delay_Init+0x58>)
 80005b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80005ba:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a0e      	ldr	r2, [pc, #56]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005c2:	f023 0301 	bic.w	r3, r3, #1
 80005c6:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80005c8:	4b0c      	ldr	r3, [pc, #48]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0b      	ldr	r2, [pc, #44]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 80005d4:	4b09      	ldr	r3, [pc, #36]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80005da:	bf00      	nop
  __ASM volatile ("NOP");
 80005dc:	bf00      	nop
  __ASM volatile ("NOP");
 80005de:	bf00      	nop

  /* Check if clock cycle counter has started */
  if(DWT->CYCCNT)
 80005e0:	4b06      	ldr	r3, [pc, #24]	@ (80005fc <DWT_Delay_Init+0x5c>)
 80005e2:	685b      	ldr	r3, [r3, #4]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <DWT_Delay_Init+0x4c>
  {
 	return 0; /*clock cycle counter started*/
 80005e8:	2300      	movs	r3, #0
 80005ea:	e000      	b.n	80005ee <DWT_Delay_Init+0x4e>
  }
  else
  {
  	return 1; /*clock cycle counter not started*/
 80005ec:	2301      	movs	r3, #1
  }

}
 80005ee:	4618      	mov	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr
 80005f8:	e000edf0 	.word	0xe000edf0
 80005fc:	e0001000 	.word	0xe0001000

08000600 <DWT_Delay_us>:

static void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000608:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <DWT_Delay_us+0x40>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800060e:	f003 fb15 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8000612:	4603      	mov	r3, r0
 8000614:	4a0b      	ldr	r2, [pc, #44]	@ (8000644 <DWT_Delay_us+0x44>)
 8000616:	fba2 2303 	umull	r2, r3, r2, r3
 800061a:	0c9b      	lsrs	r3, r3, #18
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	fb02 f303 	mul.w	r3, r2, r3
 8000622:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000624:	bf00      	nop
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <DWT_Delay_us+0x40>)
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	1ad2      	subs	r2, r2, r3
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	429a      	cmp	r2, r3
 8000632:	d3f8      	bcc.n	8000626 <DWT_Delay_us+0x26>
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	e0001000 	.word	0xe0001000
 8000644:	431bde83 	.word	0x431bde83

08000648 <Set_Pin_Output>:

static void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f002 fcc6 	bl	8003008 <HAL_GPIO_Init>
}
 800067c:	bf00      	nop
 800067e:	3720      	adds	r7, #32
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <Set_Pin_Input>:

static void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b088      	sub	sp, #32
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Pull = GPIO_PULLUP;
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	4619      	mov	r1, r3
 80006ae:	6878      	ldr	r0, [r7, #4]
 80006b0:	f002 fcaa 	bl	8003008 <HAL_GPIO_Init>
}
 80006b4:	bf00      	nop
 80006b6:	3720      	adds	r7, #32
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <DS18B20_init>:


void DS18B20_init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 80006c0:	f7ff ff6e 	bl	80005a0 <DWT_Delay_Init>
	Set_Pin_Output (DS18B20_GPIO_Port, DS18B20_Pin);  // set the pin as output
 80006c4:	2120      	movs	r1, #32
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <DS18B20_init+0x20>)
 80006c8:	f7ff ffbe 	bl	8000648 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 1);   // pull the pin high
 80006cc:	2201      	movs	r2, #1
 80006ce:	2120      	movs	r1, #32
 80006d0:	4802      	ldr	r0, [pc, #8]	@ (80006dc <DS18B20_init+0x20>)
 80006d2:	f002 fe35 	bl	8003340 <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40020000 	.word	0x40020000

080006e0 <DS18B20_Start>:

uint8_t DS18B20_Start (void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);   // set the pin as output
 80006ea:	2120      	movs	r1, #32
 80006ec:	4813      	ldr	r0, [pc, #76]	@ (800073c <DS18B20_Start+0x5c>)
 80006ee:	f7ff ffab 	bl	8000648 <Set_Pin_Output>

	HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin low
 80006f2:	2200      	movs	r2, #0
 80006f4:	2120      	movs	r1, #32
 80006f6:	4811      	ldr	r0, [pc, #68]	@ (800073c <DS18B20_Start+0x5c>)
 80006f8:	f002 fe22 	bl	8003340 <HAL_GPIO_WritePin>
	DWT_Delay_us (480);   // delay according to datasheet
 80006fc:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000700:	f7ff ff7e 	bl	8000600 <DWT_Delay_us>

	Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);    // set the pin as input
 8000704:	2120      	movs	r1, #32
 8000706:	480d      	ldr	r0, [pc, #52]	@ (800073c <DS18B20_Start+0x5c>)
 8000708:	f7ff ffbc 	bl	8000684 <Set_Pin_Input>
	DWT_Delay_us (60);    // delay according to datasheet
 800070c:	203c      	movs	r0, #60	@ 0x3c
 800070e:	f7ff ff77 	bl	8000600 <DWT_Delay_us>
	if (!(HAL_GPIO_ReadPin (DS18B20_GPIO_Port, DS18B20_Pin))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8000712:	2120      	movs	r1, #32
 8000714:	4809      	ldr	r0, [pc, #36]	@ (800073c <DS18B20_Start+0x5c>)
 8000716:	f002 fdfb 	bl	8003310 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d102      	bne.n	8000726 <DS18B20_Start+0x46>
 8000720:	2301      	movs	r3, #1
 8000722:	71fb      	strb	r3, [r7, #7]
 8000724:	e001      	b.n	800072a <DS18B20_Start+0x4a>
	else Response = -1;
 8000726:	23ff      	movs	r3, #255	@ 0xff
 8000728:	71fb      	strb	r3, [r7, #7]

	DWT_Delay_us (420); // 480 us delay totally.
 800072a:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 800072e:	f7ff ff67 	bl	8000600 <DWT_Delay_us>

	return Response;
 8000732:	79fb      	ldrb	r3, [r7, #7]
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40020000 	.word	0x40020000

08000740 <DS18B20_Write>:
void DS18B20_Write (uint8_t data)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);  // set as output
 800074a:	2120      	movs	r1, #32
 800074c:	481e      	ldr	r0, [pc, #120]	@ (80007c8 <DS18B20_Write+0x88>)
 800074e:	f7ff ff7b 	bl	8000648 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	e02e      	b.n	80007b6 <DS18B20_Write+0x76>
	{
		if ((data & (1<<i))!=0)  // if the bit is high
 8000758:	79fa      	ldrb	r2, [r7, #7]
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	fa42 f303 	asr.w	r3, r2, r3
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d013      	beq.n	8000790 <DS18B20_Write+0x50>
		{
			// write 1
			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);  // set as output
 8000768:	2120      	movs	r1, #32
 800076a:	4817      	ldr	r0, [pc, #92]	@ (80007c8 <DS18B20_Write+0x88>)
 800076c:	f7ff ff6c 	bl	8000648 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin LOW
 8000770:	2200      	movs	r2, #0
 8000772:	2120      	movs	r1, #32
 8000774:	4814      	ldr	r0, [pc, #80]	@ (80007c8 <DS18B20_Write+0x88>)
 8000776:	f002 fde3 	bl	8003340 <HAL_GPIO_WritePin>
			DWT_Delay_us (1);  // wait for 1 us
 800077a:	2001      	movs	r0, #1
 800077c:	f7ff ff40 	bl	8000600 <DWT_Delay_us>

			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);  // set as input
 8000780:	2120      	movs	r1, #32
 8000782:	4811      	ldr	r0, [pc, #68]	@ (80007c8 <DS18B20_Write+0x88>)
 8000784:	f7ff ff7e 	bl	8000684 <Set_Pin_Input>
			DWT_Delay_us (60);  // wait for 60 us
 8000788:	203c      	movs	r0, #60	@ 0x3c
 800078a:	f7ff ff39 	bl	8000600 <DWT_Delay_us>
 800078e:	e00f      	b.n	80007b0 <DS18B20_Write+0x70>
		}

		else  // if the bit is low
		{
			// write 0
			Set_Pin_Output(DS18B20_GPIO_Port, DS18B20_Pin);
 8000790:	2120      	movs	r1, #32
 8000792:	480d      	ldr	r0, [pc, #52]	@ (80007c8 <DS18B20_Write+0x88>)
 8000794:	f7ff ff58 	bl	8000648 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the pin LOW
 8000798:	2200      	movs	r2, #0
 800079a:	2120      	movs	r1, #32
 800079c:	480a      	ldr	r0, [pc, #40]	@ (80007c8 <DS18B20_Write+0x88>)
 800079e:	f002 fdcf 	bl	8003340 <HAL_GPIO_WritePin>
			DWT_Delay_us (60);  // wait for 60 us
 80007a2:	203c      	movs	r0, #60	@ 0x3c
 80007a4:	f7ff ff2c 	bl	8000600 <DWT_Delay_us>

			Set_Pin_Input(DS18B20_GPIO_Port, DS18B20_Pin);
 80007a8:	2120      	movs	r1, #32
 80007aa:	4807      	ldr	r0, [pc, #28]	@ (80007c8 <DS18B20_Write+0x88>)
 80007ac:	f7ff ff6a 	bl	8000684 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b07      	cmp	r3, #7
 80007ba:	ddcd      	ble.n	8000758 <DS18B20_Write+0x18>
		}
	}
}
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40020000 	.word	0x40020000

080007cc <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
	uint8_t value=0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Input (DS18B20_GPIO_Port, DS18B20_Pin);
 80007d6:	2120      	movs	r1, #32
 80007d8:	481a      	ldr	r0, [pc, #104]	@ (8000844 <DS18B20_Read+0x78>)
 80007da:	f7ff ff53 	bl	8000684 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	e026      	b.n	8000832 <DS18B20_Read+0x66>
	{
		Set_Pin_Output (DS18B20_GPIO_Port, DS18B20_Pin);   // set as output
 80007e4:	2120      	movs	r1, #32
 80007e6:	4817      	ldr	r0, [pc, #92]	@ (8000844 <DS18B20_Read+0x78>)
 80007e8:	f7ff ff2e 	bl	8000648 <Set_Pin_Output>
		HAL_GPIO_WritePin (DS18B20_GPIO_Port, DS18B20_Pin, 0);  // pull the data pin LOW
 80007ec:	2200      	movs	r2, #0
 80007ee:	2120      	movs	r1, #32
 80007f0:	4814      	ldr	r0, [pc, #80]	@ (8000844 <DS18B20_Read+0x78>)
 80007f2:	f002 fda5 	bl	8003340 <HAL_GPIO_WritePin>
		DWT_Delay_us (2);  // wait for 2 us
 80007f6:	2002      	movs	r0, #2
 80007f8:	f7ff ff02 	bl	8000600 <DWT_Delay_us>
		Set_Pin_Input (DS18B20_GPIO_Port, DS18B20_Pin);  // set as input
 80007fc:	2120      	movs	r1, #32
 80007fe:	4811      	ldr	r0, [pc, #68]	@ (8000844 <DS18B20_Read+0x78>)
 8000800:	f7ff ff40 	bl	8000684 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_GPIO_Port, DS18B20_Pin))  // if the pin is HIGH
 8000804:	2120      	movs	r1, #32
 8000806:	480f      	ldr	r0, [pc, #60]	@ (8000844 <DS18B20_Read+0x78>)
 8000808:	f002 fd82 	bl	8003310 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d009      	beq.n	8000826 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 8000812:	2201      	movs	r2, #1
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b25a      	sxtb	r2, r3
 800081c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000820:	4313      	orrs	r3, r2
 8000822:	b25b      	sxtb	r3, r3
 8000824:	71fb      	strb	r3, [r7, #7]
		}
		DWT_Delay_us (60);  // wait for 60 us
 8000826:	203c      	movs	r0, #60	@ 0x3c
 8000828:	f7ff feea 	bl	8000600 <DWT_Delay_us>
	for (int i=0;i<8;i++)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	2b07      	cmp	r3, #7
 8000836:	ddd5      	ble.n	80007e4 <DS18B20_Read+0x18>
	}
	return value;
 8000838:	79fb      	ldrb	r3, [r7, #7]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40020000 	.word	0x40020000

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b5b0      	push	{r4, r5, r7, lr}
 800084a:	b0a8      	sub	sp, #160	@ 0xa0
 800084c:	af06      	add	r7, sp, #24

  /* USER CODE BEGIN 1 */
	uint8_t Presence=0;
 800084e:	2300      	movs	r3, #0
 8000850:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000854:	f001 fa5a 	bl	8001d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000858:	f000 f998 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085c:	f000 fc5c 	bl	8001118 <MX_GPIO_Init>
  MX_DMA_Init();
 8000860:	f000 fc3a 	bl	80010d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000864:	f000 fbe4 	bl	8001030 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000868:	f000 fac4 	bl	8000df4 <MX_TIM1_Init>
  MX_ADC1_Init();
 800086c:	f000 f9fa 	bl	8000c64 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000870:	f000 fb6c 	bl	8000f4c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000874:	f000 fc06 	bl	8001084 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000878:	f000 fa62 	bl	8000d40 <MX_RTC_Init>
  MX_TIM10_Init();
 800087c:	f000 fbb4 	bl	8000fe8 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */
  char buff[30];
  DS18B20_init();
 8000880:	f7ff ff1c 	bl	80006bc <DS18B20_init>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000884:	2100      	movs	r1, #0
 8000886:	48a5      	ldr	r0, [pc, #660]	@ (8000b1c <main+0x2d4>)
 8000888:	f003 ff14 	bl	80046b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800088c:	2104      	movs	r1, #4
 800088e:	48a3      	ldr	r0, [pc, #652]	@ (8000b1c <main+0x2d4>)
 8000890:	f003 ff10 	bl	80046b4 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8000894:	2201      	movs	r2, #1
 8000896:	49a2      	ldr	r1, [pc, #648]	@ (8000b20 <main+0x2d8>)
 8000898:	48a2      	ldr	r0, [pc, #648]	@ (8000b24 <main+0x2dc>)
 800089a:	f004 fee4 	bl	8005666 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, &btchar,1);
 800089e:	2201      	movs	r2, #1
 80008a0:	49a1      	ldr	r1, [pc, #644]	@ (8000b28 <main+0x2e0>)
 80008a2:	48a2      	ldr	r0, [pc, #648]	@ (8000b2c <main+0x2e4>)
 80008a4:	f004 fedf 	bl	8005666 <HAL_UART_Receive_IT>
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 80008a8:	48a1      	ldr	r0, [pc, #644]	@ (8000b30 <main+0x2e8>)
 80008aa:	f003 fe47 	bl	800453c <HAL_TIM_Base_Start_IT>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <main+0x70>
  {
 	 Error_Handler();
 80008b4:	f000 fecc 	bl	8001650 <Error_Handler>
  }
  if(HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADCxConvertValue, 3) != HAL_OK)
 80008b8:	2203      	movs	r2, #3
 80008ba:	499e      	ldr	r1, [pc, #632]	@ (8000b34 <main+0x2ec>)
 80008bc:	489e      	ldr	r0, [pc, #632]	@ (8000b38 <main+0x2f0>)
 80008be:	f001 fadb 	bl	8001e78 <HAL_ADC_Start_DMA>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <main+0x84>
  {
	  Error_Handler();
 80008c8:	f000 fec2 	bl	8001650 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Presence = DS18B20_Start ();
 80008cc:	f7ff ff08 	bl	80006e0 <DS18B20_Start>
 80008d0:	4603      	mov	r3, r0
 80008d2:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
	  if(Presence==1)
 80008d6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d136      	bne.n	800094c <main+0x104>
	  {
		  DS18B20_Write (0xCC);  // skip ROM
 80008de:	20cc      	movs	r0, #204	@ 0xcc
 80008e0:	f7ff ff2e 	bl	8000740 <DS18B20_Write>
		  DS18B20_Write (0x44);  // convert t
 80008e4:	2044      	movs	r0, #68	@ 0x44
 80008e6:	f7ff ff2b 	bl	8000740 <DS18B20_Write>

		  Presence = DS18B20_Start();
 80008ea:	f7ff fef9 	bl	80006e0 <DS18B20_Start>
 80008ee:	4603      	mov	r3, r0
 80008f0:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
		  if(Presence==1)
 80008f4:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80008f8:	2b01      	cmp	r3, #1
 80008fa:	d127      	bne.n	800094c <main+0x104>
		  {
			  DS18B20_Write (0xCC);  // skip ROM
 80008fc:	20cc      	movs	r0, #204	@ 0xcc
 80008fe:	f7ff ff1f 	bl	8000740 <DS18B20_Write>
			  DS18B20_Write (0xBE);  // Read Scratch-pad
 8000902:	20be      	movs	r0, #190	@ 0xbe
 8000904:	f7ff ff1c 	bl	8000740 <DS18B20_Write>
			  Temp_byte1 = DS18B20_Read();
 8000908:	f7ff ff60 	bl	80007cc <DS18B20_Read>
 800090c:	4603      	mov	r3, r0
 800090e:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
			  Temp_byte2 = DS18B20_Read();
 8000912:	f7ff ff5b 	bl	80007cc <DS18B20_Read>
 8000916:	4603      	mov	r3, r0
 8000918:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
			  TEMP = ((Temp_byte2<<8))|Temp_byte1;
 800091c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8000920:	021b      	lsls	r3, r3, #8
 8000922:	b21a      	sxth	r2, r3
 8000924:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8000928:	b21b      	sxth	r3, r3
 800092a:	4313      	orrs	r3, r2
 800092c:	b21b      	sxth	r3, r3
 800092e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
			  Temperature = (float)TEMP/16.0;  // resolution is 0.0625
 8000932:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8000936:	ee07 3a90 	vmov	s15, r3
 800093a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800093e:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8000942:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000946:	4b7d      	ldr	r3, [pc, #500]	@ (8000b3c <main+0x2f4>)
 8000948:	edc3 7a00 	vstr	s15, [r3]
		  }
	  }
	  int temperature = (int)Temperature;
 800094c:	4b7b      	ldr	r3, [pc, #492]	@ (8000b3c <main+0x2f4>)
 800094e:	edd3 7a00 	vldr	s15, [r3]
 8000952:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000956:	ee17 3a90 	vmov	r3, s15
 800095a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      int Turbidity = ADCxConvertValue[0];
 800095c:	4b75      	ldr	r3, [pc, #468]	@ (8000b34 <main+0x2ec>)
 800095e:	881b      	ldrh	r3, [r3, #0]
 8000960:	b29b      	uxth	r3, r3
 8000962:	67bb      	str	r3, [r7, #120]	@ 0x78
      int Level1 = ADCxConvertValue[1];
 8000964:	4b73      	ldr	r3, [pc, #460]	@ (8000b34 <main+0x2ec>)
 8000966:	885b      	ldrh	r3, [r3, #2]
 8000968:	b29b      	uxth	r3, r3
 800096a:	677b      	str	r3, [r7, #116]	@ 0x74
      int Level2 = ADCxConvertValue[2];
 800096c:	4b71      	ldr	r3, [pc, #452]	@ (8000b34 <main+0x2ec>)
 800096e:	889b      	ldrh	r3, [r3, #4]
 8000970:	b29b      	uxth	r3, r3
 8000972:	673b      	str	r3, [r7, #112]	@ 0x70
	  if(rx2Flag)
 8000974:	4b72      	ldr	r3, [pc, #456]	@ (8000b40 <main+0x2f8>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d006      	beq.n	800098c <main+0x144>
	  {
		  printf("recv2 : %s\r\n",rx2Data);
 800097e:	4971      	ldr	r1, [pc, #452]	@ (8000b44 <main+0x2fc>)
 8000980:	4871      	ldr	r0, [pc, #452]	@ (8000b48 <main+0x300>)
 8000982:	f005 fead 	bl	80066e0 <iprintf>
		  rx2Flag =0;
 8000986:	4b6e      	ldr	r3, [pc, #440]	@ (8000b40 <main+0x2f8>)
 8000988:	2200      	movs	r2, #0
 800098a:	701a      	strb	r2, [r3, #0]
	  }
	  if(btFlag)
 800098c:	4b6f      	ldr	r3, [pc, #444]	@ (8000b4c <main+0x304>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	b2db      	uxtb	r3, r3
 8000992:	2b00      	cmp	r3, #0
 8000994:	d004      	beq.n	80009a0 <main+0x158>
	  {
		  btFlag =0;
 8000996:	4b6d      	ldr	r3, [pc, #436]	@ (8000b4c <main+0x304>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
		  bluetooth_Event();
 800099c:	f000 fd5c 	bl	8001458 <bluetooth_Event>
	  }
	  if(tim3Flag1Sec)
 80009a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000b50 <main+0x308>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d091      	beq.n	80008cc <main+0x84>
	  {
		  tim3Flag1Sec = 0;
 80009a8:	4b69      	ldr	r3, [pc, #420]	@ (8000b50 <main+0x308>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
	      char date[11];
	      char time[9];
		  char sendsBuf[CMD_SIZE];

	      Get_Current_Time(date, time);
 80009ae:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80009b2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fc1b 	bl	80011f4 <Get_Current_Time>
		  printf("tim3Sec : %d\r\n",tim3Sec);
 80009be:	4b65      	ldr	r3, [pc, #404]	@ (8000b54 <main+0x30c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4619      	mov	r1, r3
 80009c4:	4864      	ldr	r0, [pc, #400]	@ (8000b58 <main+0x310>)
 80009c6:	f005 fe8b 	bl	80066e0 <iprintf>
	      if(tim3Sec % 5 == 0)
 80009ca:	4b62      	ldr	r3, [pc, #392]	@ (8000b54 <main+0x30c>)
 80009cc:	6819      	ldr	r1, [r3, #0]
 80009ce:	4b63      	ldr	r3, [pc, #396]	@ (8000b5c <main+0x314>)
 80009d0:	fba3 2301 	umull	r2, r3, r3, r1
 80009d4:	089a      	lsrs	r2, r3, #2
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	1aca      	subs	r2, r1, r3
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d115      	bne.n	8000a0e <main+0x1c6>
	      {
			  Send_Data_To_SQL("KSW_SQL", date, time, Turbidity, temperature, Level1, Level2);
 80009e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80009e4:	b29d      	uxth	r5, r3
 80009e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80009ec:	b292      	uxth	r2, r2
 80009ee:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80009f0:	b289      	uxth	r1, r1
 80009f2:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80009f6:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80009fa:	9102      	str	r1, [sp, #8]
 80009fc:	9201      	str	r2, [sp, #4]
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	462b      	mov	r3, r5
 8000a02:	4622      	mov	r2, r4
 8000a04:	4601      	mov	r1, r0
 8000a06:	4856      	ldr	r0, [pc, #344]	@ (8000b60 <main+0x318>)
 8000a08:	f000 fc2a 	bl	8001260 <Send_Data_To_SQL>
 8000a0c:	e020      	b.n	8000a50 <main+0x208>
	      }
	      else
	      {
			  snprintf(sendsBuf, CMD_SIZE, "[%s]%s@%u@%u@%u@%u\n","KSW_ARD", "DATA", Turbidity, temperature, Level1, Level2);
 8000a0e:	1d38      	adds	r0, r7, #4
 8000a10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a12:	9304      	str	r3, [sp, #16]
 8000a14:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a16:	9303      	str	r3, [sp, #12]
 8000a18:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000a1a:	9302      	str	r3, [sp, #8]
 8000a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a1e:	9301      	str	r3, [sp, #4]
 8000a20:	4b50      	ldr	r3, [pc, #320]	@ (8000b64 <main+0x31c>)
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	4b50      	ldr	r3, [pc, #320]	@ (8000b68 <main+0x320>)
 8000a26:	4a51      	ldr	r2, [pc, #324]	@ (8000b6c <main+0x324>)
 8000a28:	2132      	movs	r1, #50	@ 0x32
 8000a2a:	f005 fec9 	bl	80067c0 <sniprintf>
			  HAL_UART_Transmit(&huart6, (uint8_t *)sendsBuf, strlen(sendsBuf), HAL_MAX_DELAY);
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fbdf 	bl	80001f4 <strlen>
 8000a36:	4603      	mov	r3, r0
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	1d39      	adds	r1, r7, #4
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	483a      	ldr	r0, [pc, #232]	@ (8000b2c <main+0x2e4>)
 8000a42:	f004 fd85 	bl	8005550 <HAL_UART_Transmit>
			  printf("Sending Arduino: %s\r\n", sendsBuf);
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4849      	ldr	r0, [pc, #292]	@ (8000b70 <main+0x328>)
 8000a4c:	f005 fe48 	bl	80066e0 <iprintf>
	      }
		  if(adcFlag)
 8000a50:	4b48      	ldr	r3, [pc, #288]	@ (8000b74 <main+0x32c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d009      	beq.n	8000a6c <main+0x224>
		  {
			  if(HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADCxConvertValue, 3) != HAL_OK)
 8000a58:	2203      	movs	r2, #3
 8000a5a:	4936      	ldr	r1, [pc, #216]	@ (8000b34 <main+0x2ec>)
 8000a5c:	4836      	ldr	r0, [pc, #216]	@ (8000b38 <main+0x2f0>)
 8000a5e:	f001 fa0b 	bl	8001e78 <HAL_ADC_Start_DMA>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <main+0x224>
			  {
				  Error_Handler();
 8000a68:	f000 fdf2 	bl	8001650 <Error_Handler>
			  }
		  }
		  if(Turbidity < 2000 && Level1 > 1800  && Level2 < 3900)
 8000a6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000a6e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a72:	da1a      	bge.n	8000aaa <main+0x262>
 8000a74:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000a76:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8000a7a:	dd16      	ble.n	8000aaa <main+0x262>
 8000a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000a7e:	f640 723b 	movw	r2, #3899	@ 0xf3b
 8000a82:	4293      	cmp	r3, r2
 8000a84:	dc11      	bgt.n	8000aaa <main+0x262>
		  {
			  Motor_SetDirection(0); //공급 모터
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 fc3e 	bl	8001308 <Motor_SetDirection>
			  Motor_SetSpeed(800);
 8000a8c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000a90:	f000 fc22 	bl	80012d8 <Motor_SetSpeed>
			  Motor2_SetDirection(0); //배출 모터
 8000a94:	2000      	movs	r0, #0
 8000a96:	f000 fc7b 	bl	8001390 <Motor2_SetDirection>
			  Motor2_SetSpeed(800);
 8000a9a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000a9e:	f000 fc5f 	bl	8001360 <Motor2_SetSpeed>
			  printf("Cleaning Water\r\n");
 8000aa2:	4835      	ldr	r0, [pc, #212]	@ (8000b78 <main+0x330>)
 8000aa4:	f005 fe84 	bl	80067b0 <puts>
 8000aa8:	e036      	b.n	8000b18 <main+0x2d0>
		  }
		  else if(Level2 > 3900)
 8000aaa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000aac:	f640 723c 	movw	r2, #3900	@ 0xf3c
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	dd0a      	ble.n	8000aca <main+0x282>
		  {
			  Motor_SetDirection(1); //배출 모터
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	f000 fc27 	bl	8001308 <Motor_SetDirection>
			  Motor_SetSpeed(800);
 8000aba:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000abe:	f000 fc0b 	bl	80012d8 <Motor_SetSpeed>
			  printf("Discharge\r\n");
 8000ac2:	482e      	ldr	r0, [pc, #184]	@ (8000b7c <main+0x334>)
 8000ac4:	f005 fe74 	bl	80067b0 <puts>
 8000ac8:	e700      	b.n	80008cc <main+0x84>
		  }
		  else if(Level2 < 2500)
 8000aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000acc:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	dc0a      	bgt.n	8000aea <main+0x2a2>
		  {
			  Motor2_SetDirection(1); //공급 모터
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 fc5b 	bl	8001390 <Motor2_SetDirection>
			  Motor2_SetSpeed(800);
 8000ada:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000ade:	f000 fc3f 	bl	8001360 <Motor2_SetSpeed>
			  printf("supply\r\n");
 8000ae2:	4827      	ldr	r0, [pc, #156]	@ (8000b80 <main+0x338>)
 8000ae4:	f005 fe64 	bl	80067b0 <puts>
 8000ae8:	e6f0      	b.n	80008cc <main+0x84>
		  }
		  else if(Level1 < 1500)
 8000aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000aec:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000af0:	4293      	cmp	r3, r2
 8000af2:	dc0a      	bgt.n	8000b0a <main+0x2c2>
		  {
			  printf("Motor Stop\r\n");
 8000af4:	4823      	ldr	r0, [pc, #140]	@ (8000b84 <main+0x33c>)
 8000af6:	f005 fe5b 	bl	80067b0 <puts>
			  printf("Supply water_Shortage\r\n");
 8000afa:	4823      	ldr	r0, [pc, #140]	@ (8000b88 <main+0x340>)
 8000afc:	f005 fe58 	bl	80067b0 <puts>
			  Motor_Stop();
 8000b00:	f000 fc26 	bl	8001350 <Motor_Stop>
			  Motor2_Stop();
 8000b04:	f000 fc68 	bl	80013d8 <Motor2_Stop>
 8000b08:	e6e0      	b.n	80008cc <main+0x84>
		  }
		  else
		  {
			  printf("Motor Stop\r\n");
 8000b0a:	481e      	ldr	r0, [pc, #120]	@ (8000b84 <main+0x33c>)
 8000b0c:	f005 fe50 	bl	80067b0 <puts>
			  Motor_Stop();
 8000b10:	f000 fc1e 	bl	8001350 <Motor_Stop>
			  Motor2_Stop();
 8000b14:	f000 fc60 	bl	80013d8 <Motor2_Stop>
  {
 8000b18:	e6d8      	b.n	80008cc <main+0x84>
 8000b1a:	bf00      	nop
 8000b1c:	2000014c 	.word	0x2000014c
 8000b20:	200002bc 	.word	0x200002bc
 8000b24:	20000224 	.word	0x20000224
 8000b28:	200002f3 	.word	0x200002f3
 8000b2c:	2000026c 	.word	0x2000026c
 8000b30:	20000194 	.word	0x20000194
 8000b34:	20000328 	.word	0x20000328
 8000b38:	20000084 	.word	0x20000084
 8000b3c:	20000334 	.word	0x20000334
 8000b40:	200002bd 	.word	0x200002bd
 8000b44:	200002c0 	.word	0x200002c0
 8000b48:	08007a34 	.word	0x08007a34
 8000b4c:	200002f2 	.word	0x200002f2
 8000b50:	200002b4 	.word	0x200002b4
 8000b54:	200002b8 	.word	0x200002b8
 8000b58:	08007a44 	.word	0x08007a44
 8000b5c:	cccccccd 	.word	0xcccccccd
 8000b60:	08007a54 	.word	0x08007a54
 8000b64:	08007a78 	.word	0x08007a78
 8000b68:	08007a5c 	.word	0x08007a5c
 8000b6c:	08007a64 	.word	0x08007a64
 8000b70:	08007a80 	.word	0x08007a80
 8000b74:	20000330 	.word	0x20000330
 8000b78:	08007a98 	.word	0x08007a98
 8000b7c:	08007aa8 	.word	0x08007aa8
 8000b80:	08007ab4 	.word	0x08007ab4
 8000b84:	08007abc 	.word	0x08007abc
 8000b88:	08007ac8 	.word	0x08007ac8

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b094      	sub	sp, #80	@ 0x50
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0320 	add.w	r3, r7, #32
 8000b96:	2230      	movs	r2, #48	@ 0x30
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 ff1c 	bl	80069d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	4b29      	ldr	r3, [pc, #164]	@ (8000c5c <SystemClock_Config+0xd0>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a28      	ldr	r2, [pc, #160]	@ (8000c5c <SystemClock_Config+0xd0>)
 8000bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc0:	4b26      	ldr	r3, [pc, #152]	@ (8000c5c <SystemClock_Config+0xd0>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	4b23      	ldr	r3, [pc, #140]	@ (8000c60 <SystemClock_Config+0xd4>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a22      	ldr	r2, [pc, #136]	@ (8000c60 <SystemClock_Config+0xd4>)
 8000bd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <SystemClock_Config+0xd4>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000be8:	2305      	movs	r3, #5
 8000bea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c00:	2308      	movs	r3, #8
 8000c02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 fbac 	bl	8003374 <HAL_RCC_OscConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c22:	f000 fd15 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f002 fe0e 	bl	8003864 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c4e:	f000 fcff 	bl	8001650 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	@ 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c76:	4b2f      	ldr	r3, [pc, #188]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000c78:	4a2f      	ldr	r2, [pc, #188]	@ (8000d38 <MX_ADC1_Init+0xd4>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000c7e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c84:	4b2b      	ldr	r3, [pc, #172]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c90:	4b28      	ldr	r3, [pc, #160]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9e:	4b25      	ldr	r3, [pc, #148]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000ca6:	4a25      	ldr	r2, [pc, #148]	@ (8000d3c <MX_ADC1_Init+0xd8>)
 8000ca8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000caa:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000cb0:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc4:	481b      	ldr	r0, [pc, #108]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000cc6:	f001 f893 	bl	8001df0 <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cd0:	f000 fcbe 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000ce6:	f001 f9cb 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cf0:	f000 fcae 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480c      	ldr	r0, [pc, #48]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000d02:	f001 f9bd 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000d0c:	f000 fca0 	bl	8001650 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000d10:	230b      	movs	r3, #11
 8000d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d14:	2303      	movs	r3, #3
 8000d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d18:	463b      	mov	r3, r7
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_ADC1_Init+0xd0>)
 8000d1e:	f001 f9af 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000d28:	f000 fc92 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000084 	.word	0x20000084
 8000d38:	40012000 	.word	0x40012000
 8000d3c:	0f000001 	.word	0x0f000001

08000d40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <MX_RTC_Init+0xac>)
 8000d5a:	4a25      	ldr	r2, [pc, #148]	@ (8000df0 <MX_RTC_Init+0xb0>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <MX_RTC_Init+0xac>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d64:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <MX_RTC_Init+0xac>)
 8000d66:	227f      	movs	r2, #127	@ 0x7f
 8000d68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <MX_RTC_Init+0xac>)
 8000d6c:	22ff      	movs	r2, #255	@ 0xff
 8000d6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <MX_RTC_Init+0xac>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <MX_RTC_Init+0xac>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <MX_RTC_Init+0xac>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000d82:	481a      	ldr	r0, [pc, #104]	@ (8000dec <MX_RTC_Init+0xac>)
 8000d84:	f003 f87e 	bl	8003e84 <HAL_RTC_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000d8e:	f000 fc5f 	bl	8001650 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8000d92:	2323      	movs	r3, #35	@ 0x23
 8000d94:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x10;
 8000d96:	2310      	movs	r3, #16
 8000d98:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	2201      	movs	r2, #1
 8000daa:	4619      	mov	r1, r3
 8000dac:	480f      	ldr	r0, [pc, #60]	@ (8000dec <MX_RTC_Init+0xac>)
 8000dae:	f003 f8ec 	bl	8003f8a <HAL_RTC_SetTime>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f000 fc4a 	bl	8001650 <Error_Handler>
  }
  sDate.WeekDay = 0x03;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8000dc0:	2311      	movs	r3, #17
 8000dc2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x27;
 8000dc4:	2327      	movs	r3, #39	@ 0x27
 8000dc6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 8000dc8:	2324      	movs	r3, #36	@ 0x24
 8000dca:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <MX_RTC_Init+0xac>)
 8000dd4:	f003 f9d1 	bl	800417a <HAL_RTC_SetDate>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000dde:	f000 fc37 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000012c 	.word	0x2000012c
 8000df0:	40002800 	.word	0x40002800

08000df4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b096      	sub	sp, #88	@ 0x58
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
 8000e22:	615a      	str	r2, [r3, #20]
 8000e24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2220      	movs	r2, #32
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f005 fdd3 	bl	80069d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e32:	4b44      	ldr	r3, [pc, #272]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000e34:	4a44      	ldr	r2, [pc, #272]	@ (8000f48 <MX_TIM1_Init+0x154>)
 8000e36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84 -1;
 8000e38:	4b42      	ldr	r3, [pc, #264]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000e3a:	2253      	movs	r2, #83	@ 0x53
 8000e3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b41      	ldr	r3, [pc, #260]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000e44:	4b3f      	ldr	r3, [pc, #252]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000e46:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e52:	4b3c      	ldr	r3, [pc, #240]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e58:	4b3a      	ldr	r3, [pc, #232]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e5e:	4839      	ldr	r0, [pc, #228]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000e60:	f003 fb1c 	bl	800449c <HAL_TIM_Base_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e6a:	f000 fbf1 	bl	8001650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e74:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4832      	ldr	r0, [pc, #200]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000e7c:	f003 fe7c 	bl	8004b78 <HAL_TIM_ConfigClockSource>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e86:	f000 fbe3 	bl	8001650 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e8a:	482e      	ldr	r0, [pc, #184]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000e8c:	f003 fbb8 	bl	8004600 <HAL_TIM_PWM_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e96:	f000 fbdb 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ea2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4826      	ldr	r0, [pc, #152]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000eaa:	f004 fa2d 	bl	8005308 <HAL_TIMEx_MasterConfigSynchronization>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000eb4:	f000 fbcc 	bl	8001650 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eb8:	2360      	movs	r3, #96	@ 0x60
 8000eba:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4619      	mov	r1, r3
 8000edc:	4819      	ldr	r0, [pc, #100]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000ede:	f003 fd89 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ee8:	f000 fbb2 	bl	8001650 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef0:	2204      	movs	r2, #4
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4813      	ldr	r0, [pc, #76]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000ef6:	f003 fd7d 	bl	80049f4 <HAL_TIM_PWM_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000f00:	f000 fba6 	bl	8001650 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000f28:	f004 fa5c 	bl	80053e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000f32:	f000 fb8d 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f36:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <MX_TIM1_Init+0x150>)
 8000f38:	f000 fcd2 	bl	80018e0 <HAL_TIM_MspPostInit>

}
 8000f3c:	bf00      	nop
 8000f3e:	3758      	adds	r7, #88	@ 0x58
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	2000014c 	.word	0x2000014c
 8000f48:	40010000 	.word	0x40010000

08000f4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <MX_TIM3_Init+0x94>)
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe4 <MX_TIM3_Init+0x98>)
 8000f6c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe0 <MX_TIM3_Init+0x94>)
 8000f70:	2253      	movs	r2, #83	@ 0x53
 8000f72:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <MX_TIM3_Init+0x94>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <MX_TIM3_Init+0x94>)
 8000f7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f80:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f82:	4b17      	ldr	r3, [pc, #92]	@ (8000fe0 <MX_TIM3_Init+0x94>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <MX_TIM3_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f8e:	4814      	ldr	r0, [pc, #80]	@ (8000fe0 <MX_TIM3_Init+0x94>)
 8000f90:	f003 fa84 	bl	800449c <HAL_TIM_Base_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f9a:	f000 fb59 	bl	8001650 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <MX_TIM3_Init+0x94>)
 8000fac:	f003 fde4 	bl	8004b78 <HAL_TIM_ConfigClockSource>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f000 fb4b 	bl	8001650 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4806      	ldr	r0, [pc, #24]	@ (8000fe0 <MX_TIM3_Init+0x94>)
 8000fc8:	f004 f99e 	bl	8005308 <HAL_TIMEx_MasterConfigSynchronization>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000fd2:	f000 fb3d 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000194 	.word	0x20000194
 8000fe4:	40000400 	.word	0x40000400

08000fe8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <MX_TIM10_Init+0x40>)
 8000fee:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <MX_TIM10_Init+0x44>)
 8000ff0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8001028 <MX_TIM10_Init+0x40>)
 8000ff4:	2253      	movs	r2, #83	@ 0x53
 8000ff6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <MX_TIM10_Init+0x40>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <MX_TIM10_Init+0x40>)
 8001000:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001004:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001006:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <MX_TIM10_Init+0x40>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <MX_TIM10_Init+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	@ (8001028 <MX_TIM10_Init+0x40>)
 8001014:	f003 fa42 	bl	800449c <HAL_TIM_Base_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800101e:	f000 fb17 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001dc 	.word	0x200001dc
 800102c:	40014400 	.word	0x40014400

08001030 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <MX_USART2_UART_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 800103c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001040:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800104e:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001054:	4b09      	ldr	r3, [pc, #36]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001056:	220c      	movs	r2, #12
 8001058:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001062:	2200      	movs	r2, #0
 8001064:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001066:	4805      	ldr	r0, [pc, #20]	@ (800107c <MX_USART2_UART_Init+0x4c>)
 8001068:	f004 fa22 	bl	80054b0 <HAL_UART_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001072:	f000 faed 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000224 	.word	0x20000224
 8001080:	40004400 	.word	0x40004400

08001084 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <MX_USART6_UART_Init+0x4c>)
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <MX_USART6_UART_Init+0x50>)
 800108c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800108e:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <MX_USART6_UART_Init+0x4c>)
 8001090:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001094:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b0e      	ldr	r3, [pc, #56]	@ (80010d0 <MX_USART6_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0c      	ldr	r3, [pc, #48]	@ (80010d0 <MX_USART6_UART_Init+0x4c>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	@ (80010d0 <MX_USART6_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b09      	ldr	r3, [pc, #36]	@ (80010d0 <MX_USART6_UART_Init+0x4c>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <MX_USART6_UART_Init+0x4c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b06      	ldr	r3, [pc, #24]	@ (80010d0 <MX_USART6_UART_Init+0x4c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010ba:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_USART6_UART_Init+0x4c>)
 80010bc:	f004 f9f8 	bl	80054b0 <HAL_UART_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010c6:	f000 fac3 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000026c 	.word	0x2000026c
 80010d4:	40011400 	.word	0x40011400

080010d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <MX_DMA_Init+0x3c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001114 <MX_DMA_Init+0x3c>)
 80010e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b09      	ldr	r3, [pc, #36]	@ (8001114 <MX_DMA_Init+0x3c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2038      	movs	r0, #56	@ 0x38
 8001100:	f001 fb49 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001104:	2038      	movs	r0, #56	@ 0x38
 8001106:	f001 fb62 	bl	80027ce <HAL_NVIC_EnableIRQ>

}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800

08001118 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08a      	sub	sp, #40	@ 0x28
 800111c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a2c      	ldr	r2, [pc, #176]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a25      	ldr	r2, [pc, #148]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a1e      	ldr	r2, [pc, #120]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b1c      	ldr	r3, [pc, #112]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a17      	ldr	r2, [pc, #92]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIR1_Pin|DIR2_Pin|DS18B20_Pin|DIR3_Pin
 800119e:	2200      	movs	r2, #0
 80011a0:	21e3      	movs	r1, #227	@ 0xe3
 80011a2:	4812      	ldr	r0, [pc, #72]	@ (80011ec <MX_GPIO_Init+0xd4>)
 80011a4:	f002 f8cc 	bl	8003340 <HAL_GPIO_WritePin>
                          |DIR4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011a8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ae:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	480c      	ldr	r0, [pc, #48]	@ (80011f0 <MX_GPIO_Init+0xd8>)
 80011c0:	f001 ff22 	bl	8003008 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR1_Pin DIR2_Pin DS18B20_Pin DIR3_Pin
                           DIR4_Pin */
  GPIO_InitStruct.Pin = DIR1_Pin|DIR2_Pin|DS18B20_Pin|DIR3_Pin
 80011c4:	23e3      	movs	r3, #227	@ 0xe3
 80011c6:	617b      	str	r3, [r7, #20]
                          |DIR4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4804      	ldr	r0, [pc, #16]	@ (80011ec <MX_GPIO_Init+0xd4>)
 80011dc:	f001 ff14 	bl	8003008 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	@ 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020800 	.word	0x40020800

080011f4 <Get_Current_Time>:

/* USER CODE BEGIN 4 */
void Get_Current_Time(char *date, char *time)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
    RTC_TimeTypeDef sTime;
    RTC_DateTypeDef sDate;

    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	2200      	movs	r2, #0
 8001204:	4619      	mov	r1, r3
 8001206:	4813      	ldr	r0, [pc, #76]	@ (8001254 <Get_Current_Time+0x60>)
 8001208:	f002 ff59 	bl	80040be <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800120c:	f107 0308 	add.w	r3, r7, #8
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	480f      	ldr	r0, [pc, #60]	@ (8001254 <Get_Current_Time+0x60>)
 8001216:	f003 f834 	bl	8004282 <HAL_RTC_GetDate>

    snprintf(date, 11, "%04d.%02d.%02d", 2000 + sDate.Year, sDate.Month, sDate.Date);
 800121a:	7afb      	ldrb	r3, [r7, #11]
 800121c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001220:	7a7a      	ldrb	r2, [r7, #9]
 8001222:	7ab9      	ldrb	r1, [r7, #10]
 8001224:	9101      	str	r1, [sp, #4]
 8001226:	9200      	str	r2, [sp, #0]
 8001228:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <Get_Current_Time+0x64>)
 800122a:	210b      	movs	r1, #11
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f005 fac7 	bl	80067c0 <sniprintf>
    snprintf(time, 9, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001232:	7b3b      	ldrb	r3, [r7, #12]
 8001234:	4619      	mov	r1, r3
 8001236:	7b7b      	ldrb	r3, [r7, #13]
 8001238:	7bba      	ldrb	r2, [r7, #14]
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	460b      	mov	r3, r1
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <Get_Current_Time+0x68>)
 8001242:	2109      	movs	r1, #9
 8001244:	6838      	ldr	r0, [r7, #0]
 8001246:	f005 fabb 	bl	80067c0 <sniprintf>
}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000012c 	.word	0x2000012c
 8001258:	08007ae0 	.word	0x08007ae0
 800125c:	08007af0 	.word	0x08007af0

08001260 <Send_Data_To_SQL>:

void Send_Data_To_SQL(const char *name, const char *date, const char *time, uint16_t turbidity, uint16_t temperature, uint16_t level1, uint16_t level2)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b099      	sub	sp, #100	@ 0x64
 8001264:	af06      	add	r7, sp, #24
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	807b      	strh	r3, [r7, #2]
    char sendBuf[CMD_SIZE];
    snprintf(sendBuf, CMD_SIZE, "[%s]%s@%s@%u@%u@%u@%u\n",
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8001274:	f8b7 105c 	ldrh.w	r1, [r7, #92]	@ 0x5c
 8001278:	f8b7 0060 	ldrh.w	r0, [r7, #96]	@ 0x60
 800127c:	f107 0414 	add.w	r4, r7, #20
 8001280:	9005      	str	r0, [sp, #20]
 8001282:	9104      	str	r1, [sp, #16]
 8001284:	9203      	str	r2, [sp, #12]
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <Send_Data_To_SQL+0x6c>)
 8001294:	2132      	movs	r1, #50	@ 0x32
 8001296:	4620      	mov	r0, r4
 8001298:	f005 fa92 	bl	80067c0 <sniprintf>
             name, date, time, turbidity, temperature, level1, level2);
    printf("Sending Data: %s\r\n", sendBuf);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <Send_Data_To_SQL+0x70>)
 80012a4:	f005 fa1c 	bl	80066e0 <iprintf>
    HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), HAL_MAX_DELAY);
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7fe ffa1 	bl	80001f4 <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f107 0114 	add.w	r1, r7, #20
 80012ba:	f04f 33ff 	mov.w	r3, #4294967295
 80012be:	4805      	ldr	r0, [pc, #20]	@ (80012d4 <Send_Data_To_SQL+0x74>)
 80012c0:	f004 f946 	bl	8005550 <HAL_UART_Transmit>
}
 80012c4:	bf00      	nop
 80012c6:	374c      	adds	r7, #76	@ 0x4c
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd90      	pop	{r4, r7, pc}
 80012cc:	08007b00 	.word	0x08007b00
 80012d0:	08007b18 	.word	0x08007b18
 80012d4:	2000026c 	.word	0x2000026c

080012d8 <Motor_SetSpeed>:
uint8_t Convert_ADC_To_Percentage(uint16_t adc_value)
{
    return (uint8_t)((adc_value * 100) / 4095);
}
void Motor_SetSpeed(uint16_t speed)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
  if (speed > MOTOR_MAX_SPEED)
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012e8:	d302      	bcc.n	80012f0 <Motor_SetSpeed+0x18>
    speed = MOTOR_MAX_SPEED;
 80012ea:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80012ee:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 80012f0:	4b04      	ldr	r3, [pc, #16]	@ (8001304 <Motor_SetSpeed+0x2c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	88fa      	ldrh	r2, [r7, #6]
 80012f6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	2000014c 	.word	0x2000014c

08001308 <Motor_SetDirection>:
void Motor_SetDirection(uint8_t direction)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	71fb      	strb	r3, [r7, #7]
  if (direction == 1)
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d10a      	bne.n	800132e <Motor_SetDirection+0x26>
  {
    HAL_GPIO_WritePin(GPIOA, DIR1_Pin, GPIO_PIN_SET);  // DIR1 = HIGH
 8001318:	2201      	movs	r2, #1
 800131a:	2101      	movs	r1, #1
 800131c:	480b      	ldr	r0, [pc, #44]	@ (800134c <Motor_SetDirection+0x44>)
 800131e:	f002 f80f 	bl	8003340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIR2_Pin, GPIO_PIN_RESET); // DIR2 = LOW
 8001322:	2200      	movs	r2, #0
 8001324:	2102      	movs	r1, #2
 8001326:	4809      	ldr	r0, [pc, #36]	@ (800134c <Motor_SetDirection+0x44>)
 8001328:	f002 f80a 	bl	8003340 <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(GPIOA, DIR1_Pin, GPIO_PIN_RESET); // DIR1 = LOW
    HAL_GPIO_WritePin(GPIOA, DIR2_Pin, GPIO_PIN_SET);  // DIR2 = HIGH
  }
}
 800132c:	e009      	b.n	8001342 <Motor_SetDirection+0x3a>
    HAL_GPIO_WritePin(GPIOA, DIR1_Pin, GPIO_PIN_RESET); // DIR1 = LOW
 800132e:	2200      	movs	r2, #0
 8001330:	2101      	movs	r1, #1
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <Motor_SetDirection+0x44>)
 8001334:	f002 f804 	bl	8003340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIR2_Pin, GPIO_PIN_SET);  // DIR2 = HIGH
 8001338:	2201      	movs	r2, #1
 800133a:	2102      	movs	r1, #2
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <Motor_SetDirection+0x44>)
 800133e:	f001 ffff 	bl	8003340 <HAL_GPIO_WritePin>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40020000 	.word	0x40020000

08001350 <Motor_Stop>:
void Motor_Start(void)
{
  Motor_SetSpeed(999);
}
void Motor_Stop(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  Motor_SetSpeed(0);
 8001354:	2000      	movs	r0, #0
 8001356:	f7ff ffbf 	bl	80012d8 <Motor_SetSpeed>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <Motor2_SetSpeed>:
void Motor2_SetSpeed(uint16_t speed)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	80fb      	strh	r3, [r7, #6]
  if (speed > MOTOR_MAX_SPEED)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001370:	d302      	bcc.n	8001378 <Motor2_SetSpeed+0x18>
    speed = MOTOR_MAX_SPEED;
 8001372:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001376:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 8001378:	4b04      	ldr	r3, [pc, #16]	@ (800138c <Motor2_SetSpeed+0x2c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	88fa      	ldrh	r2, [r7, #6]
 800137e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	2000014c 	.word	0x2000014c

08001390 <Motor2_SetDirection>:
void Motor2_SetDirection(uint8_t direction)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  if (direction == 1)
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10a      	bne.n	80013b6 <Motor2_SetDirection+0x26>
  {
    HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_SET);  // DIR1 = HIGH
 80013a0:	2201      	movs	r2, #1
 80013a2:	2140      	movs	r1, #64	@ 0x40
 80013a4:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <Motor2_SetDirection+0x44>)
 80013a6:	f001 ffcb 	bl	8003340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIR4_Pin, GPIO_PIN_RESET); // DIR2 = LOW
 80013aa:	2200      	movs	r2, #0
 80013ac:	2180      	movs	r1, #128	@ 0x80
 80013ae:	4809      	ldr	r0, [pc, #36]	@ (80013d4 <Motor2_SetDirection+0x44>)
 80013b0:	f001 ffc6 	bl	8003340 <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_RESET); // DIR1 = LOW
    HAL_GPIO_WritePin(GPIOA, DIR4_Pin, GPIO_PIN_SET);  // DIR2 = HIGH
  }
}
 80013b4:	e009      	b.n	80013ca <Motor2_SetDirection+0x3a>
    HAL_GPIO_WritePin(GPIOA, DIR3_Pin, GPIO_PIN_RESET); // DIR1 = LOW
 80013b6:	2200      	movs	r2, #0
 80013b8:	2140      	movs	r1, #64	@ 0x40
 80013ba:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <Motor2_SetDirection+0x44>)
 80013bc:	f001 ffc0 	bl	8003340 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, DIR4_Pin, GPIO_PIN_SET);  // DIR2 = HIGH
 80013c0:	2201      	movs	r2, #1
 80013c2:	2180      	movs	r1, #128	@ 0x80
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <Motor2_SetDirection+0x44>)
 80013c6:	f001 ffbb 	bl	8003340 <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020000 	.word	0x40020000

080013d8 <Motor2_Stop>:
void Motor2_Start(void)
{
  Motor2_SetSpeed(999);
}
void Motor2_Stop(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  Motor2_SetSpeed(0);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff ffbf 	bl	8001360 <Motor2_SetSpeed>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80013f0:	1d39      	adds	r1, r7, #4
 80013f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013f6:	2201      	movs	r2, #1
 80013f8:	4803      	ldr	r0, [pc, #12]	@ (8001408 <__io_putchar+0x20>)
 80013fa:	f004 f8a9 	bl	8005550 <HAL_UART_Transmit>

  return ch;
 80013fe:	687b      	ldr	r3, [r7, #4]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20000224 	.word	0x20000224

0800140c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 8001414:	4b0d      	ldr	r3, [pc, #52]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800141c:	6013      	str	r3, [r2, #0]
	if(tim3Cnt == 1000) //1ms * 1000
 800141e:	4b0b      	ldr	r3, [pc, #44]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001426:	d10a      	bne.n	800143e <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3301      	adds	r3, #1
 8001434:	4a07      	ldr	r2, [pc, #28]	@ (8001454 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001436:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8001438:	4b04      	ldr	r3, [pc, #16]	@ (800144c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
	}
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	20000338 	.word	0x20000338
 8001450:	200002b4 	.word	0x200002b4
 8001454:	200002b8 	.word	0x200002b8

08001458 <bluetooth_Event>:
void bluetooth_Event()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0a2      	sub	sp, #136	@ 0x88
 800145c:	af00      	add	r7, sp, #0

  int i=0;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8001464:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 8001474:	2300      	movs	r3, #0
 8001476:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001478:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800147c:	222e      	movs	r2, #46	@ 0x2e
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f005 faa9 	bl	80069d8 <memset>
  char sendBuf[CMD_SIZE]={0};
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	f107 0308 	add.w	r3, r7, #8
 800148e:	222e      	movs	r2, #46	@ 0x2e
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f005 faa0 	bl	80069d8 <memset>
  strcpy(recvBuf,btData);
 8001498:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800149c:	4921      	ldr	r1, [pc, #132]	@ (8001524 <bluetooth_Event+0xcc>)
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 fb71 	bl	8006b86 <strcpy>

  printf("btData : %s\r\n",btData);
 80014a4:	491f      	ldr	r1, [pc, #124]	@ (8001524 <bluetooth_Event+0xcc>)
 80014a6:	4820      	ldr	r0, [pc, #128]	@ (8001528 <bluetooth_Event+0xd0>)
 80014a8:	f005 f91a 	bl	80066e0 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 80014ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014b0:	491e      	ldr	r1, [pc, #120]	@ (800152c <bluetooth_Event+0xd4>)
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 fa98 	bl	80069e8 <strtok>
 80014b8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 80014bc:	e017      	b.n	80014ee <bluetooth_Event+0x96>
  {
    pArray[i] =  pToken;
 80014be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	3388      	adds	r3, #136	@ 0x88
 80014c6:	443b      	add	r3, r7
 80014c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80014cc:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 80014d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014d4:	3301      	adds	r3, #1
 80014d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80014da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80014de:	2b04      	cmp	r3, #4
 80014e0:	dc0a      	bgt.n	80014f8 <bluetooth_Event+0xa0>
      break;
    pToken = strtok(NULL,"[@]");
 80014e2:	4912      	ldr	r1, [pc, #72]	@ (800152c <bluetooth_Event+0xd4>)
 80014e4:	2000      	movs	r0, #0
 80014e6:	f005 fa7f 	bl	80069e8 <strtok>
 80014ea:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 80014ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1e3      	bne.n	80014be <bluetooth_Event+0x66>
 80014f6:	e000      	b.n	80014fa <bluetooth_Event+0xa2>
      break;
 80014f8:	bf00      	nop
  }
//  printf("pArray[0] : %s\r\n",pArray[0]);
//  printf("pArray[1] : %s\r\n",pArray[1]);
//  printf("pArray[2] : %s\r\n",pArray[2]);
  if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 80014fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80014fc:	490c      	ldr	r1, [pc, #48]	@ (8001530 <bluetooth_Event+0xd8>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe6e 	bl	80001e0 <strcmp>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <bluetooth_Event+0xc2>
  {
      return;
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 800150a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800150c:	4909      	ldr	r1, [pc, #36]	@ (8001534 <bluetooth_Event+0xdc>)
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe fe66 	bl	80001e0 <strcmp>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 8001518:	e000      	b.n	800151c <bluetooth_Event+0xc4>
      return;
 800151a:	bf00      	nop

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 0xFFFF);
}
 800151c:	3788      	adds	r7, #136	@ 0x88
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200002f4 	.word	0x200002f4
 8001528:	08007b2c 	.word	0x08007b2c
 800152c:	08007b3c 	.word	0x08007b3c
 8001530:	08007b40 	.word	0x08007b40
 8001534:	08007b4c 	.word	0x08007b4c

08001538 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a2e      	ldr	r2, [pc, #184]	@ (8001600 <HAL_UART_RxCpltCallback+0xc8>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d128      	bne.n	800159c <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 800154a:	4b2e      	ldr	r3, [pc, #184]	@ (8001604 <HAL_UART_RxCpltCallback+0xcc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a2e      	ldr	r2, [pc, #184]	@ (8001608 <HAL_UART_RxCpltCallback+0xd0>)
 8001550:	7811      	ldrb	r1, [r2, #0]
 8001552:	4a2e      	ldr	r2, [pc, #184]	@ (800160c <HAL_UART_RxCpltCallback+0xd4>)
 8001554:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8001556:	4b2b      	ldr	r3, [pc, #172]	@ (8001604 <HAL_UART_RxCpltCallback+0xcc>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a2c      	ldr	r2, [pc, #176]	@ (800160c <HAL_UART_RxCpltCallback+0xd4>)
 800155c:	5cd3      	ldrb	r3, [r2, r3]
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b0d      	cmp	r3, #13
 8001562:	d005      	beq.n	8001570 <HAL_UART_RxCpltCallback+0x38>
 8001564:	4b27      	ldr	r3, [pc, #156]	@ (8001604 <HAL_UART_RxCpltCallback+0xcc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a29      	ldr	r2, [pc, #164]	@ (8001610 <HAL_UART_RxCpltCallback+0xd8>)
 800156a:	5cd3      	ldrb	r3, [r2, r3]
 800156c:	2b0a      	cmp	r3, #10
 800156e:	d10b      	bne.n	8001588 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 8001570:	4b24      	ldr	r3, [pc, #144]	@ (8001604 <HAL_UART_RxCpltCallback+0xcc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a25      	ldr	r2, [pc, #148]	@ (800160c <HAL_UART_RxCpltCallback+0xd4>)
 8001576:	2100      	movs	r1, #0
 8001578:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 800157a:	4b26      	ldr	r3, [pc, #152]	@ (8001614 <HAL_UART_RxCpltCallback+0xdc>)
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_UART_RxCpltCallback+0xcc>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e004      	b.n	8001592 <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 8001588:	4b1e      	ldr	r3, [pc, #120]	@ (8001604 <HAL_UART_RxCpltCallback+0xcc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3301      	adds	r3, #1
 800158e:	4a1d      	ldr	r2, [pc, #116]	@ (8001604 <HAL_UART_RxCpltCallback+0xcc>)
 8001590:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8001592:	2201      	movs	r2, #1
 8001594:	491c      	ldr	r1, [pc, #112]	@ (8001608 <HAL_UART_RxCpltCallback+0xd0>)
 8001596:	4820      	ldr	r0, [pc, #128]	@ (8001618 <HAL_UART_RxCpltCallback+0xe0>)
 8001598:	f004 f865 	bl	8005666 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1e      	ldr	r2, [pc, #120]	@ (800161c <HAL_UART_RxCpltCallback+0xe4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d127      	bne.n	80015f6 <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 80015a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <HAL_UART_RxCpltCallback+0xe8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001624 <HAL_UART_RxCpltCallback+0xec>)
 80015ac:	7811      	ldrb	r1, [r2, #0]
 80015ae:	4a18      	ldr	r2, [pc, #96]	@ (8001610 <HAL_UART_RxCpltCallback+0xd8>)
 80015b0:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 80015b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <HAL_UART_RxCpltCallback+0xe8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a16      	ldr	r2, [pc, #88]	@ (8001610 <HAL_UART_RxCpltCallback+0xd8>)
 80015b8:	5cd3      	ldrb	r3, [r2, r3]
 80015ba:	2b0a      	cmp	r3, #10
 80015bc:	d005      	beq.n	80015ca <HAL_UART_RxCpltCallback+0x92>
 80015be:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <HAL_UART_RxCpltCallback+0xe8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <HAL_UART_RxCpltCallback+0xd8>)
 80015c4:	5cd3      	ldrb	r3, [r2, r3]
 80015c6:	2b0d      	cmp	r3, #13
 80015c8:	d10b      	bne.n	80015e2 <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 80015ca:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <HAL_UART_RxCpltCallback+0xe8>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a10      	ldr	r2, [pc, #64]	@ (8001610 <HAL_UART_RxCpltCallback+0xd8>)
 80015d0:	2100      	movs	r1, #0
 80015d2:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <HAL_UART_RxCpltCallback+0xf0>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <HAL_UART_RxCpltCallback+0xe8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	e004      	b.n	80015ec <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <HAL_UART_RxCpltCallback+0xe8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	4a0d      	ldr	r2, [pc, #52]	@ (8001620 <HAL_UART_RxCpltCallback+0xe8>)
 80015ea:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	490d      	ldr	r1, [pc, #52]	@ (8001624 <HAL_UART_RxCpltCallback+0xec>)
 80015f0:	480e      	ldr	r0, [pc, #56]	@ (800162c <HAL_UART_RxCpltCallback+0xf4>)
 80015f2:	f004 f838 	bl	8005666 <HAL_UART_Receive_IT>
    }
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40004400 	.word	0x40004400
 8001604:	2000033c 	.word	0x2000033c
 8001608:	200002bc 	.word	0x200002bc
 800160c:	200002c0 	.word	0x200002c0
 8001610:	200002f4 	.word	0x200002f4
 8001614:	200002bd 	.word	0x200002bd
 8001618:	20000224 	.word	0x20000224
 800161c:	40011400 	.word	0x40011400
 8001620:	20000340 	.word	0x20000340
 8001624:	200002f3 	.word	0x200002f3
 8001628:	200002f2 	.word	0x200002f2
 800162c:	2000026c 	.word	0x2000026c

08001630 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
	adcFlag = 1;
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <HAL_ADC_ConvCpltCallback+0x1c>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]
}
 800163e:	bf00      	nop
 8001640:	370c      	adds	r7, #12
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000330 	.word	0x20000330

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <Error_Handler+0x8>

0800165c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <HAL_MspInit+0x5c>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	4a13      	ldr	r2, [pc, #76]	@ (80016b8 <HAL_MspInit+0x5c>)
 800166c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001670:	6453      	str	r3, [r2, #68]	@ 0x44
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <HAL_MspInit+0x5c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_MspInit+0x5c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <HAL_MspInit+0x5c>)
 8001688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800168c:	6413      	str	r3, [r2, #64]	@ 0x40
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_MspInit+0x5c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001696:	603b      	str	r3, [r7, #0]
 8001698:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800169a:	2007      	movs	r0, #7
 800169c:	f001 f870 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2100      	movs	r1, #0
 80016a4:	2005      	movs	r0, #5
 80016a6:	f001 f876 	bl	8002796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016aa:	2005      	movs	r0, #5
 80016ac:	f001 f88f 	bl	80027ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a3b      	ldr	r2, [pc, #236]	@ (80017c8 <HAL_ADC_MspInit+0x10c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d170      	bne.n	80017c0 <HAL_ADC_MspInit+0x104>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b3a      	ldr	r3, [pc, #232]	@ (80017cc <HAL_ADC_MspInit+0x110>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	4a39      	ldr	r2, [pc, #228]	@ (80017cc <HAL_ADC_MspInit+0x110>)
 80016e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ee:	4b37      	ldr	r3, [pc, #220]	@ (80017cc <HAL_ADC_MspInit+0x110>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b33      	ldr	r3, [pc, #204]	@ (80017cc <HAL_ADC_MspInit+0x110>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a32      	ldr	r2, [pc, #200]	@ (80017cc <HAL_ADC_MspInit+0x110>)
 8001704:	f043 0304 	orr.w	r3, r3, #4
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <HAL_ADC_MspInit+0x110>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0304 	and.w	r3, r3, #4
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	4b2c      	ldr	r3, [pc, #176]	@ (80017cc <HAL_ADC_MspInit+0x110>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	4a2b      	ldr	r2, [pc, #172]	@ (80017cc <HAL_ADC_MspInit+0x110>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	6313      	str	r3, [r2, #48]	@ 0x30
 8001726:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <HAL_ADC_MspInit+0x110>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Bheight_Pin|Nheight_Pin;
 8001732:	2303      	movs	r3, #3
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001736:	2303      	movs	r3, #3
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4822      	ldr	r0, [pc, #136]	@ (80017d0 <HAL_ADC_MspInit+0x114>)
 8001746:	f001 fc5f 	bl	8003008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WSENSER_Pin;
 800174a:	2310      	movs	r3, #16
 800174c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800174e:	2303      	movs	r3, #3
 8001750:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(WSENSER_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	481d      	ldr	r0, [pc, #116]	@ (80017d4 <HAL_ADC_MspInit+0x118>)
 800175e:	f001 fc53 	bl	8003008 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001762:	4b1d      	ldr	r3, [pc, #116]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 8001764:	4a1d      	ldr	r2, [pc, #116]	@ (80017dc <HAL_ADC_MspInit+0x120>)
 8001766:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800176e:	4b1a      	ldr	r3, [pc, #104]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001774:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 8001776:	2200      	movs	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800177a:	4b17      	ldr	r3, [pc, #92]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 800177c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001780:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 8001784:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001788:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 800178c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001790:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017a4:	480c      	ldr	r0, [pc, #48]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 80017a6:	f001 f82d 	bl	8002804 <HAL_DMA_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 80017b0:	f7ff ff4e 	bl	8001650 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 80017b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80017ba:	4a07      	ldr	r2, [pc, #28]	@ (80017d8 <HAL_ADC_MspInit+0x11c>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017c0:	bf00      	nop
 80017c2:	3728      	adds	r7, #40	@ 0x28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40012000 	.word	0x40012000
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	200000cc 	.word	0x200000cc
 80017dc:	40026410 	.word	0x40026410

080017e0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
 80017f8:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001830 <HAL_RTC_MspInit+0x50>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d111      	bne.n	8001828 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001804:	2302      	movs	r3, #2
 8001806:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001808:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800180c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4618      	mov	r0, r3
 8001814:	f002 fa46 	bl	8003ca4 <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800181e:	f7ff ff17 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001822:	4b04      	ldr	r3, [pc, #16]	@ (8001834 <HAL_RTC_MspInit+0x54>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40002800 	.word	0x40002800
 8001834:	42470e3c 	.word	0x42470e3c

08001838 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a22      	ldr	r2, [pc, #136]	@ (80018d0 <HAL_TIM_Base_MspInit+0x98>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d10e      	bne.n	8001868 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	4b21      	ldr	r3, [pc, #132]	@ (80018d4 <HAL_TIM_Base_MspInit+0x9c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001852:	4a20      	ldr	r2, [pc, #128]	@ (80018d4 <HAL_TIM_Base_MspInit+0x9c>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6453      	str	r3, [r2, #68]	@ 0x44
 800185a:	4b1e      	ldr	r3, [pc, #120]	@ (80018d4 <HAL_TIM_Base_MspInit+0x9c>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001866:	e02e      	b.n	80018c6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a1a      	ldr	r2, [pc, #104]	@ (80018d8 <HAL_TIM_Base_MspInit+0xa0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d116      	bne.n	80018a0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <HAL_TIM_Base_MspInit+0x9c>)
 8001878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187a:	4a16      	ldr	r2, [pc, #88]	@ (80018d4 <HAL_TIM_Base_MspInit+0x9c>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6413      	str	r3, [r2, #64]	@ 0x40
 8001882:	4b14      	ldr	r3, [pc, #80]	@ (80018d4 <HAL_TIM_Base_MspInit+0x9c>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	201d      	movs	r0, #29
 8001894:	f000 ff7f 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001898:	201d      	movs	r0, #29
 800189a:	f000 ff98 	bl	80027ce <HAL_NVIC_EnableIRQ>
}
 800189e:	e012      	b.n	80018c6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <HAL_TIM_Base_MspInit+0xa4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d10d      	bne.n	80018c6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <HAL_TIM_Base_MspInit+0x9c>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018b2:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <HAL_TIM_Base_MspInit+0x9c>)
 80018b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_TIM_Base_MspInit+0x9c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40010000 	.word	0x40010000
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40000400 	.word	0x40000400
 80018dc:	40014400 	.word	0x40014400

080018e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 030c 	add.w	r3, r7, #12
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <HAL_TIM_MspPostInit+0x68>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d11e      	bne.n	8001940 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b11      	ldr	r3, [pc, #68]	@ (800194c <HAL_TIM_MspPostInit+0x6c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a10      	ldr	r2, [pc, #64]	@ (800194c <HAL_TIM_MspPostInit+0x6c>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <HAL_TIM_MspPostInit+0x6c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800191e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001922:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001924:	2302      	movs	r3, #2
 8001926:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001930:	2301      	movs	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	4619      	mov	r1, r3
 800193a:	4805      	ldr	r0, [pc, #20]	@ (8001950 <HAL_TIM_MspPostInit+0x70>)
 800193c:	f001 fb64 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001940:	bf00      	nop
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40010000 	.word	0x40010000
 800194c:	40023800 	.word	0x40023800
 8001950:	40020000 	.word	0x40020000

08001954 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08c      	sub	sp, #48	@ 0x30
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a36      	ldr	r2, [pc, #216]	@ (8001a4c <HAL_UART_MspInit+0xf8>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d12c      	bne.n	80019d0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	4a34      	ldr	r2, [pc, #208]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001984:	6413      	str	r3, [r2, #64]	@ 0x40
 8001986:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	4b2e      	ldr	r3, [pc, #184]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a2d      	ldr	r2, [pc, #180]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|USART_RX_Pin;
 80019ae:	230c      	movs	r3, #12
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019be:	2307      	movs	r3, #7
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4822      	ldr	r0, [pc, #136]	@ (8001a54 <HAL_UART_MspInit+0x100>)
 80019ca:	f001 fb1d 	bl	8003008 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019ce:	e038      	b.n	8001a42 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a20      	ldr	r2, [pc, #128]	@ (8001a58 <HAL_UART_MspInit+0x104>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d133      	bne.n	8001a42 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ea:	4b19      	ldr	r3, [pc, #100]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a06:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <HAL_UART_MspInit+0xfc>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a12:	23c0      	movs	r3, #192	@ 0xc0
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a22:	2308      	movs	r3, #8
 8001a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480b      	ldr	r0, [pc, #44]	@ (8001a5c <HAL_UART_MspInit+0x108>)
 8001a2e:	f001 faeb 	bl	8003008 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2047      	movs	r0, #71	@ 0x47
 8001a38:	f000 fead 	bl	8002796 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001a3c:	2047      	movs	r0, #71	@ 0x47
 8001a3e:	f000 fec6 	bl	80027ce <HAL_NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3730      	adds	r7, #48	@ 0x30
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40004400 	.word	0x40004400
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40011400 	.word	0x40011400
 8001a5c:	40020800 	.word	0x40020800

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <NMI_Handler+0x4>

08001a68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <HardFault_Handler+0x4>

08001a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <MemManage_Handler+0x4>

08001a78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab6:	f000 f97b 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}

08001abe <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <TIM3_IRQHandler+0x10>)
 8001ad2:	f002 fe9f 	bl	8004814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000194 	.word	0x20000194

08001ae0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <DMA2_Stream0_IRQHandler+0x10>)
 8001ae6:	f001 f825 	bl	8002b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	200000cc 	.word	0x200000cc

08001af4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001af8:	4802      	ldr	r0, [pc, #8]	@ (8001b04 <USART6_IRQHandler+0x10>)
 8001afa:	f003 fdd9 	bl	80056b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000026c 	.word	0x2000026c

08001b08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return 1;
 8001b0c:	2301      	movs	r3, #1
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <_kill>:

int _kill(int pid, int sig)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b22:	f005 f803 	bl	8006b2c <__errno>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2216      	movs	r2, #22
 8001b2a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <_exit>:

void _exit (int status)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ffe7 	bl	8001b18 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b4a:	bf00      	nop
 8001b4c:	e7fd      	b.n	8001b4a <_exit+0x12>

08001b4e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b086      	sub	sp, #24
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	60f8      	str	r0, [r7, #12]
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	e00a      	b.n	8001b76 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b60:	f3af 8000 	nop.w
 8001b64:	4601      	mov	r1, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	60ba      	str	r2, [r7, #8]
 8001b6c:	b2ca      	uxtb	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	3301      	adds	r3, #1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	dbf0      	blt.n	8001b60 <_read+0x12>
  }

  return len;
 8001b7e:	687b      	ldr	r3, [r7, #4]
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	e009      	b.n	8001bae <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	60ba      	str	r2, [r7, #8]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fc20 	bl	80013e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	dbf1      	blt.n	8001b9a <_write+0x12>
  }
  return len;
 8001bb6:	687b      	ldr	r3, [r7, #4]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_close>:

int _close(int file)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001be8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <_isatty>:

int _isatty(int file)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c00:	2301      	movs	r3, #1
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f004 ff68 	bl	8006b2c <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20020000 	.word	0x20020000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	20000344 	.word	0x20000344
 8001c90:	20000498 	.word	0x20000498

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cbc:	f7ff ffea 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc0:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cc2:	490d      	ldr	r1, [pc, #52]	@ (8001cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cc8:	e002      	b.n	8001cd0 <LoopCopyDataInit>

08001cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cce:	3304      	adds	r3, #4

08001cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd4:	d3f9      	bcc.n	8001cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8001d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cdc:	e001      	b.n	8001ce2 <LoopFillZerobss>

08001cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce0:	3204      	adds	r2, #4

08001ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce4:	d3fb      	bcc.n	8001cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ce6:	f004 ff27 	bl	8006b38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cea:	f7fe fdad 	bl	8000848 <main>
  bx  lr    
 8001cee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cf8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001cfc:	08007c6c 	.word	0x08007c6c
  ldr r2, =_sbss
 8001d00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d04:	20000498 	.word	0x20000498

08001d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d08:	e7fe      	b.n	8001d08 <ADC_IRQHandler>
	...

08001d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d10:	4b0e      	ldr	r3, [pc, #56]	@ (8001d4c <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a0d      	ldr	r2, [pc, #52]	@ (8001d4c <HAL_Init+0x40>)
 8001d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_Init+0x40>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <HAL_Init+0x40>)
 8001d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d28:	4b08      	ldr	r3, [pc, #32]	@ (8001d4c <HAL_Init+0x40>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a07      	ldr	r2, [pc, #28]	@ (8001d4c <HAL_Init+0x40>)
 8001d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d34:	2003      	movs	r0, #3
 8001d36:	f000 fd23 	bl	8002780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f000 f808 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d40:	f7ff fc8c 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023c00 	.word	0x40023c00

08001d50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d58:	4b12      	ldr	r3, [pc, #72]	@ (8001da4 <HAL_InitTick+0x54>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_InitTick+0x58>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4619      	mov	r1, r3
 8001d62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d66:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 fd3b 	bl	80027ea <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00e      	b.n	8001d9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b0f      	cmp	r3, #15
 8001d82:	d80a      	bhi.n	8001d9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d84:	2200      	movs	r2, #0
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f000 fd03 	bl	8002796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d90:	4a06      	ldr	r2, [pc, #24]	@ (8001dac <HAL_InitTick+0x5c>)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000000 	.word	0x20000000
 8001da8:	20000008 	.word	0x20000008
 8001dac:	20000004 	.word	0x20000004

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	20000008 	.word	0x20000008
 8001dd4:	20000348 	.word	0x20000348

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000348 	.word	0x20000348

08001df0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e033      	b.n	8001e6e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d109      	bne.n	8001e22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fc54 	bl	80016bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d118      	bne.n	8001e60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e32:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e36:	f023 0302 	bic.w	r3, r3, #2
 8001e3a:	f043 0202 	orr.w	r2, r3, #2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fa4e 	bl	80022e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f023 0303 	bic.w	r3, r3, #3
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e5e:	e001      	b.n	8001e64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3710      	adds	r7, #16
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Start_DMA+0x1e>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e0ce      	b.n	8002034 <HAL_ADC_Start_DMA+0x1bc>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d018      	beq.n	8001ede <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ebc:	4b5f      	ldr	r3, [pc, #380]	@ (800203c <HAL_ADC_Start_DMA+0x1c4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a5f      	ldr	r2, [pc, #380]	@ (8002040 <HAL_ADC_Start_DMA+0x1c8>)
 8001ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec6:	0c9a      	lsrs	r2, r3, #18
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001eec:	d107      	bne.n	8001efe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001efc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	f040 8086 	bne.w	800201a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d007      	beq.n	8001f40 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f38:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f4c:	d106      	bne.n	8001f5c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f023 0206 	bic.w	r2, r3, #6
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f5a:	e002      	b.n	8001f62 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f6a:	4b36      	ldr	r3, [pc, #216]	@ (8002044 <HAL_ADC_Start_DMA+0x1cc>)
 8001f6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f72:	4a35      	ldr	r2, [pc, #212]	@ (8002048 <HAL_ADC_Start_DMA+0x1d0>)
 8001f74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f7a:	4a34      	ldr	r2, [pc, #208]	@ (800204c <HAL_ADC_Start_DMA+0x1d4>)
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f82:	4a33      	ldr	r2, [pc, #204]	@ (8002050 <HAL_ADC_Start_DMA+0x1d8>)
 8001f84:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001f9e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fae:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	334c      	adds	r3, #76	@ 0x4c
 8001fba:	4619      	mov	r1, r3
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f000 fcce 	bl	8002960 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10f      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d129      	bne.n	8002032 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001fec:	609a      	str	r2, [r3, #8]
 8001fee:	e020      	b.n	8002032 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a17      	ldr	r2, [pc, #92]	@ (8002054 <HAL_ADC_Start_DMA+0x1dc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d11b      	bne.n	8002032 <HAL_ADC_Start_DMA+0x1ba>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d114      	bne.n	8002032 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002016:	609a      	str	r2, [r3, #8]
 8002018:	e00b      	b.n	8002032 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f043 0210 	orr.w	r2, r3, #16
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800202a:	f043 0201 	orr.w	r2, r3, #1
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	20000000 	.word	0x20000000
 8002040:	431bde83 	.word	0x431bde83
 8002044:	40012300 	.word	0x40012300
 8002048:	080024dd 	.word	0x080024dd
 800204c:	08002597 	.word	0x08002597
 8002050:	080025b3 	.word	0x080025b3
 8002054:	40012000 	.word	0x40012000

08002058 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x1c>
 8002098:	2302      	movs	r3, #2
 800209a:	e113      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x244>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	d925      	bls.n	80020f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	461a      	mov	r2, r3
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	3b1e      	subs	r3, #30
 80020c2:	2207      	movs	r2, #7
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43da      	mvns	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	400a      	ands	r2, r1
 80020d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68d9      	ldr	r1, [r3, #12]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	4603      	mov	r3, r0
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4403      	add	r3, r0
 80020ea:	3b1e      	subs	r3, #30
 80020ec:	409a      	lsls	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	e022      	b.n	800213e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6919      	ldr	r1, [r3, #16]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	2207      	movs	r2, #7
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43da      	mvns	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	400a      	ands	r2, r1
 800211a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6919      	ldr	r1, [r3, #16]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	689a      	ldr	r2, [r3, #8]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	4618      	mov	r0, r3
 800212e:	4603      	mov	r3, r0
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4403      	add	r3, r0
 8002134:	409a      	lsls	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b06      	cmp	r3, #6
 8002144:	d824      	bhi.n	8002190 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b05      	subs	r3, #5
 8002158:	221f      	movs	r2, #31
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	400a      	ands	r2, r1
 8002166:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	b29b      	uxth	r3, r3
 8002174:	4618      	mov	r0, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	3b05      	subs	r3, #5
 8002182:	fa00 f203 	lsl.w	r2, r0, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	635a      	str	r2, [r3, #52]	@ 0x34
 800218e:	e04c      	b.n	800222a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d824      	bhi.n	80021e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	3b23      	subs	r3, #35	@ 0x23
 80021aa:	221f      	movs	r2, #31
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43da      	mvns	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	400a      	ands	r2, r1
 80021b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	3b23      	subs	r3, #35	@ 0x23
 80021d4:	fa00 f203 	lsl.w	r2, r0, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	631a      	str	r2, [r3, #48]	@ 0x30
 80021e0:	e023      	b.n	800222a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	4613      	mov	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4413      	add	r3, r2
 80021f2:	3b41      	subs	r3, #65	@ 0x41
 80021f4:	221f      	movs	r2, #31
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	43da      	mvns	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	400a      	ands	r2, r1
 8002202:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	3b41      	subs	r3, #65	@ 0x41
 800221e:	fa00 f203 	lsl.w	r2, r0, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222a:	4b29      	ldr	r3, [pc, #164]	@ (80022d0 <HAL_ADC_ConfigChannel+0x250>)
 800222c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a28      	ldr	r2, [pc, #160]	@ (80022d4 <HAL_ADC_ConfigChannel+0x254>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d10f      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1d8>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b12      	cmp	r3, #18
 800223e:	d10b      	bne.n	8002258 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1d      	ldr	r2, [pc, #116]	@ (80022d4 <HAL_ADC_ConfigChannel+0x254>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d12b      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x23a>
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <HAL_ADC_ConfigChannel+0x258>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d003      	beq.n	8002274 <HAL_ADC_ConfigChannel+0x1f4>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b11      	cmp	r3, #17
 8002272:	d122      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a11      	ldr	r2, [pc, #68]	@ (80022d8 <HAL_ADC_ConfigChannel+0x258>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d111      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002296:	4b11      	ldr	r3, [pc, #68]	@ (80022dc <HAL_ADC_ConfigChannel+0x25c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a11      	ldr	r2, [pc, #68]	@ (80022e0 <HAL_ADC_ConfigChannel+0x260>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	0c9a      	lsrs	r2, r3, #18
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022ac:	e002      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f9      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	40012300 	.word	0x40012300
 80022d4:	40012000 	.word	0x40012000
 80022d8:	10000012 	.word	0x10000012
 80022dc:	20000000 	.word	0x20000000
 80022e0:	431bde83 	.word	0x431bde83

080022e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022ec:	4b79      	ldr	r3, [pc, #484]	@ (80024d4 <ADC_Init+0x1f0>)
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	431a      	orrs	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6859      	ldr	r1, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	021a      	lsls	r2, r3, #8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800233c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6859      	ldr	r1, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	430a      	orrs	r2, r1
 800234e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800235e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68da      	ldr	r2, [r3, #12]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002376:	4a58      	ldr	r2, [pc, #352]	@ (80024d8 <ADC_Init+0x1f4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d022      	beq.n	80023c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800238a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6899      	ldr	r1, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6899      	ldr	r1, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	e00f      	b.n	80023e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0202 	bic.w	r2, r2, #2
 80023f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6899      	ldr	r1, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7e1b      	ldrb	r3, [r3, #24]
 80023fc:	005a      	lsls	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01b      	beq.n	8002448 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800241e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800242e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6859      	ldr	r1, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	3b01      	subs	r3, #1
 800243c:	035a      	lsls	r2, r3, #13
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	e007      	b.n	8002458 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002456:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002466:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69db      	ldr	r3, [r3, #28]
 8002472:	3b01      	subs	r3, #1
 8002474:	051a      	lsls	r2, r3, #20
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689a      	ldr	r2, [r3, #8]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800248c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6899      	ldr	r1, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800249a:	025a      	lsls	r2, r3, #9
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	430a      	orrs	r2, r1
 80024a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689a      	ldr	r2, [r3, #8]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6899      	ldr	r1, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	029a      	lsls	r2, r3, #10
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	40012300 	.word	0x40012300
 80024d8:	0f000001 	.word	0x0f000001

080024dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d13c      	bne.n	8002570 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d12b      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002514:	2b00      	cmp	r3, #0
 8002516:	d127      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002530:	2b00      	cmp	r3, #0
 8002532:	d119      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0220 	bic.w	r2, r2, #32
 8002542:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002554:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d105      	bne.n	8002568 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	f043 0201 	orr.w	r2, r3, #1
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f7ff f861 	bl	8001630 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800256e:	e00e      	b.n	800258e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f7ff fd75 	bl	800206c <HAL_ADC_ErrorCallback>
}
 8002582:	e004      	b.n	800258e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	4798      	blx	r3
}
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff fd57 	bl	8002058 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025aa:	bf00      	nop
 80025ac:	3710      	adds	r7, #16
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b084      	sub	sp, #16
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2240      	movs	r2, #64	@ 0x40
 80025c4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f7ff fd4a 	bl	800206c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025d8:	bf00      	nop
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0307 	and.w	r3, r3, #7
 80025ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025fc:	4013      	ands	r3, r2
 80025fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800260c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002612:	4a04      	ldr	r2, [pc, #16]	@ (8002624 <__NVIC_SetPriorityGrouping+0x44>)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	60d3      	str	r3, [r2, #12]
}
 8002618:	bf00      	nop
 800261a:	3714      	adds	r7, #20
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800262c:	4b04      	ldr	r3, [pc, #16]	@ (8002640 <__NVIC_GetPriorityGrouping+0x18>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	0a1b      	lsrs	r3, r3, #8
 8002632:	f003 0307 	and.w	r3, r3, #7
}
 8002636:	4618      	mov	r0, r3
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	e000ed00 	.word	0xe000ed00

08002644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db0b      	blt.n	800266e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	f003 021f 	and.w	r2, r3, #31
 800265c:	4907      	ldr	r1, [pc, #28]	@ (800267c <__NVIC_EnableIRQ+0x38>)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	2001      	movs	r0, #1
 8002666:	fa00 f202 	lsl.w	r2, r0, r2
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	e000e100 	.word	0xe000e100

08002680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	6039      	str	r1, [r7, #0]
 800268a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	db0a      	blt.n	80026aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	b2da      	uxtb	r2, r3
 8002698:	490c      	ldr	r1, [pc, #48]	@ (80026cc <__NVIC_SetPriority+0x4c>)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	0112      	lsls	r2, r2, #4
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026a8:	e00a      	b.n	80026c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4908      	ldr	r1, [pc, #32]	@ (80026d0 <__NVIC_SetPriority+0x50>)
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	3b04      	subs	r3, #4
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	b2d2      	uxtb	r2, r2
 80026bc:	440b      	add	r3, r1
 80026be:	761a      	strb	r2, [r3, #24]
}
 80026c0:	bf00      	nop
 80026c2:	370c      	adds	r7, #12
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	e000e100 	.word	0xe000e100
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b089      	sub	sp, #36	@ 0x24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f1c3 0307 	rsb	r3, r3, #7
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf28      	it	cs
 80026f2:	2304      	movcs	r3, #4
 80026f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3304      	adds	r3, #4
 80026fa:	2b06      	cmp	r3, #6
 80026fc:	d902      	bls.n	8002704 <NVIC_EncodePriority+0x30>
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3b03      	subs	r3, #3
 8002702:	e000      	b.n	8002706 <NVIC_EncodePriority+0x32>
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002708:	f04f 32ff 	mov.w	r2, #4294967295
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43da      	mvns	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	401a      	ands	r2, r3
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800271c:	f04f 31ff 	mov.w	r1, #4294967295
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	fa01 f303 	lsl.w	r3, r1, r3
 8002726:	43d9      	mvns	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800272c:	4313      	orrs	r3, r2
         );
}
 800272e:	4618      	mov	r0, r3
 8002730:	3724      	adds	r7, #36	@ 0x24
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800274c:	d301      	bcc.n	8002752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002752:	4a0a      	ldr	r2, [pc, #40]	@ (800277c <SysTick_Config+0x40>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3b01      	subs	r3, #1
 8002758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800275a:	210f      	movs	r1, #15
 800275c:	f04f 30ff 	mov.w	r0, #4294967295
 8002760:	f7ff ff8e 	bl	8002680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002764:	4b05      	ldr	r3, [pc, #20]	@ (800277c <SysTick_Config+0x40>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800276a:	4b04      	ldr	r3, [pc, #16]	@ (800277c <SysTick_Config+0x40>)
 800276c:	2207      	movs	r2, #7
 800276e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	e000e010 	.word	0xe000e010

08002780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7ff ff29 	bl	80025e0 <__NVIC_SetPriorityGrouping>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	4603      	mov	r3, r0
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027a8:	f7ff ff3e 	bl	8002628 <__NVIC_GetPriorityGrouping>
 80027ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	6978      	ldr	r0, [r7, #20]
 80027b4:	f7ff ff8e 	bl	80026d4 <NVIC_EncodePriority>
 80027b8:	4602      	mov	r2, r0
 80027ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027be:	4611      	mov	r1, r2
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff5d 	bl	8002680 <__NVIC_SetPriority>
}
 80027c6:	bf00      	nop
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	4603      	mov	r3, r0
 80027d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff31 	bl	8002644 <__NVIC_EnableIRQ>
}
 80027e2:	bf00      	nop
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff ffa2 	bl	800273c <SysTick_Config>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff fae2 	bl	8001dd8 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e099      	b.n	8002954 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002840:	e00f      	b.n	8002862 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002842:	f7ff fac9 	bl	8001dd8 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b05      	cmp	r3, #5
 800284e:	d908      	bls.n	8002862 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e078      	b.n	8002954 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e8      	bne.n	8002842 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4b38      	ldr	r3, [pc, #224]	@ (800295c <HAL_DMA_Init+0x158>)
 800287c:	4013      	ands	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d107      	bne.n	80028cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	4313      	orrs	r3, r2
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f023 0307 	bic.w	r3, r3, #7
 80028e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d117      	bne.n	8002926 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00e      	beq.n	8002926 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fb01 	bl	8002f10 <DMA_CheckFifoParam>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2240      	movs	r2, #64	@ 0x40
 8002918:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002922:	2301      	movs	r3, #1
 8002924:	e016      	b.n	8002954 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fab8 	bl	8002ea4 <DMA_CalcBaseAndBitshift>
 8002934:	4603      	mov	r3, r0
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293c:	223f      	movs	r2, #63	@ 0x3f
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	f010803f 	.word	0xf010803f

08002960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002976:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_DMA_Start_IT+0x26>
 8002982:	2302      	movs	r3, #2
 8002984:	e040      	b.n	8002a08 <HAL_DMA_Start_IT+0xa8>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d12f      	bne.n	80029fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fa4a 	bl	8002e48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b8:	223f      	movs	r2, #63	@ 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0216 	orr.w	r2, r2, #22
 80029ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0208 	orr.w	r2, r2, #8
 80029e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e005      	b.n	8002a06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a1e:	f7ff f9db 	bl	8001dd8 <HAL_GetTick>
 8002a22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d008      	beq.n	8002a42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2280      	movs	r2, #128	@ 0x80
 8002a34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e052      	b.n	8002ae8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0216 	bic.w	r2, r2, #22
 8002a50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <HAL_DMA_Abort+0x62>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0208 	bic.w	r2, r2, #8
 8002a80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0201 	bic.w	r2, r2, #1
 8002a90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a92:	e013      	b.n	8002abc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a94:	f7ff f9a0 	bl	8001dd8 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d90c      	bls.n	8002abc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e015      	b.n	8002ae8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1e4      	bne.n	8002a94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ace:	223f      	movs	r2, #63	@ 0x3f
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d004      	beq.n	8002b0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2280      	movs	r2, #128	@ 0x80
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00c      	b.n	8002b28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2205      	movs	r2, #5
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0201 	bic.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b40:	4b8e      	ldr	r3, [pc, #568]	@ (8002d7c <HAL_DMA_IRQHandler+0x248>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a8e      	ldr	r2, [pc, #568]	@ (8002d80 <HAL_DMA_IRQHandler+0x24c>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0a9b      	lsrs	r3, r3, #10
 8002b4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5e:	2208      	movs	r2, #8
 8002b60:	409a      	lsls	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01a      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d013      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0204 	bic.w	r2, r2, #4
 8002b86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b98:	f043 0201 	orr.w	r2, r3, #1
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	409a      	lsls	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	4013      	ands	r3, r2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d012      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	f043 0202 	orr.w	r2, r3, #2
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bda:	2204      	movs	r2, #4
 8002bdc:	409a      	lsls	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d012      	beq.n	8002c0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00b      	beq.n	8002c0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c04:	f043 0204 	orr.w	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	2210      	movs	r2, #16
 8002c12:	409a      	lsls	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d043      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d03c      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c2e:	2210      	movs	r2, #16
 8002c30:	409a      	lsls	r2, r3
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d018      	beq.n	8002c76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d108      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d024      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	4798      	blx	r3
 8002c62:	e01f      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01b      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	4798      	blx	r3
 8002c74:	e016      	b.n	8002ca4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d107      	bne.n	8002c94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0208 	bic.w	r2, r2, #8
 8002c92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d003      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca8:	2220      	movs	r2, #32
 8002caa:	409a      	lsls	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 808f 	beq.w	8002dd4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0310 	and.w	r3, r3, #16
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8087 	beq.w	8002dd4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cca:	2220      	movs	r2, #32
 8002ccc:	409a      	lsls	r2, r3
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d136      	bne.n	8002d4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0216 	bic.w	r2, r2, #22
 8002cec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695a      	ldr	r2, [r3, #20]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cfc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d103      	bne.n	8002d0e <HAL_DMA_IRQHandler+0x1da>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d007      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0208 	bic.w	r2, r2, #8
 8002d1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	223f      	movs	r2, #63	@ 0x3f
 8002d24:	409a      	lsls	r2, r3
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d07e      	beq.n	8002e40 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	4798      	blx	r3
        }
        return;
 8002d4a:	e079      	b.n	8002e40 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01d      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d031      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	4798      	blx	r3
 8002d78:	e02c      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x2a0>
 8002d7a:	bf00      	nop
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d023      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	4798      	blx	r3
 8002d94:	e01e      	b.n	8002dd4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10f      	bne.n	8002dc4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0210 	bic.w	r2, r2, #16
 8002db2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d032      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d022      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2205      	movs	r2, #5
 8002dec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f022 0201 	bic.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	3301      	adds	r3, #1
 8002e04:	60bb      	str	r3, [r7, #8]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d307      	bcc.n	8002e1c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1f2      	bne.n	8002e00 <HAL_DMA_IRQHandler+0x2cc>
 8002e1a:	e000      	b.n	8002e1e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e1c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
 8002e3e:	e000      	b.n	8002e42 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e40:	bf00      	nop
    }
  }
}
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002e64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	683a      	ldr	r2, [r7, #0]
 8002e6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b40      	cmp	r3, #64	@ 0x40
 8002e74:	d108      	bne.n	8002e88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e86:	e007      	b.n	8002e98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	60da      	str	r2, [r3, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	3b10      	subs	r3, #16
 8002eb4:	4a14      	ldr	r2, [pc, #80]	@ (8002f08 <DMA_CalcBaseAndBitshift+0x64>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ebe:	4a13      	ldr	r2, [pc, #76]	@ (8002f0c <DMA_CalcBaseAndBitshift+0x68>)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b03      	cmp	r3, #3
 8002ed0:	d909      	bls.n	8002ee6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	1d1a      	adds	r2, r3, #4
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002ee4:	e007      	b.n	8002ef6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002eee:	f023 0303 	bic.w	r3, r3, #3
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	aaaaaaab 	.word	0xaaaaaaab
 8002f0c:	08007b74 	.word	0x08007b74

08002f10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d11f      	bne.n	8002f6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d856      	bhi.n	8002fde <DMA_CheckFifoParam+0xce>
 8002f30:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <DMA_CheckFifoParam+0x28>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	08002f5b 	.word	0x08002f5b
 8002f40:	08002f49 	.word	0x08002f49
 8002f44:	08002fdf 	.word	0x08002fdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d046      	beq.n	8002fe2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f58:	e043      	b.n	8002fe2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f62:	d140      	bne.n	8002fe6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f68:	e03d      	b.n	8002fe6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f72:	d121      	bne.n	8002fb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b03      	cmp	r3, #3
 8002f78:	d837      	bhi.n	8002fea <DMA_CheckFifoParam+0xda>
 8002f7a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f80 <DMA_CheckFifoParam+0x70>)
 8002f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f80:	08002f91 	.word	0x08002f91
 8002f84:	08002f97 	.word	0x08002f97
 8002f88:	08002f91 	.word	0x08002f91
 8002f8c:	08002fa9 	.word	0x08002fa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	73fb      	strb	r3, [r7, #15]
      break;
 8002f94:	e030      	b.n	8002ff8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d025      	beq.n	8002fee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa6:	e022      	b.n	8002fee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002fb0:	d11f      	bne.n	8002ff2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fb6:	e01c      	b.n	8002ff2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d903      	bls.n	8002fc6 <DMA_CheckFifoParam+0xb6>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b03      	cmp	r3, #3
 8002fc2:	d003      	beq.n	8002fcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fc4:	e018      	b.n	8002ff8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	73fb      	strb	r3, [r7, #15]
      break;
 8002fca:	e015      	b.n	8002ff8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00e      	beq.n	8002ff6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	73fb      	strb	r3, [r7, #15]
      break;
 8002fdc:	e00b      	b.n	8002ff6 <DMA_CheckFifoParam+0xe6>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e00a      	b.n	8002ff8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e008      	b.n	8002ff8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e006      	b.n	8002ff8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fea:	bf00      	nop
 8002fec:	e004      	b.n	8002ff8 <DMA_CheckFifoParam+0xe8>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e002      	b.n	8002ff8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ff6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop

08003008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	@ 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800301a:	2300      	movs	r3, #0
 800301c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e159      	b.n	80032d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003024:	2201      	movs	r2, #1
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	429a      	cmp	r2, r3
 800303e:	f040 8148 	bne.w	80032d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 0303 	and.w	r3, r3, #3
 800304a:	2b01      	cmp	r3, #1
 800304c:	d005      	beq.n	800305a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003056:	2b02      	cmp	r3, #2
 8003058:	d130      	bne.n	80030bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	2203      	movs	r2, #3
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4013      	ands	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003090:	2201      	movs	r2, #1
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	091b      	lsrs	r3, r3, #4
 80030a6:	f003 0201 	and.w	r2, r3, #1
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d017      	beq.n	80030f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	2203      	movs	r2, #3
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4013      	ands	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d123      	bne.n	800314c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	08da      	lsrs	r2, r3, #3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3208      	adds	r2, #8
 800310c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	220f      	movs	r2, #15
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	08da      	lsrs	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	3208      	adds	r2, #8
 8003146:	69b9      	ldr	r1, [r7, #24]
 8003148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2203      	movs	r2, #3
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4013      	ands	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0203 	and.w	r2, r3, #3
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a2 	beq.w	80032d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	4b57      	ldr	r3, [pc, #348]	@ (80032f0 <HAL_GPIO_Init+0x2e8>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003196:	4a56      	ldr	r2, [pc, #344]	@ (80032f0 <HAL_GPIO_Init+0x2e8>)
 8003198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800319c:	6453      	str	r3, [r2, #68]	@ 0x44
 800319e:	4b54      	ldr	r3, [pc, #336]	@ (80032f0 <HAL_GPIO_Init+0x2e8>)
 80031a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031aa:	4a52      	ldr	r2, [pc, #328]	@ (80032f4 <HAL_GPIO_Init+0x2ec>)
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	3302      	adds	r3, #2
 80031b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	220f      	movs	r2, #15
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a49      	ldr	r2, [pc, #292]	@ (80032f8 <HAL_GPIO_Init+0x2f0>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d019      	beq.n	800320a <HAL_GPIO_Init+0x202>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a48      	ldr	r2, [pc, #288]	@ (80032fc <HAL_GPIO_Init+0x2f4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_GPIO_Init+0x1fe>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a47      	ldr	r2, [pc, #284]	@ (8003300 <HAL_GPIO_Init+0x2f8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <HAL_GPIO_Init+0x1fa>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a46      	ldr	r2, [pc, #280]	@ (8003304 <HAL_GPIO_Init+0x2fc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <HAL_GPIO_Init+0x1f6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a45      	ldr	r2, [pc, #276]	@ (8003308 <HAL_GPIO_Init+0x300>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_GPIO_Init+0x1f2>
 80031f6:	2304      	movs	r3, #4
 80031f8:	e008      	b.n	800320c <HAL_GPIO_Init+0x204>
 80031fa:	2307      	movs	r3, #7
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x204>
 80031fe:	2303      	movs	r3, #3
 8003200:	e004      	b.n	800320c <HAL_GPIO_Init+0x204>
 8003202:	2302      	movs	r3, #2
 8003204:	e002      	b.n	800320c <HAL_GPIO_Init+0x204>
 8003206:	2301      	movs	r3, #1
 8003208:	e000      	b.n	800320c <HAL_GPIO_Init+0x204>
 800320a:	2300      	movs	r3, #0
 800320c:	69fa      	ldr	r2, [r7, #28]
 800320e:	f002 0203 	and.w	r2, r2, #3
 8003212:	0092      	lsls	r2, r2, #2
 8003214:	4093      	lsls	r3, r2
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	4313      	orrs	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800321c:	4935      	ldr	r1, [pc, #212]	@ (80032f4 <HAL_GPIO_Init+0x2ec>)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800322a:	4b38      	ldr	r3, [pc, #224]	@ (800330c <HAL_GPIO_Init+0x304>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	43db      	mvns	r3, r3
 8003234:	69ba      	ldr	r2, [r7, #24]
 8003236:	4013      	ands	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324e:	4a2f      	ldr	r2, [pc, #188]	@ (800330c <HAL_GPIO_Init+0x304>)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003254:	4b2d      	ldr	r3, [pc, #180]	@ (800330c <HAL_GPIO_Init+0x304>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	43db      	mvns	r3, r3
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	4013      	ands	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d003      	beq.n	8003278 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003278:	4a24      	ldr	r2, [pc, #144]	@ (800330c <HAL_GPIO_Init+0x304>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800327e:	4b23      	ldr	r3, [pc, #140]	@ (800330c <HAL_GPIO_Init+0x304>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032a2:	4a1a      	ldr	r2, [pc, #104]	@ (800330c <HAL_GPIO_Init+0x304>)
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a8:	4b18      	ldr	r3, [pc, #96]	@ (800330c <HAL_GPIO_Init+0x304>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032cc:	4a0f      	ldr	r2, [pc, #60]	@ (800330c <HAL_GPIO_Init+0x304>)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3301      	adds	r3, #1
 80032d6:	61fb      	str	r3, [r7, #28]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	2b0f      	cmp	r3, #15
 80032dc:	f67f aea2 	bls.w	8003024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3724      	adds	r7, #36	@ 0x24
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40013c00 	.word	0x40013c00

08003310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e001      	b.n	8003332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
 800334c:	4613      	mov	r3, r2
 800334e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800335c:	e003      	b.n	8003366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e267      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d075      	beq.n	800347e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003392:	4b88      	ldr	r3, [pc, #544]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	2b04      	cmp	r3, #4
 800339c:	d00c      	beq.n	80033b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800339e:	4b85      	ldr	r3, [pc, #532]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033a6:	2b08      	cmp	r3, #8
 80033a8:	d112      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033aa:	4b82      	ldr	r3, [pc, #520]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b7e      	ldr	r3, [pc, #504]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0x108>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d157      	bne.n	800347c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e242      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x74>
 80033da:	4b76      	ldr	r3, [pc, #472]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a75      	ldr	r2, [pc, #468]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x98>
 80033f2:	4b70      	ldr	r3, [pc, #448]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a6f      	ldr	r2, [pc, #444]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b6d      	ldr	r3, [pc, #436]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6c      	ldr	r2, [pc, #432]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 800340c:	4b69      	ldr	r3, [pc, #420]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a68      	ldr	r2, [pc, #416]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b66      	ldr	r3, [pc, #408]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a65      	ldr	r2, [pc, #404]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fe fcd4 	bl	8001dd8 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fe fcd0 	bl	8001dd8 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	@ 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e207      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b5b      	ldr	r3, [pc, #364]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xc0>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003454:	f7fe fcc0 	bl	8001dd8 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fe fcbc 	bl	8001dd8 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	@ 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e1f3      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800346e:	4b51      	ldr	r3, [pc, #324]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0xe8>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d063      	beq.n	8003552 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800348a:	4b4a      	ldr	r3, [pc, #296]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00b      	beq.n	80034ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003496:	4b47      	ldr	r3, [pc, #284]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11c      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034a2:	4b44      	ldr	r3, [pc, #272]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d116      	bne.n	80034dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ae:	4b41      	ldr	r3, [pc, #260]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d005      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d001      	beq.n	80034c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e1c7      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c6:	4b3b      	ldr	r3, [pc, #236]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4937      	ldr	r1, [pc, #220]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034da:	e03a      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d020      	beq.n	8003526 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e4:	4b34      	ldr	r3, [pc, #208]	@ (80035b8 <HAL_RCC_OscConfig+0x244>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ea:	f7fe fc75 	bl	8001dd8 <HAL_GetTick>
 80034ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f0:	e008      	b.n	8003504 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f2:	f7fe fc71 	bl	8001dd8 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e1a8      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003504:	4b2b      	ldr	r3, [pc, #172]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0f0      	beq.n	80034f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b28      	ldr	r3, [pc, #160]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4925      	ldr	r1, [pc, #148]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003520:	4313      	orrs	r3, r2
 8003522:	600b      	str	r3, [r1, #0]
 8003524:	e015      	b.n	8003552 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003526:	4b24      	ldr	r3, [pc, #144]	@ (80035b8 <HAL_RCC_OscConfig+0x244>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fc54 	bl	8001dd8 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003534:	f7fe fc50 	bl	8001dd8 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e187      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003546:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d036      	beq.n	80035cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003566:	4b15      	ldr	r3, [pc, #84]	@ (80035bc <HAL_RCC_OscConfig+0x248>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356c:	f7fe fc34 	bl	8001dd8 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003574:	f7fe fc30 	bl	8001dd8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e167      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003586:	4b0b      	ldr	r3, [pc, #44]	@ (80035b4 <HAL_RCC_OscConfig+0x240>)
 8003588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x200>
 8003592:	e01b      	b.n	80035cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003594:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <HAL_RCC_OscConfig+0x248>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800359a:	f7fe fc1d 	bl	8001dd8 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a0:	e00e      	b.n	80035c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fe fc19 	bl	8001dd8 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d907      	bls.n	80035c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e150      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
 80035b4:	40023800 	.word	0x40023800
 80035b8:	42470000 	.word	0x42470000
 80035bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	4b88      	ldr	r3, [pc, #544]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1ea      	bne.n	80035a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8097 	beq.w	8003708 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035de:	4b81      	ldr	r3, [pc, #516]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10f      	bne.n	800360a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	4b7d      	ldr	r3, [pc, #500]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	4a7c      	ldr	r2, [pc, #496]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035fa:	4b7a      	ldr	r3, [pc, #488]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003606:	2301      	movs	r3, #1
 8003608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b77      	ldr	r3, [pc, #476]	@ (80037e8 <HAL_RCC_OscConfig+0x474>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b74      	ldr	r3, [pc, #464]	@ (80037e8 <HAL_RCC_OscConfig+0x474>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a73      	ldr	r2, [pc, #460]	@ (80037e8 <HAL_RCC_OscConfig+0x474>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fe fbd9 	bl	8001dd8 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fe fbd5 	bl	8001dd8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e10c      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b6a      	ldr	r3, [pc, #424]	@ (80037e8 <HAL_RCC_OscConfig+0x474>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x2ea>
 8003650:	4b64      	ldr	r3, [pc, #400]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	4a63      	ldr	r2, [pc, #396]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	6713      	str	r3, [r2, #112]	@ 0x70
 800365c:	e01c      	b.n	8003698 <HAL_RCC_OscConfig+0x324>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b05      	cmp	r3, #5
 8003664:	d10c      	bne.n	8003680 <HAL_RCC_OscConfig+0x30c>
 8003666:	4b5f      	ldr	r3, [pc, #380]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003668:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366a:	4a5e      	ldr	r2, [pc, #376]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	6713      	str	r3, [r2, #112]	@ 0x70
 8003672:	4b5c      	ldr	r3, [pc, #368]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	4a5b      	ldr	r2, [pc, #364]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6713      	str	r3, [r2, #112]	@ 0x70
 800367e:	e00b      	b.n	8003698 <HAL_RCC_OscConfig+0x324>
 8003680:	4b58      	ldr	r3, [pc, #352]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003684:	4a57      	ldr	r2, [pc, #348]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003686:	f023 0301 	bic.w	r3, r3, #1
 800368a:	6713      	str	r3, [r2, #112]	@ 0x70
 800368c:	4b55      	ldr	r3, [pc, #340]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 800368e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003690:	4a54      	ldr	r2, [pc, #336]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003692:	f023 0304 	bic.w	r3, r3, #4
 8003696:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d015      	beq.n	80036cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fe fb9a 	bl	8001dd8 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a6:	e00a      	b.n	80036be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a8:	f7fe fb96 	bl	8001dd8 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e0cb      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036be:	4b49      	ldr	r3, [pc, #292]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0ee      	beq.n	80036a8 <HAL_RCC_OscConfig+0x334>
 80036ca:	e014      	b.n	80036f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036cc:	f7fe fb84 	bl	8001dd8 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d2:	e00a      	b.n	80036ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d4:	f7fe fb80 	bl	8001dd8 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e0b5      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ea:	4b3e      	ldr	r3, [pc, #248]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1ee      	bne.n	80036d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036f6:	7dfb      	ldrb	r3, [r7, #23]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036fc:	4b39      	ldr	r3, [pc, #228]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	4a38      	ldr	r2, [pc, #224]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003702:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003706:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80a1 	beq.w	8003854 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003712:	4b34      	ldr	r3, [pc, #208]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b08      	cmp	r3, #8
 800371c:	d05c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d141      	bne.n	80037aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003726:	4b31      	ldr	r3, [pc, #196]	@ (80037ec <HAL_RCC_OscConfig+0x478>)
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7fe fb54 	bl	8001dd8 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fe fb50 	bl	8001dd8 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e087      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	4b27      	ldr	r3, [pc, #156]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	019b      	lsls	r3, r3, #6
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003768:	085b      	lsrs	r3, r3, #1
 800376a:	3b01      	subs	r3, #1
 800376c:	041b      	lsls	r3, r3, #16
 800376e:	431a      	orrs	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	491b      	ldr	r1, [pc, #108]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800377c:	4b1b      	ldr	r3, [pc, #108]	@ (80037ec <HAL_RCC_OscConfig+0x478>)
 800377e:	2201      	movs	r2, #1
 8003780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003782:	f7fe fb29 	bl	8001dd8 <HAL_GetTick>
 8003786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003788:	e008      	b.n	800379c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378a:	f7fe fb25 	bl	8001dd8 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d901      	bls.n	800379c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003798:	2303      	movs	r3, #3
 800379a:	e05c      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379c:	4b11      	ldr	r3, [pc, #68]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0f0      	beq.n	800378a <HAL_RCC_OscConfig+0x416>
 80037a8:	e054      	b.n	8003854 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037aa:	4b10      	ldr	r3, [pc, #64]	@ (80037ec <HAL_RCC_OscConfig+0x478>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fb12 	bl	8001dd8 <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	e008      	b.n	80037ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b8:	f7fe fb0e 	bl	8001dd8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e045      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ca:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <HAL_RCC_OscConfig+0x470>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f0      	bne.n	80037b8 <HAL_RCC_OscConfig+0x444>
 80037d6:	e03d      	b.n	8003854 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e038      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
 80037e4:	40023800 	.word	0x40023800
 80037e8:	40007000 	.word	0x40007000
 80037ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003860 <HAL_RCC_OscConfig+0x4ec>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d028      	beq.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003808:	429a      	cmp	r2, r3
 800380a:	d121      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	429a      	cmp	r2, r3
 8003818:	d11a      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003820:	4013      	ands	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003826:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003828:	4293      	cmp	r3, r2
 800382a:	d111      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003836:	085b      	lsrs	r3, r3, #1
 8003838:	3b01      	subs	r3, #1
 800383a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800383c:	429a      	cmp	r2, r3
 800383e:	d107      	bne.n	8003850 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800384c:	429a      	cmp	r2, r3
 800384e:	d001      	beq.n	8003854 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3718      	adds	r7, #24
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	40023800 	.word	0x40023800

08003864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0cc      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003878:	4b68      	ldr	r3, [pc, #416]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d90c      	bls.n	80038a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b65      	ldr	r3, [pc, #404]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	b2d2      	uxtb	r2, r2
 800388c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388e:	4b63      	ldr	r3, [pc, #396]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0b8      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b8:	4b59      	ldr	r3, [pc, #356]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	4a58      	ldr	r2, [pc, #352]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d005      	beq.n	80038dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d0:	4b53      	ldr	r3, [pc, #332]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	4a52      	ldr	r2, [pc, #328]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038dc:	4b50      	ldr	r3, [pc, #320]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	494d      	ldr	r1, [pc, #308]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d044      	beq.n	8003984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b47      	ldr	r3, [pc, #284]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d119      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d003      	beq.n	8003922 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391e:	2b03      	cmp	r3, #3
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003922:	4b3f      	ldr	r3, [pc, #252]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d109      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003932:	4b3b      	ldr	r3, [pc, #236]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e067      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003942:	4b37      	ldr	r3, [pc, #220]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f023 0203 	bic.w	r2, r3, #3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	4934      	ldr	r1, [pc, #208]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	4313      	orrs	r3, r2
 8003952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003954:	f7fe fa40 	bl	8001dd8 <HAL_GetTick>
 8003958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	e00a      	b.n	8003972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395c:	f7fe fa3c 	bl	8001dd8 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e04f      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003972:	4b2b      	ldr	r3, [pc, #172]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f003 020c 	and.w	r2, r3, #12
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	429a      	cmp	r2, r3
 8003982:	d1eb      	bne.n	800395c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003984:	4b25      	ldr	r3, [pc, #148]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d20c      	bcs.n	80039ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b22      	ldr	r3, [pc, #136]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800399a:	4b20      	ldr	r3, [pc, #128]	@ (8003a1c <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0307 	and.w	r3, r3, #7
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d001      	beq.n	80039ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e032      	b.n	8003a12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b8:	4b19      	ldr	r3, [pc, #100]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	4916      	ldr	r1, [pc, #88]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039d6:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	490e      	ldr	r1, [pc, #56]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039ea:	f000 f821 	bl	8003a30 <HAL_RCC_GetSysClockFreq>
 80039ee:	4602      	mov	r2, r0
 80039f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003a20 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	490a      	ldr	r1, [pc, #40]	@ (8003a24 <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	5ccb      	ldrb	r3, [r1, r3]
 80039fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003a02:	4a09      	ldr	r2, [pc, #36]	@ (8003a28 <HAL_RCC_ClockConfig+0x1c4>)
 8003a04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a06:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_RCC_ClockConfig+0x1c8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe f9a0 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023c00 	.word	0x40023c00
 8003a20:	40023800 	.word	0x40023800
 8003a24:	08007b5c 	.word	0x08007b5c
 8003a28:	20000000 	.word	0x20000000
 8003a2c:	20000004 	.word	0x20000004

08003a30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a34:	b094      	sub	sp, #80	@ 0x50
 8003a36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a48:	4b79      	ldr	r3, [pc, #484]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 030c 	and.w	r3, r3, #12
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d00d      	beq.n	8003a70 <HAL_RCC_GetSysClockFreq+0x40>
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	f200 80e1 	bhi.w	8003c1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <HAL_RCC_GetSysClockFreq+0x34>
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d003      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a62:	e0db      	b.n	8003c1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a64:	4b73      	ldr	r3, [pc, #460]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a68:	e0db      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a6a:	4b73      	ldr	r3, [pc, #460]	@ (8003c38 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a6e:	e0d8      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a70:	4b6f      	ldr	r3, [pc, #444]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a78:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d063      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a86:	4b6a      	ldr	r3, [pc, #424]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	099b      	lsrs	r3, r3, #6
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a90:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003aa2:	4622      	mov	r2, r4
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	f04f 0000 	mov.w	r0, #0
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	0159      	lsls	r1, r3, #5
 8003ab0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ab4:	0150      	lsls	r0, r2, #5
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4621      	mov	r1, r4
 8003abc:	1a51      	subs	r1, r2, r1
 8003abe:	6139      	str	r1, [r7, #16]
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ad4:	4659      	mov	r1, fp
 8003ad6:	018b      	lsls	r3, r1, #6
 8003ad8:	4651      	mov	r1, sl
 8003ada:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ade:	4651      	mov	r1, sl
 8003ae0:	018a      	lsls	r2, r1, #6
 8003ae2:	4651      	mov	r1, sl
 8003ae4:	ebb2 0801 	subs.w	r8, r2, r1
 8003ae8:	4659      	mov	r1, fp
 8003aea:	eb63 0901 	sbc.w	r9, r3, r1
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b02:	4690      	mov	r8, r2
 8003b04:	4699      	mov	r9, r3
 8003b06:	4623      	mov	r3, r4
 8003b08:	eb18 0303 	adds.w	r3, r8, r3
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	462b      	mov	r3, r5
 8003b10:	eb49 0303 	adc.w	r3, r9, r3
 8003b14:	60fb      	str	r3, [r7, #12]
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b22:	4629      	mov	r1, r5
 8003b24:	024b      	lsls	r3, r1, #9
 8003b26:	4621      	mov	r1, r4
 8003b28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b2c:	4621      	mov	r1, r4
 8003b2e:	024a      	lsls	r2, r1, #9
 8003b30:	4610      	mov	r0, r2
 8003b32:	4619      	mov	r1, r3
 8003b34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b36:	2200      	movs	r2, #0
 8003b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b40:	f7fc fbb6 	bl	80002b0 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b4c:	e058      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4e:	4b38      	ldr	r3, [pc, #224]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	2200      	movs	r2, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	4611      	mov	r1, r2
 8003b5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b5e:	623b      	str	r3, [r7, #32]
 8003b60:	2300      	movs	r3, #0
 8003b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b68:	4642      	mov	r2, r8
 8003b6a:	464b      	mov	r3, r9
 8003b6c:	f04f 0000 	mov.w	r0, #0
 8003b70:	f04f 0100 	mov.w	r1, #0
 8003b74:	0159      	lsls	r1, r3, #5
 8003b76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7a:	0150      	lsls	r0, r2, #5
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4641      	mov	r1, r8
 8003b82:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b86:	4649      	mov	r1, r9
 8003b88:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ba0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ba4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ba8:	f04f 0200 	mov.w	r2, #0
 8003bac:	f04f 0300 	mov.w	r3, #0
 8003bb0:	00eb      	lsls	r3, r5, #3
 8003bb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb6:	00e2      	lsls	r2, r4, #3
 8003bb8:	4614      	mov	r4, r2
 8003bba:	461d      	mov	r5, r3
 8003bbc:	4643      	mov	r3, r8
 8003bbe:	18e3      	adds	r3, r4, r3
 8003bc0:	603b      	str	r3, [r7, #0]
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	eb45 0303 	adc.w	r3, r5, r3
 8003bc8:	607b      	str	r3, [r7, #4]
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd6:	4629      	mov	r1, r5
 8003bd8:	028b      	lsls	r3, r1, #10
 8003bda:	4621      	mov	r1, r4
 8003bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003be0:	4621      	mov	r1, r4
 8003be2:	028a      	lsls	r2, r1, #10
 8003be4:	4610      	mov	r0, r2
 8003be6:	4619      	mov	r1, r3
 8003be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bea:	2200      	movs	r2, #0
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	61fa      	str	r2, [r7, #28]
 8003bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf4:	f7fc fb5c 	bl	80002b0 <__aeabi_uldivmod>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	460b      	mov	r3, r1
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c00:	4b0b      	ldr	r3, [pc, #44]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	3301      	adds	r3, #1
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c10:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c1a:	e002      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3750      	adds	r7, #80	@ 0x50
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2e:	bf00      	nop
 8003c30:	40023800 	.word	0x40023800
 8003c34:	00f42400 	.word	0x00f42400
 8003c38:	007a1200 	.word	0x007a1200

08003c3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c40:	4b03      	ldr	r3, [pc, #12]	@ (8003c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c42:	681b      	ldr	r3, [r3, #0]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	20000000 	.word	0x20000000

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c58:	f7ff fff0 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	4b05      	ldr	r3, [pc, #20]	@ (8003c74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	0a9b      	lsrs	r3, r3, #10
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	4903      	ldr	r1, [pc, #12]	@ (8003c78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6a:	5ccb      	ldrb	r3, [r1, r3]
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	40023800 	.word	0x40023800
 8003c78:	08007b6c 	.word	0x08007b6c

08003c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c80:	f7ff ffdc 	bl	8003c3c <HAL_RCC_GetHCLKFreq>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	@ (8003c9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0b5b      	lsrs	r3, r3, #13
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4903      	ldr	r1, [pc, #12]	@ (8003ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c92:	5ccb      	ldrb	r3, [r1, r3]
 8003c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	08007b6c 	.word	0x08007b6c

08003ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d038      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ccc:	4b68      	ldr	r3, [pc, #416]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd2:	f7fe f881 	bl	8001dd8 <HAL_GetTick>
 8003cd6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003cda:	f7fe f87d 	bl	8001dd8 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e0bd      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cec:	4b61      	ldr	r3, [pc, #388]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1f0      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	019b      	lsls	r3, r3, #6
 8003d02:	431a      	orrs	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	071b      	lsls	r3, r3, #28
 8003d0a:	495a      	ldr	r1, [pc, #360]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d12:	4b57      	ldr	r3, [pc, #348]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d18:	f7fe f85e 	bl	8001dd8 <HAL_GetTick>
 8003d1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d20:	f7fe f85a 	bl	8001dd8 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e09a      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d32:	4b50      	ldr	r3, [pc, #320]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8083 	beq.w	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	4b48      	ldr	r3, [pc, #288]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d54:	4a47      	ldr	r2, [pc, #284]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d5c:	4b45      	ldr	r3, [pc, #276]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d68:	4b43      	ldr	r3, [pc, #268]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a42      	ldr	r2, [pc, #264]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d72:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d74:	f7fe f830 	bl	8001dd8 <HAL_GetTick>
 8003d78:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7c:	f7fe f82c 	bl	8001dd8 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e06c      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d8e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d9a:	4b36      	ldr	r3, [pc, #216]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d02f      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d028      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dc0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003dce:	4a29      	ldr	r2, [pc, #164]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dd4:	4b27      	ldr	r3, [pc, #156]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d114      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003de0:	f7fd fffa 	bl	8001dd8 <HAL_GetTick>
 8003de4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de6:	e00a      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fd fff6 	bl	8001dd8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e034      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d0ee      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e16:	d10d      	bne.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003e18:	4b16      	ldr	r3, [pc, #88]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2c:	4911      	ldr	r1, [pc, #68]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	608b      	str	r3, [r1, #8]
 8003e32:	e005      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003e34:	4b0f      	ldr	r3, [pc, #60]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	4a0e      	ldr	r2, [pc, #56]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e3e:	6093      	str	r3, [r2, #8]
 8003e40:	4b0c      	ldr	r3, [pc, #48]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e4c:	4909      	ldr	r1, [pc, #36]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0308 	and.w	r3, r3, #8
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7d1a      	ldrb	r2, [r3, #20]
 8003e62:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003e64:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	42470068 	.word	0x42470068
 8003e74:	40023800 	.word	0x40023800
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	42470e40 	.word	0x42470e40
 8003e80:	424711e0 	.word	0x424711e0

08003e84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e073      	b.n	8003f82 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7f5b      	ldrb	r3, [r3, #29]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd fc98 	bl	80017e0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2202      	movs	r2, #2
 8003eb4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d055      	beq.n	8003f70 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	22ca      	movs	r2, #202	@ 0xca
 8003eca:	625a      	str	r2, [r3, #36]	@ 0x24
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2253      	movs	r2, #83	@ 0x53
 8003ed2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 fa49 	bl	800436c <RTC_EnterInitMode>
 8003eda:	4603      	mov	r3, r0
 8003edc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d12c      	bne.n	8003f3e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003ef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ef6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6899      	ldr	r1, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	695b      	ldr	r3, [r3, #20]
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68d2      	ldr	r2, [r2, #12]
 8003f1e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6919      	ldr	r1, [r3, #16]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	041a      	lsls	r2, r3, #16
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fa50 	bl	80043da <RTC_ExitInitMode>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d110      	bne.n	8003f66 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f52:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	22ff      	movs	r2, #255	@ 0xff
 8003f6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f6e:	e001      	b.n	8003f74 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f8a:	b590      	push	{r4, r7, lr}
 8003f8c:	b087      	sub	sp, #28
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	60f8      	str	r0, [r7, #12]
 8003f92:	60b9      	str	r1, [r7, #8]
 8003f94:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	7f1b      	ldrb	r3, [r3, #28]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RTC_SetTime+0x1c>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e087      	b.n	80040b6 <HAL_RTC_SetTime+0x12c>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d126      	bne.n	8004006 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d102      	bne.n	8003fcc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fa27 	bl	8004424 <RTC_ByteToBcd2>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	785b      	ldrb	r3, [r3, #1]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fa20 	bl	8004424 <RTC_ByteToBcd2>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fe8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	789b      	ldrb	r3, [r3, #2]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fa18 	bl	8004424 <RTC_ByteToBcd2>
 8003ff4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ff6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	78db      	ldrb	r3, [r3, #3]
 8003ffe:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
 8004004:	e018      	b.n	8004038 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d102      	bne.n	800401a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2200      	movs	r2, #0
 8004018:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	785b      	ldrb	r3, [r3, #1]
 8004024:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004026:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800402c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	78db      	ldrb	r3, [r3, #3]
 8004032:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	22ca      	movs	r2, #202	@ 0xca
 800403e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2253      	movs	r2, #83	@ 0x53
 8004046:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 f98f 	bl	800436c <RTC_EnterInitMode>
 800404e:	4603      	mov	r3, r0
 8004050:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d120      	bne.n	800409a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004062:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004066:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004076:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6899      	ldr	r1, [r3, #8]
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	431a      	orrs	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f9a2 	bl	80043da <RTC_ExitInitMode>
 8004096:	4603      	mov	r3, r0
 8004098:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d102      	bne.n	80040a6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	22ff      	movs	r2, #255	@ 0xff
 80040ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]

  return status;
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	371c      	adds	r7, #28
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd90      	pop	{r4, r7, pc}

080040be <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b086      	sub	sp, #24
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80040ca:	2300      	movs	r3, #0
 80040cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80040f0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80040f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004100:	b2da      	uxtb	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	0a1b      	lsrs	r3, r3, #8
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004110:	b2da      	uxtb	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	b2db      	uxtb	r3, r3
 800411a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800411e:	b2da      	uxtb	r2, r3
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	0d9b      	lsrs	r3, r3, #22
 8004128:	b2db      	uxtb	r3, r3
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	b2da      	uxtb	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d11a      	bne.n	8004170 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f98e 	bl	8004460 <RTC_Bcd2ToByte>
 8004144:	4603      	mov	r3, r0
 8004146:	461a      	mov	r2, r3
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	785b      	ldrb	r3, [r3, #1]
 8004150:	4618      	mov	r0, r3
 8004152:	f000 f985 	bl	8004460 <RTC_Bcd2ToByte>
 8004156:	4603      	mov	r3, r0
 8004158:	461a      	mov	r2, r3
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	789b      	ldrb	r3, [r3, #2]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 f97c 	bl	8004460 <RTC_Bcd2ToByte>
 8004168:	4603      	mov	r3, r0
 800416a:	461a      	mov	r2, r3
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800417a:	b590      	push	{r4, r7, lr}
 800417c:	b087      	sub	sp, #28
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004186:	2300      	movs	r3, #0
 8004188:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	7f1b      	ldrb	r3, [r3, #28]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_RTC_SetDate+0x1c>
 8004192:	2302      	movs	r3, #2
 8004194:	e071      	b.n	800427a <HAL_RTC_SetDate+0x100>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2202      	movs	r2, #2
 80041a0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10e      	bne.n	80041c6 <HAL_RTC_SetDate+0x4c>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	785b      	ldrb	r3, [r3, #1]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	785b      	ldrb	r3, [r3, #1]
 80041b8:	f023 0310 	bic.w	r3, r3, #16
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	330a      	adds	r3, #10
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11c      	bne.n	8004206 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	78db      	ldrb	r3, [r3, #3]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 f927 	bl	8004424 <RTC_ByteToBcd2>
 80041d6:	4603      	mov	r3, r0
 80041d8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	785b      	ldrb	r3, [r3, #1]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f920 	bl	8004424 <RTC_ByteToBcd2>
 80041e4:	4603      	mov	r3, r0
 80041e6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80041e8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	789b      	ldrb	r3, [r3, #2]
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 f918 	bl	8004424 <RTC_ByteToBcd2>
 80041f4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80041f6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	e00e      	b.n	8004224 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	785b      	ldrb	r3, [r3, #1]
 8004210:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004212:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004218:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	22ca      	movs	r2, #202	@ 0xca
 800422a:	625a      	str	r2, [r3, #36]	@ 0x24
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2253      	movs	r2, #83	@ 0x53
 8004232:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004234:	68f8      	ldr	r0, [r7, #12]
 8004236:	f000 f899 	bl	800436c <RTC_EnterInitMode>
 800423a:	4603      	mov	r3, r0
 800423c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10c      	bne.n	800425e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800424e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004252:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f8c0 	bl	80043da <RTC_ExitInitMode>
 800425a:	4603      	mov	r3, r0
 800425c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800425e:	7cfb      	ldrb	r3, [r7, #19]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d102      	bne.n	800426a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2201      	movs	r2, #1
 8004268:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	22ff      	movs	r2, #255	@ 0xff
 8004270:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]

  return status;
 8004278:	7cfb      	ldrb	r3, [r7, #19]
}
 800427a:	4618      	mov	r0, r3
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bd90      	pop	{r4, r7, pc}

08004282 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800429c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80042a0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	0c1b      	lsrs	r3, r3, #16
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	0a1b      	lsrs	r3, r3, #8
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	0b5b      	lsrs	r3, r3, #13
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d11a      	bne.n	8004316 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	78db      	ldrb	r3, [r3, #3]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f000 f8bb 	bl	8004460 <RTC_Bcd2ToByte>
 80042ea:	4603      	mov	r3, r0
 80042ec:	461a      	mov	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	785b      	ldrb	r3, [r3, #1]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f8b2 	bl	8004460 <RTC_Bcd2ToByte>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	789b      	ldrb	r3, [r3, #2]
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f8a9 	bl	8004460 <RTC_Bcd2ToByte>
 800430e:	4603      	mov	r3, r0
 8004310:	461a      	mov	r2, r3
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3718      	adds	r7, #24
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a0d      	ldr	r2, [pc, #52]	@ (8004368 <HAL_RTC_WaitForSynchro+0x48>)
 8004332:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004334:	f7fd fd50 	bl	8001dd8 <HAL_GetTick>
 8004338:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800433a:	e009      	b.n	8004350 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800433c:	f7fd fd4c 	bl	8001dd8 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800434a:	d901      	bls.n	8004350 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e007      	b.n	8004360 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f003 0320 	and.w	r3, r3, #32
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0ee      	beq.n	800433c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	00013f5f 	.word	0x00013f5f

0800436c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004374:	2300      	movs	r3, #0
 8004376:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004378:	2300      	movs	r3, #0
 800437a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004386:	2b00      	cmp	r3, #0
 8004388:	d122      	bne.n	80043d0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004398:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800439a:	f7fd fd1d 	bl	8001dd8 <HAL_GetTick>
 800439e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043a0:	e00c      	b.n	80043bc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043a2:	f7fd fd19 	bl	8001dd8 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043b0:	d904      	bls.n	80043bc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2204      	movs	r2, #4
 80043b6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <RTC_EnterInitMode+0x64>
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d1e8      	bne.n	80043a2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043f4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0320 	and.w	r3, r3, #32
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f7ff ff8b 	bl	8004320 <HAL_RTC_WaitForSynchro>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d004      	beq.n	800441a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2204      	movs	r2, #4
 8004414:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004432:	e005      	b.n	8004440 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3301      	adds	r3, #1
 8004438:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	3b0a      	subs	r3, #10
 800443e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004440:	79fb      	ldrb	r3, [r7, #7]
 8004442:	2b09      	cmp	r3, #9
 8004444:	d8f6      	bhi.n	8004434 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	b2da      	uxtb	r2, r3
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	4313      	orrs	r3, r2
 8004452:	b2db      	uxtb	r3, r3
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800446a:	2300      	movs	r3, #0
 800446c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	b2db      	uxtb	r3, r3
 8004474:	461a      	mov	r2, r3
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	b2db      	uxtb	r3, r3
 800448c:	4413      	add	r3, r2
 800448e:	b2db      	uxtb	r3, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e041      	b.n	8004532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fd f9b8 	bl	8001838 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 fc3c 	bl	8004d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d001      	beq.n	8004554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e044      	b.n	80045de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2202      	movs	r2, #2
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1e      	ldr	r2, [pc, #120]	@ (80045ec <HAL_TIM_Base_Start_IT+0xb0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d018      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800457e:	d013      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1a      	ldr	r2, [pc, #104]	@ (80045f0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00e      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a19      	ldr	r2, [pc, #100]	@ (80045f4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d009      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a17      	ldr	r2, [pc, #92]	@ (80045f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d004      	beq.n	80045a8 <HAL_TIM_Base_Start_IT+0x6c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a16      	ldr	r2, [pc, #88]	@ (80045fc <HAL_TIM_Base_Start_IT+0xc0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d111      	bne.n	80045cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 0307 	and.w	r3, r3, #7
 80045b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b06      	cmp	r3, #6
 80045b8:	d010      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ca:	e007      	b.n	80045dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40014000 	.word	0x40014000

08004600 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e041      	b.n	8004696 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f839 	bl	800469e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f000 fb8a 	bl	8004d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <HAL_TIM_PWM_Start+0x24>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e022      	b.n	800471e <HAL_TIM_PWM_Start+0x6a>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d109      	bne.n	80046f2 <HAL_TIM_PWM_Start+0x3e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	bf14      	ite	ne
 80046ea:	2301      	movne	r3, #1
 80046ec:	2300      	moveq	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	e015      	b.n	800471e <HAL_TIM_PWM_Start+0x6a>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d109      	bne.n	800470c <HAL_TIM_PWM_Start+0x58>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e008      	b.n	800471e <HAL_TIM_PWM_Start+0x6a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e068      	b.n	80047f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <HAL_TIM_PWM_Start+0x82>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004734:	e013      	b.n	800475e <HAL_TIM_PWM_Start+0xaa>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b04      	cmp	r3, #4
 800473a:	d104      	bne.n	8004746 <HAL_TIM_PWM_Start+0x92>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004744:	e00b      	b.n	800475e <HAL_TIM_PWM_Start+0xaa>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0xa2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004754:	e003      	b.n	800475e <HAL_TIM_PWM_Start+0xaa>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2201      	movs	r2, #1
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fda8 	bl	80052bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a23      	ldr	r2, [pc, #140]	@ (8004800 <HAL_TIM_PWM_Start+0x14c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d107      	bne.n	8004786 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004784:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1d      	ldr	r2, [pc, #116]	@ (8004800 <HAL_TIM_PWM_Start+0x14c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d018      	beq.n	80047c2 <HAL_TIM_PWM_Start+0x10e>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004798:	d013      	beq.n	80047c2 <HAL_TIM_PWM_Start+0x10e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a19      	ldr	r2, [pc, #100]	@ (8004804 <HAL_TIM_PWM_Start+0x150>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00e      	beq.n	80047c2 <HAL_TIM_PWM_Start+0x10e>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a17      	ldr	r2, [pc, #92]	@ (8004808 <HAL_TIM_PWM_Start+0x154>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_TIM_PWM_Start+0x10e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a16      	ldr	r2, [pc, #88]	@ (800480c <HAL_TIM_PWM_Start+0x158>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_TIM_PWM_Start+0x10e>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a14      	ldr	r2, [pc, #80]	@ (8004810 <HAL_TIM_PWM_Start+0x15c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d111      	bne.n	80047e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b06      	cmp	r3, #6
 80047d2:	d010      	beq.n	80047f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e4:	e007      	b.n	80047f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f042 0201 	orr.w	r2, r2, #1
 80047f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40010000 	.word	0x40010000
 8004804:	40000400 	.word	0x40000400
 8004808:	40000800 	.word	0x40000800
 800480c:	40000c00 	.word	0x40000c00
 8004810:	40014000 	.word	0x40014000

08004814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d020      	beq.n	8004878 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d01b      	beq.n	8004878 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f06f 0202 	mvn.w	r2, #2
 8004848:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	f003 0303 	and.w	r3, r3, #3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 fa5b 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 8004864:	e005      	b.n	8004872 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fa4d 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fa5e 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	f003 0304 	and.w	r3, r3, #4
 800487e:	2b00      	cmp	r3, #0
 8004880:	d020      	beq.n	80048c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01b      	beq.n	80048c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f06f 0204 	mvn.w	r2, #4
 8004894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2202      	movs	r2, #2
 800489a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 fa35 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 80048b0:	e005      	b.n	80048be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fa27 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 fa38 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d020      	beq.n	8004910 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01b      	beq.n	8004910 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f06f 0208 	mvn.w	r2, #8
 80048e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2204      	movs	r2, #4
 80048e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 0303 	and.w	r3, r3, #3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 fa0f 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 80048fc:	e005      	b.n	800490a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa01 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 fa12 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f003 0310 	and.w	r3, r3, #16
 8004916:	2b00      	cmp	r3, #0
 8004918:	d020      	beq.n	800495c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f003 0310 	and.w	r3, r3, #16
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01b      	beq.n	800495c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f06f 0210 	mvn.w	r2, #16
 800492c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2208      	movs	r2, #8
 8004932:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	69db      	ldr	r3, [r3, #28]
 800493a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f9e9 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 8004948:	e005      	b.n	8004956 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f9db 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f9ec 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0201 	mvn.w	r2, #1
 8004978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7fc fd46 	bl	800140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00c      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800499c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 fd7c 	bl	800549c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00c      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f9bd 	bl	8004d42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00c      	beq.n	80049ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d007      	beq.n	80049ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0220 	mvn.w	r2, #32
 80049e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fd4e 	bl	8005488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049ec:	bf00      	nop
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a00:	2300      	movs	r3, #0
 8004a02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e0ae      	b.n	8004b70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	f200 809f 	bhi.w	8004b60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a22:	a201      	add	r2, pc, #4	@ (adr r2, 8004a28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a28:	08004a5d 	.word	0x08004a5d
 8004a2c:	08004b61 	.word	0x08004b61
 8004a30:	08004b61 	.word	0x08004b61
 8004a34:	08004b61 	.word	0x08004b61
 8004a38:	08004a9d 	.word	0x08004a9d
 8004a3c:	08004b61 	.word	0x08004b61
 8004a40:	08004b61 	.word	0x08004b61
 8004a44:	08004b61 	.word	0x08004b61
 8004a48:	08004adf 	.word	0x08004adf
 8004a4c:	08004b61 	.word	0x08004b61
 8004a50:	08004b61 	.word	0x08004b61
 8004a54:	08004b61 	.word	0x08004b61
 8004a58:	08004b1f 	.word	0x08004b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68b9      	ldr	r1, [r7, #8]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fa04 	bl	8004e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0208 	orr.w	r2, r2, #8
 8004a76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0204 	bic.w	r2, r2, #4
 8004a86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	6999      	ldr	r1, [r3, #24]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	691a      	ldr	r2, [r3, #16]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	619a      	str	r2, [r3, #24]
      break;
 8004a9a:	e064      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fa4a 	bl	8004f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ab6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ac6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6999      	ldr	r1, [r3, #24]
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	021a      	lsls	r2, r3, #8
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	619a      	str	r2, [r3, #24]
      break;
 8004adc:	e043      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68b9      	ldr	r1, [r7, #8]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fa95 	bl	8005014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0208 	orr.w	r2, r2, #8
 8004af8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0204 	bic.w	r2, r2, #4
 8004b08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69d9      	ldr	r1, [r3, #28]
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	61da      	str	r2, [r3, #28]
      break;
 8004b1c:	e023      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68b9      	ldr	r1, [r7, #8]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fadf 	bl	80050e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69d9      	ldr	r1, [r3, #28]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	021a      	lsls	r2, r3, #8
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	430a      	orrs	r2, r1
 8004b5c:	61da      	str	r2, [r3, #28]
      break;
 8004b5e:	e002      	b.n	8004b66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	75fb      	strb	r3, [r7, #23]
      break;
 8004b64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d101      	bne.n	8004b94 <HAL_TIM_ConfigClockSource+0x1c>
 8004b90:	2302      	movs	r3, #2
 8004b92:	e0b4      	b.n	8004cfe <HAL_TIM_ConfigClockSource+0x186>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2202      	movs	r2, #2
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bcc:	d03e      	beq.n	8004c4c <HAL_TIM_ConfigClockSource+0xd4>
 8004bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bd2:	f200 8087 	bhi.w	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bda:	f000 8086 	beq.w	8004cea <HAL_TIM_ConfigClockSource+0x172>
 8004bde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004be2:	d87f      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b70      	cmp	r3, #112	@ 0x70
 8004be6:	d01a      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0xa6>
 8004be8:	2b70      	cmp	r3, #112	@ 0x70
 8004bea:	d87b      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bec:	2b60      	cmp	r3, #96	@ 0x60
 8004bee:	d050      	beq.n	8004c92 <HAL_TIM_ConfigClockSource+0x11a>
 8004bf0:	2b60      	cmp	r3, #96	@ 0x60
 8004bf2:	d877      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf4:	2b50      	cmp	r3, #80	@ 0x50
 8004bf6:	d03c      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0xfa>
 8004bf8:	2b50      	cmp	r3, #80	@ 0x50
 8004bfa:	d873      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d058      	beq.n	8004cb2 <HAL_TIM_ConfigClockSource+0x13a>
 8004c00:	2b40      	cmp	r3, #64	@ 0x40
 8004c02:	d86f      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c04:	2b30      	cmp	r3, #48	@ 0x30
 8004c06:	d064      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c08:	2b30      	cmp	r3, #48	@ 0x30
 8004c0a:	d86b      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d060      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d867      	bhi.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d05c      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d05a      	beq.n	8004cd2 <HAL_TIM_ConfigClockSource+0x15a>
 8004c1c:	e062      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c2e:	f000 fb25 	bl	800527c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	609a      	str	r2, [r3, #8]
      break;
 8004c4a:	e04f      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c5c:	f000 fb0e 	bl	800527c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689a      	ldr	r2, [r3, #8]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c6e:	609a      	str	r2, [r3, #8]
      break;
 8004c70:	e03c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7e:	461a      	mov	r2, r3
 8004c80:	f000 fa82 	bl	8005188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2150      	movs	r1, #80	@ 0x50
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fadb 	bl	8005246 <TIM_ITRx_SetConfig>
      break;
 8004c90:	e02c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f000 faa1 	bl	80051e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2160      	movs	r1, #96	@ 0x60
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 facb 	bl	8005246 <TIM_ITRx_SetConfig>
      break;
 8004cb0:	e01c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f000 fa62 	bl	8005188 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2140      	movs	r1, #64	@ 0x40
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fabb 	bl	8005246 <TIM_ITRx_SetConfig>
      break;
 8004cd0:	e00c      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4610      	mov	r0, r2
 8004cde:	f000 fab2 	bl	8005246 <TIM_ITRx_SetConfig>
      break;
 8004ce2:	e003      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce8:	e000      	b.n	8004cec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a3a      	ldr	r2, [pc, #232]	@ (8004e54 <TIM_Base_SetConfig+0xfc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d00f      	beq.n	8004d90 <TIM_Base_SetConfig+0x38>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d76:	d00b      	beq.n	8004d90 <TIM_Base_SetConfig+0x38>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a37      	ldr	r2, [pc, #220]	@ (8004e58 <TIM_Base_SetConfig+0x100>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d007      	beq.n	8004d90 <TIM_Base_SetConfig+0x38>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a36      	ldr	r2, [pc, #216]	@ (8004e5c <TIM_Base_SetConfig+0x104>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d003      	beq.n	8004d90 <TIM_Base_SetConfig+0x38>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a35      	ldr	r2, [pc, #212]	@ (8004e60 <TIM_Base_SetConfig+0x108>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d108      	bne.n	8004da2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e54 <TIM_Base_SetConfig+0xfc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d01b      	beq.n	8004de2 <TIM_Base_SetConfig+0x8a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db0:	d017      	beq.n	8004de2 <TIM_Base_SetConfig+0x8a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a28      	ldr	r2, [pc, #160]	@ (8004e58 <TIM_Base_SetConfig+0x100>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <TIM_Base_SetConfig+0x8a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a27      	ldr	r2, [pc, #156]	@ (8004e5c <TIM_Base_SetConfig+0x104>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00f      	beq.n	8004de2 <TIM_Base_SetConfig+0x8a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a26      	ldr	r2, [pc, #152]	@ (8004e60 <TIM_Base_SetConfig+0x108>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d00b      	beq.n	8004de2 <TIM_Base_SetConfig+0x8a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a25      	ldr	r2, [pc, #148]	@ (8004e64 <TIM_Base_SetConfig+0x10c>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d007      	beq.n	8004de2 <TIM_Base_SetConfig+0x8a>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a24      	ldr	r2, [pc, #144]	@ (8004e68 <TIM_Base_SetConfig+0x110>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d003      	beq.n	8004de2 <TIM_Base_SetConfig+0x8a>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a23      	ldr	r2, [pc, #140]	@ (8004e6c <TIM_Base_SetConfig+0x114>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d108      	bne.n	8004df4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004de8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e54 <TIM_Base_SetConfig+0xfc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d103      	bne.n	8004e28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	691a      	ldr	r2, [r3, #16]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d105      	bne.n	8004e46 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	f023 0201 	bic.w	r2, r3, #1
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	611a      	str	r2, [r3, #16]
  }
}
 8004e46:	bf00      	nop
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	40010000 	.word	0x40010000
 8004e58:	40000400 	.word	0x40000400
 8004e5c:	40000800 	.word	0x40000800
 8004e60:	40000c00 	.word	0x40000c00
 8004e64:	40014000 	.word	0x40014000
 8004e68:	40014400 	.word	0x40014400
 8004e6c:	40014800 	.word	0x40014800

08004e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a1b      	ldr	r3, [r3, #32]
 8004e84:	f023 0201 	bic.w	r2, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f023 0303 	bic.w	r3, r3, #3
 8004ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f023 0302 	bic.w	r3, r3, #2
 8004eb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8004f38 <TIM_OC1_SetConfig+0xc8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d10c      	bne.n	8004ee6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	f023 0308 	bic.w	r3, r3, #8
 8004ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f023 0304 	bic.w	r3, r3, #4
 8004ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a13      	ldr	r2, [pc, #76]	@ (8004f38 <TIM_OC1_SetConfig+0xc8>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d111      	bne.n	8004f12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	693a      	ldr	r2, [r7, #16]
 8004f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	621a      	str	r2, [r3, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	371c      	adds	r7, #28
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	40010000 	.word	0x40010000

08004f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f023 0210 	bic.w	r2, r3, #16
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	021b      	lsls	r3, r3, #8
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	f023 0320 	bic.w	r3, r3, #32
 8004f86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	011b      	lsls	r3, r3, #4
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a1e      	ldr	r2, [pc, #120]	@ (8005010 <TIM_OC2_SetConfig+0xd4>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d10d      	bne.n	8004fb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a15      	ldr	r2, [pc, #84]	@ (8005010 <TIM_OC2_SetConfig+0xd4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d113      	bne.n	8004fe8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40010000 	.word	0x40010000

08005014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0303 	bic.w	r3, r3, #3
 800504a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	4313      	orrs	r3, r2
 8005054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800505c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1d      	ldr	r2, [pc, #116]	@ (80050e4 <TIM_OC3_SetConfig+0xd0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d10d      	bne.n	800508e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005078:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4313      	orrs	r3, r2
 8005084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800508c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a14      	ldr	r2, [pc, #80]	@ (80050e4 <TIM_OC3_SetConfig+0xd0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d113      	bne.n	80050be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800509c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	621a      	str	r2, [r3, #32]
}
 80050d8:	bf00      	nop
 80050da:	371c      	adds	r7, #28
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	40010000 	.word	0x40010000

080050e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a1b      	ldr	r3, [r3, #32]
 80050fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800511e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	031b      	lsls	r3, r3, #12
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a10      	ldr	r2, [pc, #64]	@ (8005184 <TIM_OC4_SetConfig+0x9c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d109      	bne.n	800515c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800514e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	621a      	str	r2, [r3, #32]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40010000 	.word	0x40010000

08005188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f023 0201 	bic.w	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f023 030a 	bic.w	r3, r3, #10
 80051c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr

080051e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051e6:	b480      	push	{r7}
 80051e8:	b087      	sub	sp, #28
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
 80051fc:	f023 0210 	bic.w	r2, r3, #16
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005210:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	031b      	lsls	r3, r3, #12
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005222:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4313      	orrs	r3, r2
 800522c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	697a      	ldr	r2, [r7, #20]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr

08005246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800525c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	f043 0307 	orr.w	r3, r3, #7
 8005268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	609a      	str	r2, [r3, #8]
}
 8005270:	bf00      	nop
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
 8005288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	021a      	lsls	r2, r3, #8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	431a      	orrs	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	609a      	str	r2, [r3, #8]
}
 80052b0:	bf00      	nop
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 031f 	and.w	r3, r3, #31
 80052ce:	2201      	movs	r2, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	43db      	mvns	r3, r3
 80052de:	401a      	ands	r2, r3
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a1a      	ldr	r2, [r3, #32]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	6879      	ldr	r1, [r7, #4]
 80052f0:	fa01 f303 	lsl.w	r3, r1, r3
 80052f4:	431a      	orrs	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	621a      	str	r2, [r3, #32]
}
 80052fa:	bf00      	nop
 80052fc:	371c      	adds	r7, #28
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr
	...

08005308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005318:	2b01      	cmp	r3, #1
 800531a:	d101      	bne.n	8005320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800531c:	2302      	movs	r3, #2
 800531e:	e050      	b.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005346:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	4313      	orrs	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1c      	ldr	r2, [pc, #112]	@ (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d018      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800536c:	d013      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a18      	ldr	r2, [pc, #96]	@ (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a16      	ldr	r2, [pc, #88]	@ (80053d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d009      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a15      	ldr	r2, [pc, #84]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a13      	ldr	r2, [pc, #76]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10c      	bne.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800539c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40014000 	.word	0x40014000

080053e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d101      	bne.n	8005400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053fc:	2302      	movs	r3, #2
 80053fe:	e03d      	b.n	800547c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4313      	orrs	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e042      	b.n	8005548 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fc fa3c 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2224      	movs	r2, #36	@ 0x24
 80054e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fdbd 	bl	8006074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695a      	ldr	r2, [r3, #20]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2220      	movs	r2, #32
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	@ 0x28
 8005554:	af02      	add	r7, sp, #8
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	603b      	str	r3, [r7, #0]
 800555c:	4613      	mov	r3, r2
 800555e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b20      	cmp	r3, #32
 800556e:	d175      	bne.n	800565c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_UART_Transmit+0x2c>
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e06e      	b.n	800565e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2221      	movs	r2, #33	@ 0x21
 800558a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800558e:	f7fc fc23 	bl	8001dd8 <HAL_GetTick>
 8005592:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	88fa      	ldrh	r2, [r7, #6]
 8005598:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	88fa      	ldrh	r2, [r7, #6]
 800559e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055a8:	d108      	bne.n	80055bc <HAL_UART_Transmit+0x6c>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d104      	bne.n	80055bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	61bb      	str	r3, [r7, #24]
 80055ba:	e003      	b.n	80055c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055c0:	2300      	movs	r3, #0
 80055c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055c4:	e02e      	b.n	8005624 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2200      	movs	r2, #0
 80055ce:	2180      	movs	r1, #128	@ 0x80
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f000 fb1f 	bl	8005c14 <UART_WaitOnFlagUntilTimeout>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d005      	beq.n	80055e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e03a      	b.n	800565e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10b      	bne.n	8005606 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	881b      	ldrh	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	3302      	adds	r3, #2
 8005602:	61bb      	str	r3, [r7, #24]
 8005604:	e007      	b.n	8005616 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	781a      	ldrb	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	3301      	adds	r3, #1
 8005614:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005628:	b29b      	uxth	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1cb      	bne.n	80055c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2200      	movs	r2, #0
 8005636:	2140      	movs	r1, #64	@ 0x40
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 faeb 	bl	8005c14 <UART_WaitOnFlagUntilTimeout>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d005      	beq.n	8005650 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800564c:	2303      	movs	r3, #3
 800564e:	e006      	b.n	800565e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2220      	movs	r2, #32
 8005654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005658:	2300      	movs	r3, #0
 800565a:	e000      	b.n	800565e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800565c:	2302      	movs	r3, #2
  }
}
 800565e:	4618      	mov	r0, r3
 8005660:	3720      	adds	r7, #32
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b084      	sub	sp, #16
 800566a:	af00      	add	r7, sp, #0
 800566c:	60f8      	str	r0, [r7, #12]
 800566e:	60b9      	str	r1, [r7, #8]
 8005670:	4613      	mov	r3, r2
 8005672:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b20      	cmp	r3, #32
 800567e:	d112      	bne.n	80056a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <HAL_UART_Receive_IT+0x26>
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e00b      	b.n	80056a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	461a      	mov	r2, r3
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	68f8      	ldr	r0, [r7, #12]
 800569e:	f000 fb12 	bl	8005cc6 <UART_Start_Receive_IT>
 80056a2:	4603      	mov	r3, r0
 80056a4:	e000      	b.n	80056a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056a6:	2302      	movs	r3, #2
  }
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b0ba      	sub	sp, #232	@ 0xe8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80056dc:	2300      	movs	r3, #0
 80056de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056e6:	f003 030f 	and.w	r3, r3, #15
 80056ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10f      	bne.n	8005716 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d009      	beq.n	8005716 <HAL_UART_IRQHandler+0x66>
 8005702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005706:	f003 0320 	and.w	r3, r3, #32
 800570a:	2b00      	cmp	r3, #0
 800570c:	d003      	beq.n	8005716 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fbf2 	bl	8005ef8 <UART_Receive_IT>
      return;
 8005714:	e25b      	b.n	8005bce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 80de 	beq.w	80058dc <HAL_UART_IRQHandler+0x22c>
 8005720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800572c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005730:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 80d1 	beq.w	80058dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00b      	beq.n	800575e <HAL_UART_IRQHandler+0xae>
 8005746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800574a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574e:	2b00      	cmp	r3, #0
 8005750:	d005      	beq.n	800575e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005756:	f043 0201 	orr.w	r2, r3, #1
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800575e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <HAL_UART_IRQHandler+0xd2>
 800576a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d005      	beq.n	8005782 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800577a:	f043 0202 	orr.w	r2, r3, #2
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00b      	beq.n	80057a6 <HAL_UART_IRQHandler+0xf6>
 800578e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005792:	f003 0301 	and.w	r3, r3, #1
 8005796:	2b00      	cmp	r3, #0
 8005798:	d005      	beq.n	80057a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	f043 0204 	orr.w	r2, r3, #4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d011      	beq.n	80057d6 <HAL_UART_IRQHandler+0x126>
 80057b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057b6:	f003 0320 	and.w	r3, r3, #32
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d105      	bne.n	80057ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d005      	beq.n	80057d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ce:	f043 0208 	orr.w	r2, r3, #8
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 81f2 	beq.w	8005bc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d008      	beq.n	80057fe <HAL_UART_IRQHandler+0x14e>
 80057ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 fb7d 	bl	8005ef8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005808:	2b40      	cmp	r3, #64	@ 0x40
 800580a:	bf0c      	ite	eq
 800580c:	2301      	moveq	r3, #1
 800580e:	2300      	movne	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d103      	bne.n	800582a <HAL_UART_IRQHandler+0x17a>
 8005822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005826:	2b00      	cmp	r3, #0
 8005828:	d04f      	beq.n	80058ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fa85 	bl	8005d3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583a:	2b40      	cmp	r3, #64	@ 0x40
 800583c:	d141      	bne.n	80058c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3314      	adds	r3, #20
 8005844:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005854:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800585c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3314      	adds	r3, #20
 8005866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800586a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800586e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800587a:	e841 2300 	strex	r3, r2, [r1]
 800587e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1d9      	bne.n	800583e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d013      	beq.n	80058ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005896:	4a7e      	ldr	r2, [pc, #504]	@ (8005a90 <HAL_UART_IRQHandler+0x3e0>)
 8005898:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fd f926 	bl	8002af0 <HAL_DMA_Abort_IT>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d016      	beq.n	80058d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058b4:	4610      	mov	r0, r2
 80058b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	e00e      	b.n	80058d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f994 	bl	8005be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c0:	e00a      	b.n	80058d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f990 	bl	8005be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058c8:	e006      	b.n	80058d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f98c 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80058d6:	e175      	b.n	8005bc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d8:	bf00      	nop
    return;
 80058da:	e173      	b.n	8005bc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	f040 814f 	bne.w	8005b84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ea:	f003 0310 	and.w	r3, r3, #16
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8148 	beq.w	8005b84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8141 	beq.w	8005b84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005902:	2300      	movs	r3, #0
 8005904:	60bb      	str	r3, [r7, #8]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005922:	2b40      	cmp	r3, #64	@ 0x40
 8005924:	f040 80b6 	bne.w	8005a94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005934:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8145 	beq.w	8005bc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005946:	429a      	cmp	r2, r3
 8005948:	f080 813e 	bcs.w	8005bc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005952:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800595e:	f000 8088 	beq.w	8005a72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	330c      	adds	r3, #12
 8005968:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005978:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800597c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800598e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800599a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80059a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1d9      	bne.n	8005962 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3314      	adds	r3, #20
 80059b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80059be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80059c0:	f023 0301 	bic.w	r3, r3, #1
 80059c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3314      	adds	r3, #20
 80059ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e1      	bne.n	80059ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3314      	adds	r3, #20
 80059f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059f4:	e853 3f00 	ldrex	r3, [r3]
 80059f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005a0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005a10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005a14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005a16:	e841 2300 	strex	r3, r2, [r1]
 8005a1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005a1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1e3      	bne.n	80059ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2220      	movs	r2, #32
 8005a26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	330c      	adds	r3, #12
 8005a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a3a:	e853 3f00 	ldrex	r3, [r3]
 8005a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a42:	f023 0310 	bic.w	r3, r3, #16
 8005a46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	330c      	adds	r3, #12
 8005a50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a54:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a56:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a58:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a5c:	e841 2300 	strex	r3, r2, [r1]
 8005a60:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1e3      	bne.n	8005a30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fc ffcf 	bl	8002a10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f8b7 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a8e:	e09b      	b.n	8005bc8 <HAL_UART_IRQHandler+0x518>
 8005a90:	08005e01 	.word	0x08005e01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f000 808e 	beq.w	8005bcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 8089 	beq.w	8005bcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	330c      	adds	r3, #12
 8005ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac4:	e853 3f00 	ldrex	r3, [r3]
 8005ac8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	330c      	adds	r3, #12
 8005ada:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ade:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ae0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ae4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e3      	bne.n	8005aba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3314      	adds	r3, #20
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	623b      	str	r3, [r7, #32]
   return(result);
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3314      	adds	r3, #20
 8005b12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b16:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e3      	bne.n	8005af2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	330c      	adds	r3, #12
 8005b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	e853 3f00 	ldrex	r3, [r3]
 8005b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0310 	bic.w	r3, r3, #16
 8005b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	330c      	adds	r3, #12
 8005b58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b5c:	61fa      	str	r2, [r7, #28]
 8005b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	69b9      	ldr	r1, [r7, #24]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	617b      	str	r3, [r7, #20]
   return(result);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e3      	bne.n	8005b38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2202      	movs	r2, #2
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f83d 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b82:	e023      	b.n	8005bcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d009      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x4f4>
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f943 	bl	8005e28 <UART_Transmit_IT>
    return;
 8005ba2:	e014      	b.n	8005bce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00e      	beq.n	8005bce <HAL_UART_IRQHandler+0x51e>
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 f983 	bl	8005ec8 <UART_EndTransmit_IT>
    return;
 8005bc2:	e004      	b.n	8005bce <HAL_UART_IRQHandler+0x51e>
    return;
 8005bc4:	bf00      	nop
 8005bc6:	e002      	b.n	8005bce <HAL_UART_IRQHandler+0x51e>
      return;
 8005bc8:	bf00      	nop
 8005bca:	e000      	b.n	8005bce <HAL_UART_IRQHandler+0x51e>
      return;
 8005bcc:	bf00      	nop
  }
}
 8005bce:	37e8      	adds	r7, #232	@ 0xe8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c24:	e03b      	b.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c2c:	d037      	beq.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c2e:	f7fc f8d3 	bl	8001dd8 <HAL_GetTick>
 8005c32:	4602      	mov	r2, r0
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	6a3a      	ldr	r2, [r7, #32]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d302      	bcc.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d101      	bne.n	8005c48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e03a      	b.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d023      	beq.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b80      	cmp	r3, #128	@ 0x80
 8005c5a:	d020      	beq.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b40      	cmp	r3, #64	@ 0x40
 8005c60:	d01d      	beq.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f003 0308 	and.w	r3, r3, #8
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d116      	bne.n	8005c9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c70:	2300      	movs	r3, #0
 8005c72:	617b      	str	r3, [r7, #20]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	617b      	str	r3, [r7, #20]
 8005c84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f857 	bl	8005d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2208      	movs	r2, #8
 8005c90:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	e00f      	b.n	8005cbe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	bf0c      	ite	eq
 8005cae:	2301      	moveq	r3, #1
 8005cb0:	2300      	movne	r3, #0
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d0b4      	beq.n	8005c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3718      	adds	r7, #24
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b085      	sub	sp, #20
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	60f8      	str	r0, [r7, #12]
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	88fa      	ldrh	r2, [r7, #6]
 8005cde:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	88fa      	ldrh	r2, [r7, #6]
 8005ce4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2222      	movs	r2, #34	@ 0x22
 8005cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68da      	ldr	r2, [r3, #12]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d0a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695a      	ldr	r2, [r3, #20]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0220 	orr.w	r2, r2, #32
 8005d2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3714      	adds	r7, #20
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b095      	sub	sp, #84	@ 0x54
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	330c      	adds	r3, #12
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d58:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	330c      	adds	r3, #12
 8005d60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d62:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e5      	bne.n	8005d42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3314      	adds	r3, #20
 8005d7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7e:	6a3b      	ldr	r3, [r7, #32]
 8005d80:	e853 3f00 	ldrex	r3, [r3]
 8005d84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3314      	adds	r3, #20
 8005d94:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e5      	bne.n	8005d76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d119      	bne.n	8005de6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	330c      	adds	r3, #12
 8005db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f023 0310 	bic.w	r3, r3, #16
 8005dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	330c      	adds	r3, #12
 8005dd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dd2:	61ba      	str	r2, [r7, #24]
 8005dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6979      	ldr	r1, [r7, #20]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	613b      	str	r3, [r7, #16]
   return(result);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e5      	bne.n	8005db2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005df4:	bf00      	nop
 8005df6:	3754      	adds	r7, #84	@ 0x54
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff fee4 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b21      	cmp	r3, #33	@ 0x21
 8005e3a:	d13e      	bne.n	8005eba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e44:	d114      	bne.n	8005e70 <UART_Transmit_IT+0x48>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d110      	bne.n	8005e70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	1c9a      	adds	r2, r3, #2
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	621a      	str	r2, [r3, #32]
 8005e6e:	e008      	b.n	8005e82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	1c59      	adds	r1, r3, #1
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6211      	str	r1, [r2, #32]
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10f      	bne.n	8005eb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ea4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005eb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e000      	b.n	8005ebc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eba:	2302      	movs	r3, #2
  }
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ede:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f7ff fe73 	bl	8005bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08c      	sub	sp, #48	@ 0x30
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b22      	cmp	r3, #34	@ 0x22
 8005f0a:	f040 80ae 	bne.w	800606a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f16:	d117      	bne.n	8005f48 <UART_Receive_IT+0x50>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	691b      	ldr	r3, [r3, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d113      	bne.n	8005f48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f40:	1c9a      	adds	r2, r3, #2
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f46:	e026      	b.n	8005f96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f5a:	d007      	beq.n	8005f6c <UART_Receive_IT+0x74>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10a      	bne.n	8005f7a <UART_Receive_IT+0x82>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	e008      	b.n	8005f8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	3b01      	subs	r3, #1
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d15d      	bne.n	8006066 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68da      	ldr	r2, [r3, #12]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0220 	bic.w	r2, r2, #32
 8005fb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fc8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	695a      	ldr	r2, [r3, #20]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0201 	bic.w	r2, r2, #1
 8005fd8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2220      	movs	r2, #32
 8005fde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d135      	bne.n	800605c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	330c      	adds	r3, #12
 8005ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	e853 3f00 	ldrex	r3, [r3]
 8006004:	613b      	str	r3, [r7, #16]
   return(result);
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f023 0310 	bic.w	r3, r3, #16
 800600c:	627b      	str	r3, [r7, #36]	@ 0x24
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	330c      	adds	r3, #12
 8006014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006016:	623a      	str	r2, [r7, #32]
 8006018:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	69f9      	ldr	r1, [r7, #28]
 800601c:	6a3a      	ldr	r2, [r7, #32]
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	61bb      	str	r3, [r7, #24]
   return(result);
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e5      	bne.n	8005ff6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0310 	and.w	r3, r3, #16
 8006034:	2b10      	cmp	r3, #16
 8006036:	d10a      	bne.n	800604e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006038:	2300      	movs	r3, #0
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff fdd1 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
 800605a:	e002      	b.n	8006062 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7fb fa6b 	bl	8001538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	e002      	b.n	800606c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800606a:	2302      	movs	r3, #2
  }
}
 800606c:	4618      	mov	r0, r3
 800606e:	3730      	adds	r7, #48	@ 0x30
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006078:	b0c0      	sub	sp, #256	@ 0x100
 800607a:	af00      	add	r7, sp, #0
 800607c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	691b      	ldr	r3, [r3, #16]
 8006088:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800608c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006090:	68d9      	ldr	r1, [r3, #12]
 8006092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	ea40 0301 	orr.w	r3, r0, r1
 800609c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800609e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	431a      	orrs	r2, r3
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	431a      	orrs	r2, r3
 80060b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80060c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060cc:	f021 010c 	bic.w	r1, r1, #12
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060da:	430b      	orrs	r3, r1
 80060dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ee:	6999      	ldr	r1, [r3, #24]
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	ea40 0301 	orr.w	r3, r0, r1
 80060fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4b8f      	ldr	r3, [pc, #572]	@ (8006340 <UART_SetConfig+0x2cc>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d005      	beq.n	8006114 <UART_SetConfig+0xa0>
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	4b8d      	ldr	r3, [pc, #564]	@ (8006344 <UART_SetConfig+0x2d0>)
 8006110:	429a      	cmp	r2, r3
 8006112:	d104      	bne.n	800611e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006114:	f7fd fdb2 	bl	8003c7c <HAL_RCC_GetPCLK2Freq>
 8006118:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800611c:	e003      	b.n	8006126 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800611e:	f7fd fd99 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
 8006122:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006130:	f040 810c 	bne.w	800634c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006138:	2200      	movs	r2, #0
 800613a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800613e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006142:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006146:	4622      	mov	r2, r4
 8006148:	462b      	mov	r3, r5
 800614a:	1891      	adds	r1, r2, r2
 800614c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800614e:	415b      	adcs	r3, r3
 8006150:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006152:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006156:	4621      	mov	r1, r4
 8006158:	eb12 0801 	adds.w	r8, r2, r1
 800615c:	4629      	mov	r1, r5
 800615e:	eb43 0901 	adc.w	r9, r3, r1
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	f04f 0300 	mov.w	r3, #0
 800616a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800616e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006172:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006176:	4690      	mov	r8, r2
 8006178:	4699      	mov	r9, r3
 800617a:	4623      	mov	r3, r4
 800617c:	eb18 0303 	adds.w	r3, r8, r3
 8006180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006184:	462b      	mov	r3, r5
 8006186:	eb49 0303 	adc.w	r3, r9, r3
 800618a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800618e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800619a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800619e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80061a2:	460b      	mov	r3, r1
 80061a4:	18db      	adds	r3, r3, r3
 80061a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80061a8:	4613      	mov	r3, r2
 80061aa:	eb42 0303 	adc.w	r3, r2, r3
 80061ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80061b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80061b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80061b8:	f7fa f87a 	bl	80002b0 <__aeabi_uldivmod>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4b61      	ldr	r3, [pc, #388]	@ (8006348 <UART_SetConfig+0x2d4>)
 80061c2:	fba3 2302 	umull	r2, r3, r3, r2
 80061c6:	095b      	lsrs	r3, r3, #5
 80061c8:	011c      	lsls	r4, r3, #4
 80061ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ce:	2200      	movs	r2, #0
 80061d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061dc:	4642      	mov	r2, r8
 80061de:	464b      	mov	r3, r9
 80061e0:	1891      	adds	r1, r2, r2
 80061e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061e4:	415b      	adcs	r3, r3
 80061e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061ec:	4641      	mov	r1, r8
 80061ee:	eb12 0a01 	adds.w	sl, r2, r1
 80061f2:	4649      	mov	r1, r9
 80061f4:	eb43 0b01 	adc.w	fp, r3, r1
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006204:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006208:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800620c:	4692      	mov	sl, r2
 800620e:	469b      	mov	fp, r3
 8006210:	4643      	mov	r3, r8
 8006212:	eb1a 0303 	adds.w	r3, sl, r3
 8006216:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800621a:	464b      	mov	r3, r9
 800621c:	eb4b 0303 	adc.w	r3, fp, r3
 8006220:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006230:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006234:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006238:	460b      	mov	r3, r1
 800623a:	18db      	adds	r3, r3, r3
 800623c:	643b      	str	r3, [r7, #64]	@ 0x40
 800623e:	4613      	mov	r3, r2
 8006240:	eb42 0303 	adc.w	r3, r2, r3
 8006244:	647b      	str	r3, [r7, #68]	@ 0x44
 8006246:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800624a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800624e:	f7fa f82f 	bl	80002b0 <__aeabi_uldivmod>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4611      	mov	r1, r2
 8006258:	4b3b      	ldr	r3, [pc, #236]	@ (8006348 <UART_SetConfig+0x2d4>)
 800625a:	fba3 2301 	umull	r2, r3, r3, r1
 800625e:	095b      	lsrs	r3, r3, #5
 8006260:	2264      	movs	r2, #100	@ 0x64
 8006262:	fb02 f303 	mul.w	r3, r2, r3
 8006266:	1acb      	subs	r3, r1, r3
 8006268:	00db      	lsls	r3, r3, #3
 800626a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800626e:	4b36      	ldr	r3, [pc, #216]	@ (8006348 <UART_SetConfig+0x2d4>)
 8006270:	fba3 2302 	umull	r2, r3, r3, r2
 8006274:	095b      	lsrs	r3, r3, #5
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800627c:	441c      	add	r4, r3
 800627e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006282:	2200      	movs	r2, #0
 8006284:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006288:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800628c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006290:	4642      	mov	r2, r8
 8006292:	464b      	mov	r3, r9
 8006294:	1891      	adds	r1, r2, r2
 8006296:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006298:	415b      	adcs	r3, r3
 800629a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800629c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80062a0:	4641      	mov	r1, r8
 80062a2:	1851      	adds	r1, r2, r1
 80062a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80062a6:	4649      	mov	r1, r9
 80062a8:	414b      	adcs	r3, r1
 80062aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ac:	f04f 0200 	mov.w	r2, #0
 80062b0:	f04f 0300 	mov.w	r3, #0
 80062b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80062b8:	4659      	mov	r1, fp
 80062ba:	00cb      	lsls	r3, r1, #3
 80062bc:	4651      	mov	r1, sl
 80062be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062c2:	4651      	mov	r1, sl
 80062c4:	00ca      	lsls	r2, r1, #3
 80062c6:	4610      	mov	r0, r2
 80062c8:	4619      	mov	r1, r3
 80062ca:	4603      	mov	r3, r0
 80062cc:	4642      	mov	r2, r8
 80062ce:	189b      	adds	r3, r3, r2
 80062d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062d4:	464b      	mov	r3, r9
 80062d6:	460a      	mov	r2, r1
 80062d8:	eb42 0303 	adc.w	r3, r2, r3
 80062dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062f4:	460b      	mov	r3, r1
 80062f6:	18db      	adds	r3, r3, r3
 80062f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062fa:	4613      	mov	r3, r2
 80062fc:	eb42 0303 	adc.w	r3, r2, r3
 8006300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006302:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006306:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800630a:	f7f9 ffd1 	bl	80002b0 <__aeabi_uldivmod>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4b0d      	ldr	r3, [pc, #52]	@ (8006348 <UART_SetConfig+0x2d4>)
 8006314:	fba3 1302 	umull	r1, r3, r3, r2
 8006318:	095b      	lsrs	r3, r3, #5
 800631a:	2164      	movs	r1, #100	@ 0x64
 800631c:	fb01 f303 	mul.w	r3, r1, r3
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	3332      	adds	r3, #50	@ 0x32
 8006326:	4a08      	ldr	r2, [pc, #32]	@ (8006348 <UART_SetConfig+0x2d4>)
 8006328:	fba2 2303 	umull	r2, r3, r2, r3
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	f003 0207 	and.w	r2, r3, #7
 8006332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4422      	add	r2, r4
 800633a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800633c:	e106      	b.n	800654c <UART_SetConfig+0x4d8>
 800633e:	bf00      	nop
 8006340:	40011000 	.word	0x40011000
 8006344:	40011400 	.word	0x40011400
 8006348:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800634c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006350:	2200      	movs	r2, #0
 8006352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006356:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800635a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800635e:	4642      	mov	r2, r8
 8006360:	464b      	mov	r3, r9
 8006362:	1891      	adds	r1, r2, r2
 8006364:	6239      	str	r1, [r7, #32]
 8006366:	415b      	adcs	r3, r3
 8006368:	627b      	str	r3, [r7, #36]	@ 0x24
 800636a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800636e:	4641      	mov	r1, r8
 8006370:	1854      	adds	r4, r2, r1
 8006372:	4649      	mov	r1, r9
 8006374:	eb43 0501 	adc.w	r5, r3, r1
 8006378:	f04f 0200 	mov.w	r2, #0
 800637c:	f04f 0300 	mov.w	r3, #0
 8006380:	00eb      	lsls	r3, r5, #3
 8006382:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006386:	00e2      	lsls	r2, r4, #3
 8006388:	4614      	mov	r4, r2
 800638a:	461d      	mov	r5, r3
 800638c:	4643      	mov	r3, r8
 800638e:	18e3      	adds	r3, r4, r3
 8006390:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006394:	464b      	mov	r3, r9
 8006396:	eb45 0303 	adc.w	r3, r5, r3
 800639a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800639e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80063ba:	4629      	mov	r1, r5
 80063bc:	008b      	lsls	r3, r1, #2
 80063be:	4621      	mov	r1, r4
 80063c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063c4:	4621      	mov	r1, r4
 80063c6:	008a      	lsls	r2, r1, #2
 80063c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063cc:	f7f9 ff70 	bl	80002b0 <__aeabi_uldivmod>
 80063d0:	4602      	mov	r2, r0
 80063d2:	460b      	mov	r3, r1
 80063d4:	4b60      	ldr	r3, [pc, #384]	@ (8006558 <UART_SetConfig+0x4e4>)
 80063d6:	fba3 2302 	umull	r2, r3, r3, r2
 80063da:	095b      	lsrs	r3, r3, #5
 80063dc:	011c      	lsls	r4, r3, #4
 80063de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063f0:	4642      	mov	r2, r8
 80063f2:	464b      	mov	r3, r9
 80063f4:	1891      	adds	r1, r2, r2
 80063f6:	61b9      	str	r1, [r7, #24]
 80063f8:	415b      	adcs	r3, r3
 80063fa:	61fb      	str	r3, [r7, #28]
 80063fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006400:	4641      	mov	r1, r8
 8006402:	1851      	adds	r1, r2, r1
 8006404:	6139      	str	r1, [r7, #16]
 8006406:	4649      	mov	r1, r9
 8006408:	414b      	adcs	r3, r1
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	f04f 0200 	mov.w	r2, #0
 8006410:	f04f 0300 	mov.w	r3, #0
 8006414:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006418:	4659      	mov	r1, fp
 800641a:	00cb      	lsls	r3, r1, #3
 800641c:	4651      	mov	r1, sl
 800641e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006422:	4651      	mov	r1, sl
 8006424:	00ca      	lsls	r2, r1, #3
 8006426:	4610      	mov	r0, r2
 8006428:	4619      	mov	r1, r3
 800642a:	4603      	mov	r3, r0
 800642c:	4642      	mov	r2, r8
 800642e:	189b      	adds	r3, r3, r2
 8006430:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006434:	464b      	mov	r3, r9
 8006436:	460a      	mov	r2, r1
 8006438:	eb42 0303 	adc.w	r3, r2, r3
 800643c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	67bb      	str	r3, [r7, #120]	@ 0x78
 800644a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006458:	4649      	mov	r1, r9
 800645a:	008b      	lsls	r3, r1, #2
 800645c:	4641      	mov	r1, r8
 800645e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006462:	4641      	mov	r1, r8
 8006464:	008a      	lsls	r2, r1, #2
 8006466:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800646a:	f7f9 ff21 	bl	80002b0 <__aeabi_uldivmod>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4611      	mov	r1, r2
 8006474:	4b38      	ldr	r3, [pc, #224]	@ (8006558 <UART_SetConfig+0x4e4>)
 8006476:	fba3 2301 	umull	r2, r3, r3, r1
 800647a:	095b      	lsrs	r3, r3, #5
 800647c:	2264      	movs	r2, #100	@ 0x64
 800647e:	fb02 f303 	mul.w	r3, r2, r3
 8006482:	1acb      	subs	r3, r1, r3
 8006484:	011b      	lsls	r3, r3, #4
 8006486:	3332      	adds	r3, #50	@ 0x32
 8006488:	4a33      	ldr	r2, [pc, #204]	@ (8006558 <UART_SetConfig+0x4e4>)
 800648a:	fba2 2303 	umull	r2, r3, r2, r3
 800648e:	095b      	lsrs	r3, r3, #5
 8006490:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006494:	441c      	add	r4, r3
 8006496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800649a:	2200      	movs	r2, #0
 800649c:	673b      	str	r3, [r7, #112]	@ 0x70
 800649e:	677a      	str	r2, [r7, #116]	@ 0x74
 80064a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80064a4:	4642      	mov	r2, r8
 80064a6:	464b      	mov	r3, r9
 80064a8:	1891      	adds	r1, r2, r2
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	415b      	adcs	r3, r3
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064b4:	4641      	mov	r1, r8
 80064b6:	1851      	adds	r1, r2, r1
 80064b8:	6039      	str	r1, [r7, #0]
 80064ba:	4649      	mov	r1, r9
 80064bc:	414b      	adcs	r3, r1
 80064be:	607b      	str	r3, [r7, #4]
 80064c0:	f04f 0200 	mov.w	r2, #0
 80064c4:	f04f 0300 	mov.w	r3, #0
 80064c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064cc:	4659      	mov	r1, fp
 80064ce:	00cb      	lsls	r3, r1, #3
 80064d0:	4651      	mov	r1, sl
 80064d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064d6:	4651      	mov	r1, sl
 80064d8:	00ca      	lsls	r2, r1, #3
 80064da:	4610      	mov	r0, r2
 80064dc:	4619      	mov	r1, r3
 80064de:	4603      	mov	r3, r0
 80064e0:	4642      	mov	r2, r8
 80064e2:	189b      	adds	r3, r3, r2
 80064e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064e6:	464b      	mov	r3, r9
 80064e8:	460a      	mov	r2, r1
 80064ea:	eb42 0303 	adc.w	r3, r2, r3
 80064ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80064fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006508:	4649      	mov	r1, r9
 800650a:	008b      	lsls	r3, r1, #2
 800650c:	4641      	mov	r1, r8
 800650e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006512:	4641      	mov	r1, r8
 8006514:	008a      	lsls	r2, r1, #2
 8006516:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800651a:	f7f9 fec9 	bl	80002b0 <__aeabi_uldivmod>
 800651e:	4602      	mov	r2, r0
 8006520:	460b      	mov	r3, r1
 8006522:	4b0d      	ldr	r3, [pc, #52]	@ (8006558 <UART_SetConfig+0x4e4>)
 8006524:	fba3 1302 	umull	r1, r3, r3, r2
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	2164      	movs	r1, #100	@ 0x64
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	011b      	lsls	r3, r3, #4
 8006534:	3332      	adds	r3, #50	@ 0x32
 8006536:	4a08      	ldr	r2, [pc, #32]	@ (8006558 <UART_SetConfig+0x4e4>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	f003 020f 	and.w	r2, r3, #15
 8006542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4422      	add	r2, r4
 800654a:	609a      	str	r2, [r3, #8]
}
 800654c:	bf00      	nop
 800654e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006552:	46bd      	mov	sp, r7
 8006554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006558:	51eb851f 	.word	0x51eb851f

0800655c <std>:
 800655c:	2300      	movs	r3, #0
 800655e:	b510      	push	{r4, lr}
 8006560:	4604      	mov	r4, r0
 8006562:	e9c0 3300 	strd	r3, r3, [r0]
 8006566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800656a:	6083      	str	r3, [r0, #8]
 800656c:	8181      	strh	r1, [r0, #12]
 800656e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006570:	81c2      	strh	r2, [r0, #14]
 8006572:	6183      	str	r3, [r0, #24]
 8006574:	4619      	mov	r1, r3
 8006576:	2208      	movs	r2, #8
 8006578:	305c      	adds	r0, #92	@ 0x5c
 800657a:	f000 fa2d 	bl	80069d8 <memset>
 800657e:	4b0d      	ldr	r3, [pc, #52]	@ (80065b4 <std+0x58>)
 8006580:	6263      	str	r3, [r4, #36]	@ 0x24
 8006582:	4b0d      	ldr	r3, [pc, #52]	@ (80065b8 <std+0x5c>)
 8006584:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006586:	4b0d      	ldr	r3, [pc, #52]	@ (80065bc <std+0x60>)
 8006588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800658a:	4b0d      	ldr	r3, [pc, #52]	@ (80065c0 <std+0x64>)
 800658c:	6323      	str	r3, [r4, #48]	@ 0x30
 800658e:	4b0d      	ldr	r3, [pc, #52]	@ (80065c4 <std+0x68>)
 8006590:	6224      	str	r4, [r4, #32]
 8006592:	429c      	cmp	r4, r3
 8006594:	d006      	beq.n	80065a4 <std+0x48>
 8006596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800659a:	4294      	cmp	r4, r2
 800659c:	d002      	beq.n	80065a4 <std+0x48>
 800659e:	33d0      	adds	r3, #208	@ 0xd0
 80065a0:	429c      	cmp	r4, r3
 80065a2:	d105      	bne.n	80065b0 <std+0x54>
 80065a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065ac:	f000 bae8 	b.w	8006b80 <__retarget_lock_init_recursive>
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	bf00      	nop
 80065b4:	08006829 	.word	0x08006829
 80065b8:	0800684b 	.word	0x0800684b
 80065bc:	08006883 	.word	0x08006883
 80065c0:	080068a7 	.word	0x080068a7
 80065c4:	2000034c 	.word	0x2000034c

080065c8 <stdio_exit_handler>:
 80065c8:	4a02      	ldr	r2, [pc, #8]	@ (80065d4 <stdio_exit_handler+0xc>)
 80065ca:	4903      	ldr	r1, [pc, #12]	@ (80065d8 <stdio_exit_handler+0x10>)
 80065cc:	4803      	ldr	r0, [pc, #12]	@ (80065dc <stdio_exit_handler+0x14>)
 80065ce:	f000 b869 	b.w	80066a4 <_fwalk_sglue>
 80065d2:	bf00      	nop
 80065d4:	2000000c 	.word	0x2000000c
 80065d8:	0800772d 	.word	0x0800772d
 80065dc:	2000001c 	.word	0x2000001c

080065e0 <cleanup_stdio>:
 80065e0:	6841      	ldr	r1, [r0, #4]
 80065e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <cleanup_stdio+0x34>)
 80065e4:	4299      	cmp	r1, r3
 80065e6:	b510      	push	{r4, lr}
 80065e8:	4604      	mov	r4, r0
 80065ea:	d001      	beq.n	80065f0 <cleanup_stdio+0x10>
 80065ec:	f001 f89e 	bl	800772c <_fflush_r>
 80065f0:	68a1      	ldr	r1, [r4, #8]
 80065f2:	4b09      	ldr	r3, [pc, #36]	@ (8006618 <cleanup_stdio+0x38>)
 80065f4:	4299      	cmp	r1, r3
 80065f6:	d002      	beq.n	80065fe <cleanup_stdio+0x1e>
 80065f8:	4620      	mov	r0, r4
 80065fa:	f001 f897 	bl	800772c <_fflush_r>
 80065fe:	68e1      	ldr	r1, [r4, #12]
 8006600:	4b06      	ldr	r3, [pc, #24]	@ (800661c <cleanup_stdio+0x3c>)
 8006602:	4299      	cmp	r1, r3
 8006604:	d004      	beq.n	8006610 <cleanup_stdio+0x30>
 8006606:	4620      	mov	r0, r4
 8006608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800660c:	f001 b88e 	b.w	800772c <_fflush_r>
 8006610:	bd10      	pop	{r4, pc}
 8006612:	bf00      	nop
 8006614:	2000034c 	.word	0x2000034c
 8006618:	200003b4 	.word	0x200003b4
 800661c:	2000041c 	.word	0x2000041c

08006620 <global_stdio_init.part.0>:
 8006620:	b510      	push	{r4, lr}
 8006622:	4b0b      	ldr	r3, [pc, #44]	@ (8006650 <global_stdio_init.part.0+0x30>)
 8006624:	4c0b      	ldr	r4, [pc, #44]	@ (8006654 <global_stdio_init.part.0+0x34>)
 8006626:	4a0c      	ldr	r2, [pc, #48]	@ (8006658 <global_stdio_init.part.0+0x38>)
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	4620      	mov	r0, r4
 800662c:	2200      	movs	r2, #0
 800662e:	2104      	movs	r1, #4
 8006630:	f7ff ff94 	bl	800655c <std>
 8006634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006638:	2201      	movs	r2, #1
 800663a:	2109      	movs	r1, #9
 800663c:	f7ff ff8e 	bl	800655c <std>
 8006640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006644:	2202      	movs	r2, #2
 8006646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800664a:	2112      	movs	r1, #18
 800664c:	f7ff bf86 	b.w	800655c <std>
 8006650:	20000484 	.word	0x20000484
 8006654:	2000034c 	.word	0x2000034c
 8006658:	080065c9 	.word	0x080065c9

0800665c <__sfp_lock_acquire>:
 800665c:	4801      	ldr	r0, [pc, #4]	@ (8006664 <__sfp_lock_acquire+0x8>)
 800665e:	f000 ba90 	b.w	8006b82 <__retarget_lock_acquire_recursive>
 8006662:	bf00      	nop
 8006664:	2000048d 	.word	0x2000048d

08006668 <__sfp_lock_release>:
 8006668:	4801      	ldr	r0, [pc, #4]	@ (8006670 <__sfp_lock_release+0x8>)
 800666a:	f000 ba8b 	b.w	8006b84 <__retarget_lock_release_recursive>
 800666e:	bf00      	nop
 8006670:	2000048d 	.word	0x2000048d

08006674 <__sinit>:
 8006674:	b510      	push	{r4, lr}
 8006676:	4604      	mov	r4, r0
 8006678:	f7ff fff0 	bl	800665c <__sfp_lock_acquire>
 800667c:	6a23      	ldr	r3, [r4, #32]
 800667e:	b11b      	cbz	r3, 8006688 <__sinit+0x14>
 8006680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006684:	f7ff bff0 	b.w	8006668 <__sfp_lock_release>
 8006688:	4b04      	ldr	r3, [pc, #16]	@ (800669c <__sinit+0x28>)
 800668a:	6223      	str	r3, [r4, #32]
 800668c:	4b04      	ldr	r3, [pc, #16]	@ (80066a0 <__sinit+0x2c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1f5      	bne.n	8006680 <__sinit+0xc>
 8006694:	f7ff ffc4 	bl	8006620 <global_stdio_init.part.0>
 8006698:	e7f2      	b.n	8006680 <__sinit+0xc>
 800669a:	bf00      	nop
 800669c:	080065e1 	.word	0x080065e1
 80066a0:	20000484 	.word	0x20000484

080066a4 <_fwalk_sglue>:
 80066a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a8:	4607      	mov	r7, r0
 80066aa:	4688      	mov	r8, r1
 80066ac:	4614      	mov	r4, r2
 80066ae:	2600      	movs	r6, #0
 80066b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066b4:	f1b9 0901 	subs.w	r9, r9, #1
 80066b8:	d505      	bpl.n	80066c6 <_fwalk_sglue+0x22>
 80066ba:	6824      	ldr	r4, [r4, #0]
 80066bc:	2c00      	cmp	r4, #0
 80066be:	d1f7      	bne.n	80066b0 <_fwalk_sglue+0xc>
 80066c0:	4630      	mov	r0, r6
 80066c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066c6:	89ab      	ldrh	r3, [r5, #12]
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d907      	bls.n	80066dc <_fwalk_sglue+0x38>
 80066cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066d0:	3301      	adds	r3, #1
 80066d2:	d003      	beq.n	80066dc <_fwalk_sglue+0x38>
 80066d4:	4629      	mov	r1, r5
 80066d6:	4638      	mov	r0, r7
 80066d8:	47c0      	blx	r8
 80066da:	4306      	orrs	r6, r0
 80066dc:	3568      	adds	r5, #104	@ 0x68
 80066de:	e7e9      	b.n	80066b4 <_fwalk_sglue+0x10>

080066e0 <iprintf>:
 80066e0:	b40f      	push	{r0, r1, r2, r3}
 80066e2:	b507      	push	{r0, r1, r2, lr}
 80066e4:	4906      	ldr	r1, [pc, #24]	@ (8006700 <iprintf+0x20>)
 80066e6:	ab04      	add	r3, sp, #16
 80066e8:	6808      	ldr	r0, [r1, #0]
 80066ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80066ee:	6881      	ldr	r1, [r0, #8]
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	f000 fcf1 	bl	80070d8 <_vfiprintf_r>
 80066f6:	b003      	add	sp, #12
 80066f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80066fc:	b004      	add	sp, #16
 80066fe:	4770      	bx	lr
 8006700:	20000018 	.word	0x20000018

08006704 <_puts_r>:
 8006704:	6a03      	ldr	r3, [r0, #32]
 8006706:	b570      	push	{r4, r5, r6, lr}
 8006708:	6884      	ldr	r4, [r0, #8]
 800670a:	4605      	mov	r5, r0
 800670c:	460e      	mov	r6, r1
 800670e:	b90b      	cbnz	r3, 8006714 <_puts_r+0x10>
 8006710:	f7ff ffb0 	bl	8006674 <__sinit>
 8006714:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006716:	07db      	lsls	r3, r3, #31
 8006718:	d405      	bmi.n	8006726 <_puts_r+0x22>
 800671a:	89a3      	ldrh	r3, [r4, #12]
 800671c:	0598      	lsls	r0, r3, #22
 800671e:	d402      	bmi.n	8006726 <_puts_r+0x22>
 8006720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006722:	f000 fa2e 	bl	8006b82 <__retarget_lock_acquire_recursive>
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	0719      	lsls	r1, r3, #28
 800672a:	d502      	bpl.n	8006732 <_puts_r+0x2e>
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d135      	bne.n	800679e <_puts_r+0x9a>
 8006732:	4621      	mov	r1, r4
 8006734:	4628      	mov	r0, r5
 8006736:	f000 f8f9 	bl	800692c <__swsetup_r>
 800673a:	b380      	cbz	r0, 800679e <_puts_r+0x9a>
 800673c:	f04f 35ff 	mov.w	r5, #4294967295
 8006740:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006742:	07da      	lsls	r2, r3, #31
 8006744:	d405      	bmi.n	8006752 <_puts_r+0x4e>
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	059b      	lsls	r3, r3, #22
 800674a:	d402      	bmi.n	8006752 <_puts_r+0x4e>
 800674c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800674e:	f000 fa19 	bl	8006b84 <__retarget_lock_release_recursive>
 8006752:	4628      	mov	r0, r5
 8006754:	bd70      	pop	{r4, r5, r6, pc}
 8006756:	2b00      	cmp	r3, #0
 8006758:	da04      	bge.n	8006764 <_puts_r+0x60>
 800675a:	69a2      	ldr	r2, [r4, #24]
 800675c:	429a      	cmp	r2, r3
 800675e:	dc17      	bgt.n	8006790 <_puts_r+0x8c>
 8006760:	290a      	cmp	r1, #10
 8006762:	d015      	beq.n	8006790 <_puts_r+0x8c>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	6022      	str	r2, [r4, #0]
 800676a:	7019      	strb	r1, [r3, #0]
 800676c:	68a3      	ldr	r3, [r4, #8]
 800676e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006772:	3b01      	subs	r3, #1
 8006774:	60a3      	str	r3, [r4, #8]
 8006776:	2900      	cmp	r1, #0
 8006778:	d1ed      	bne.n	8006756 <_puts_r+0x52>
 800677a:	2b00      	cmp	r3, #0
 800677c:	da11      	bge.n	80067a2 <_puts_r+0x9e>
 800677e:	4622      	mov	r2, r4
 8006780:	210a      	movs	r1, #10
 8006782:	4628      	mov	r0, r5
 8006784:	f000 f893 	bl	80068ae <__swbuf_r>
 8006788:	3001      	adds	r0, #1
 800678a:	d0d7      	beq.n	800673c <_puts_r+0x38>
 800678c:	250a      	movs	r5, #10
 800678e:	e7d7      	b.n	8006740 <_puts_r+0x3c>
 8006790:	4622      	mov	r2, r4
 8006792:	4628      	mov	r0, r5
 8006794:	f000 f88b 	bl	80068ae <__swbuf_r>
 8006798:	3001      	adds	r0, #1
 800679a:	d1e7      	bne.n	800676c <_puts_r+0x68>
 800679c:	e7ce      	b.n	800673c <_puts_r+0x38>
 800679e:	3e01      	subs	r6, #1
 80067a0:	e7e4      	b.n	800676c <_puts_r+0x68>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	6022      	str	r2, [r4, #0]
 80067a8:	220a      	movs	r2, #10
 80067aa:	701a      	strb	r2, [r3, #0]
 80067ac:	e7ee      	b.n	800678c <_puts_r+0x88>
	...

080067b0 <puts>:
 80067b0:	4b02      	ldr	r3, [pc, #8]	@ (80067bc <puts+0xc>)
 80067b2:	4601      	mov	r1, r0
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	f7ff bfa5 	b.w	8006704 <_puts_r>
 80067ba:	bf00      	nop
 80067bc:	20000018 	.word	0x20000018

080067c0 <sniprintf>:
 80067c0:	b40c      	push	{r2, r3}
 80067c2:	b530      	push	{r4, r5, lr}
 80067c4:	4b17      	ldr	r3, [pc, #92]	@ (8006824 <sniprintf+0x64>)
 80067c6:	1e0c      	subs	r4, r1, #0
 80067c8:	681d      	ldr	r5, [r3, #0]
 80067ca:	b09d      	sub	sp, #116	@ 0x74
 80067cc:	da08      	bge.n	80067e0 <sniprintf+0x20>
 80067ce:	238b      	movs	r3, #139	@ 0x8b
 80067d0:	602b      	str	r3, [r5, #0]
 80067d2:	f04f 30ff 	mov.w	r0, #4294967295
 80067d6:	b01d      	add	sp, #116	@ 0x74
 80067d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067dc:	b002      	add	sp, #8
 80067de:	4770      	bx	lr
 80067e0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80067e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80067e8:	bf14      	ite	ne
 80067ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80067ee:	4623      	moveq	r3, r4
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	9307      	str	r3, [sp, #28]
 80067f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80067f8:	9002      	str	r0, [sp, #8]
 80067fa:	9006      	str	r0, [sp, #24]
 80067fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006800:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006802:	ab21      	add	r3, sp, #132	@ 0x84
 8006804:	a902      	add	r1, sp, #8
 8006806:	4628      	mov	r0, r5
 8006808:	9301      	str	r3, [sp, #4]
 800680a:	f000 fb3f 	bl	8006e8c <_svfiprintf_r>
 800680e:	1c43      	adds	r3, r0, #1
 8006810:	bfbc      	itt	lt
 8006812:	238b      	movlt	r3, #139	@ 0x8b
 8006814:	602b      	strlt	r3, [r5, #0]
 8006816:	2c00      	cmp	r4, #0
 8006818:	d0dd      	beq.n	80067d6 <sniprintf+0x16>
 800681a:	9b02      	ldr	r3, [sp, #8]
 800681c:	2200      	movs	r2, #0
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	e7d9      	b.n	80067d6 <sniprintf+0x16>
 8006822:	bf00      	nop
 8006824:	20000018 	.word	0x20000018

08006828 <__sread>:
 8006828:	b510      	push	{r4, lr}
 800682a:	460c      	mov	r4, r1
 800682c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006830:	f000 f958 	bl	8006ae4 <_read_r>
 8006834:	2800      	cmp	r0, #0
 8006836:	bfab      	itete	ge
 8006838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800683a:	89a3      	ldrhlt	r3, [r4, #12]
 800683c:	181b      	addge	r3, r3, r0
 800683e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006842:	bfac      	ite	ge
 8006844:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006846:	81a3      	strhlt	r3, [r4, #12]
 8006848:	bd10      	pop	{r4, pc}

0800684a <__swrite>:
 800684a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684e:	461f      	mov	r7, r3
 8006850:	898b      	ldrh	r3, [r1, #12]
 8006852:	05db      	lsls	r3, r3, #23
 8006854:	4605      	mov	r5, r0
 8006856:	460c      	mov	r4, r1
 8006858:	4616      	mov	r6, r2
 800685a:	d505      	bpl.n	8006868 <__swrite+0x1e>
 800685c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006860:	2302      	movs	r3, #2
 8006862:	2200      	movs	r2, #0
 8006864:	f000 f92c 	bl	8006ac0 <_lseek_r>
 8006868:	89a3      	ldrh	r3, [r4, #12]
 800686a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800686e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	4632      	mov	r2, r6
 8006876:	463b      	mov	r3, r7
 8006878:	4628      	mov	r0, r5
 800687a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800687e:	f000 b943 	b.w	8006b08 <_write_r>

08006882 <__sseek>:
 8006882:	b510      	push	{r4, lr}
 8006884:	460c      	mov	r4, r1
 8006886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688a:	f000 f919 	bl	8006ac0 <_lseek_r>
 800688e:	1c43      	adds	r3, r0, #1
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	bf15      	itete	ne
 8006894:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800689a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800689e:	81a3      	strheq	r3, [r4, #12]
 80068a0:	bf18      	it	ne
 80068a2:	81a3      	strhne	r3, [r4, #12]
 80068a4:	bd10      	pop	{r4, pc}

080068a6 <__sclose>:
 80068a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068aa:	f000 b8f9 	b.w	8006aa0 <_close_r>

080068ae <__swbuf_r>:
 80068ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b0:	460e      	mov	r6, r1
 80068b2:	4614      	mov	r4, r2
 80068b4:	4605      	mov	r5, r0
 80068b6:	b118      	cbz	r0, 80068c0 <__swbuf_r+0x12>
 80068b8:	6a03      	ldr	r3, [r0, #32]
 80068ba:	b90b      	cbnz	r3, 80068c0 <__swbuf_r+0x12>
 80068bc:	f7ff feda 	bl	8006674 <__sinit>
 80068c0:	69a3      	ldr	r3, [r4, #24]
 80068c2:	60a3      	str	r3, [r4, #8]
 80068c4:	89a3      	ldrh	r3, [r4, #12]
 80068c6:	071a      	lsls	r2, r3, #28
 80068c8:	d501      	bpl.n	80068ce <__swbuf_r+0x20>
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	b943      	cbnz	r3, 80068e0 <__swbuf_r+0x32>
 80068ce:	4621      	mov	r1, r4
 80068d0:	4628      	mov	r0, r5
 80068d2:	f000 f82b 	bl	800692c <__swsetup_r>
 80068d6:	b118      	cbz	r0, 80068e0 <__swbuf_r+0x32>
 80068d8:	f04f 37ff 	mov.w	r7, #4294967295
 80068dc:	4638      	mov	r0, r7
 80068de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	6922      	ldr	r2, [r4, #16]
 80068e4:	1a98      	subs	r0, r3, r2
 80068e6:	6963      	ldr	r3, [r4, #20]
 80068e8:	b2f6      	uxtb	r6, r6
 80068ea:	4283      	cmp	r3, r0
 80068ec:	4637      	mov	r7, r6
 80068ee:	dc05      	bgt.n	80068fc <__swbuf_r+0x4e>
 80068f0:	4621      	mov	r1, r4
 80068f2:	4628      	mov	r0, r5
 80068f4:	f000 ff1a 	bl	800772c <_fflush_r>
 80068f8:	2800      	cmp	r0, #0
 80068fa:	d1ed      	bne.n	80068d8 <__swbuf_r+0x2a>
 80068fc:	68a3      	ldr	r3, [r4, #8]
 80068fe:	3b01      	subs	r3, #1
 8006900:	60a3      	str	r3, [r4, #8]
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	6022      	str	r2, [r4, #0]
 8006908:	701e      	strb	r6, [r3, #0]
 800690a:	6962      	ldr	r2, [r4, #20]
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	429a      	cmp	r2, r3
 8006910:	d004      	beq.n	800691c <__swbuf_r+0x6e>
 8006912:	89a3      	ldrh	r3, [r4, #12]
 8006914:	07db      	lsls	r3, r3, #31
 8006916:	d5e1      	bpl.n	80068dc <__swbuf_r+0x2e>
 8006918:	2e0a      	cmp	r6, #10
 800691a:	d1df      	bne.n	80068dc <__swbuf_r+0x2e>
 800691c:	4621      	mov	r1, r4
 800691e:	4628      	mov	r0, r5
 8006920:	f000 ff04 	bl	800772c <_fflush_r>
 8006924:	2800      	cmp	r0, #0
 8006926:	d0d9      	beq.n	80068dc <__swbuf_r+0x2e>
 8006928:	e7d6      	b.n	80068d8 <__swbuf_r+0x2a>
	...

0800692c <__swsetup_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4b29      	ldr	r3, [pc, #164]	@ (80069d4 <__swsetup_r+0xa8>)
 8006930:	4605      	mov	r5, r0
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	460c      	mov	r4, r1
 8006936:	b118      	cbz	r0, 8006940 <__swsetup_r+0x14>
 8006938:	6a03      	ldr	r3, [r0, #32]
 800693a:	b90b      	cbnz	r3, 8006940 <__swsetup_r+0x14>
 800693c:	f7ff fe9a 	bl	8006674 <__sinit>
 8006940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006944:	0719      	lsls	r1, r3, #28
 8006946:	d422      	bmi.n	800698e <__swsetup_r+0x62>
 8006948:	06da      	lsls	r2, r3, #27
 800694a:	d407      	bmi.n	800695c <__swsetup_r+0x30>
 800694c:	2209      	movs	r2, #9
 800694e:	602a      	str	r2, [r5, #0]
 8006950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	f04f 30ff 	mov.w	r0, #4294967295
 800695a:	e033      	b.n	80069c4 <__swsetup_r+0x98>
 800695c:	0758      	lsls	r0, r3, #29
 800695e:	d512      	bpl.n	8006986 <__swsetup_r+0x5a>
 8006960:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006962:	b141      	cbz	r1, 8006976 <__swsetup_r+0x4a>
 8006964:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006968:	4299      	cmp	r1, r3
 800696a:	d002      	beq.n	8006972 <__swsetup_r+0x46>
 800696c:	4628      	mov	r0, r5
 800696e:	f000 f931 	bl	8006bd4 <_free_r>
 8006972:	2300      	movs	r3, #0
 8006974:	6363      	str	r3, [r4, #52]	@ 0x34
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	2300      	movs	r3, #0
 8006980:	6063      	str	r3, [r4, #4]
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	6023      	str	r3, [r4, #0]
 8006986:	89a3      	ldrh	r3, [r4, #12]
 8006988:	f043 0308 	orr.w	r3, r3, #8
 800698c:	81a3      	strh	r3, [r4, #12]
 800698e:	6923      	ldr	r3, [r4, #16]
 8006990:	b94b      	cbnz	r3, 80069a6 <__swsetup_r+0x7a>
 8006992:	89a3      	ldrh	r3, [r4, #12]
 8006994:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800699c:	d003      	beq.n	80069a6 <__swsetup_r+0x7a>
 800699e:	4621      	mov	r1, r4
 80069a0:	4628      	mov	r0, r5
 80069a2:	f000 ff23 	bl	80077ec <__smakebuf_r>
 80069a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069aa:	f013 0201 	ands.w	r2, r3, #1
 80069ae:	d00a      	beq.n	80069c6 <__swsetup_r+0x9a>
 80069b0:	2200      	movs	r2, #0
 80069b2:	60a2      	str	r2, [r4, #8]
 80069b4:	6962      	ldr	r2, [r4, #20]
 80069b6:	4252      	negs	r2, r2
 80069b8:	61a2      	str	r2, [r4, #24]
 80069ba:	6922      	ldr	r2, [r4, #16]
 80069bc:	b942      	cbnz	r2, 80069d0 <__swsetup_r+0xa4>
 80069be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069c2:	d1c5      	bne.n	8006950 <__swsetup_r+0x24>
 80069c4:	bd38      	pop	{r3, r4, r5, pc}
 80069c6:	0799      	lsls	r1, r3, #30
 80069c8:	bf58      	it	pl
 80069ca:	6962      	ldrpl	r2, [r4, #20]
 80069cc:	60a2      	str	r2, [r4, #8]
 80069ce:	e7f4      	b.n	80069ba <__swsetup_r+0x8e>
 80069d0:	2000      	movs	r0, #0
 80069d2:	e7f7      	b.n	80069c4 <__swsetup_r+0x98>
 80069d4:	20000018 	.word	0x20000018

080069d8 <memset>:
 80069d8:	4402      	add	r2, r0
 80069da:	4603      	mov	r3, r0
 80069dc:	4293      	cmp	r3, r2
 80069de:	d100      	bne.n	80069e2 <memset+0xa>
 80069e0:	4770      	bx	lr
 80069e2:	f803 1b01 	strb.w	r1, [r3], #1
 80069e6:	e7f9      	b.n	80069dc <memset+0x4>

080069e8 <strtok>:
 80069e8:	4b16      	ldr	r3, [pc, #88]	@ (8006a44 <strtok+0x5c>)
 80069ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ee:	681f      	ldr	r7, [r3, #0]
 80069f0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80069f2:	4605      	mov	r5, r0
 80069f4:	460e      	mov	r6, r1
 80069f6:	b9ec      	cbnz	r4, 8006a34 <strtok+0x4c>
 80069f8:	2050      	movs	r0, #80	@ 0x50
 80069fa:	f000 f935 	bl	8006c68 <malloc>
 80069fe:	4602      	mov	r2, r0
 8006a00:	6478      	str	r0, [r7, #68]	@ 0x44
 8006a02:	b920      	cbnz	r0, 8006a0e <strtok+0x26>
 8006a04:	4b10      	ldr	r3, [pc, #64]	@ (8006a48 <strtok+0x60>)
 8006a06:	4811      	ldr	r0, [pc, #68]	@ (8006a4c <strtok+0x64>)
 8006a08:	215b      	movs	r1, #91	@ 0x5b
 8006a0a:	f000 f8c5 	bl	8006b98 <__assert_func>
 8006a0e:	e9c0 4400 	strd	r4, r4, [r0]
 8006a12:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006a16:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006a1a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8006a1e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8006a22:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8006a26:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8006a2a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8006a2e:	6184      	str	r4, [r0, #24]
 8006a30:	7704      	strb	r4, [r0, #28]
 8006a32:	6244      	str	r4, [r0, #36]	@ 0x24
 8006a34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a36:	4631      	mov	r1, r6
 8006a38:	4628      	mov	r0, r5
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a40:	f000 b806 	b.w	8006a50 <__strtok_r>
 8006a44:	20000018 	.word	0x20000018
 8006a48:	08007b7c 	.word	0x08007b7c
 8006a4c:	08007b93 	.word	0x08007b93

08006a50 <__strtok_r>:
 8006a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a52:	4604      	mov	r4, r0
 8006a54:	b908      	cbnz	r0, 8006a5a <__strtok_r+0xa>
 8006a56:	6814      	ldr	r4, [r2, #0]
 8006a58:	b144      	cbz	r4, 8006a6c <__strtok_r+0x1c>
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006a60:	460f      	mov	r7, r1
 8006a62:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006a66:	b91e      	cbnz	r6, 8006a70 <__strtok_r+0x20>
 8006a68:	b965      	cbnz	r5, 8006a84 <__strtok_r+0x34>
 8006a6a:	6015      	str	r5, [r2, #0]
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	e005      	b.n	8006a7c <__strtok_r+0x2c>
 8006a70:	42b5      	cmp	r5, r6
 8006a72:	d1f6      	bne.n	8006a62 <__strtok_r+0x12>
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d1f0      	bne.n	8006a5a <__strtok_r+0xa>
 8006a78:	6014      	str	r4, [r2, #0]
 8006a7a:	7003      	strb	r3, [r0, #0]
 8006a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a7e:	461c      	mov	r4, r3
 8006a80:	e00c      	b.n	8006a9c <__strtok_r+0x4c>
 8006a82:	b915      	cbnz	r5, 8006a8a <__strtok_r+0x3a>
 8006a84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a88:	460e      	mov	r6, r1
 8006a8a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006a8e:	42ab      	cmp	r3, r5
 8006a90:	d1f7      	bne.n	8006a82 <__strtok_r+0x32>
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d0f3      	beq.n	8006a7e <__strtok_r+0x2e>
 8006a96:	2300      	movs	r3, #0
 8006a98:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006a9c:	6014      	str	r4, [r2, #0]
 8006a9e:	e7ed      	b.n	8006a7c <__strtok_r+0x2c>

08006aa0 <_close_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4d06      	ldr	r5, [pc, #24]	@ (8006abc <_close_r+0x1c>)
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	4604      	mov	r4, r0
 8006aa8:	4608      	mov	r0, r1
 8006aaa:	602b      	str	r3, [r5, #0]
 8006aac:	f7fb f888 	bl	8001bc0 <_close>
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	d102      	bne.n	8006aba <_close_r+0x1a>
 8006ab4:	682b      	ldr	r3, [r5, #0]
 8006ab6:	b103      	cbz	r3, 8006aba <_close_r+0x1a>
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	bd38      	pop	{r3, r4, r5, pc}
 8006abc:	20000488 	.word	0x20000488

08006ac0 <_lseek_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4d07      	ldr	r5, [pc, #28]	@ (8006ae0 <_lseek_r+0x20>)
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	4608      	mov	r0, r1
 8006ac8:	4611      	mov	r1, r2
 8006aca:	2200      	movs	r2, #0
 8006acc:	602a      	str	r2, [r5, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f7fb f89d 	bl	8001c0e <_lseek>
 8006ad4:	1c43      	adds	r3, r0, #1
 8006ad6:	d102      	bne.n	8006ade <_lseek_r+0x1e>
 8006ad8:	682b      	ldr	r3, [r5, #0]
 8006ada:	b103      	cbz	r3, 8006ade <_lseek_r+0x1e>
 8006adc:	6023      	str	r3, [r4, #0]
 8006ade:	bd38      	pop	{r3, r4, r5, pc}
 8006ae0:	20000488 	.word	0x20000488

08006ae4 <_read_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4d07      	ldr	r5, [pc, #28]	@ (8006b04 <_read_r+0x20>)
 8006ae8:	4604      	mov	r4, r0
 8006aea:	4608      	mov	r0, r1
 8006aec:	4611      	mov	r1, r2
 8006aee:	2200      	movs	r2, #0
 8006af0:	602a      	str	r2, [r5, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	f7fb f82b 	bl	8001b4e <_read>
 8006af8:	1c43      	adds	r3, r0, #1
 8006afa:	d102      	bne.n	8006b02 <_read_r+0x1e>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	b103      	cbz	r3, 8006b02 <_read_r+0x1e>
 8006b00:	6023      	str	r3, [r4, #0]
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	20000488 	.word	0x20000488

08006b08 <_write_r>:
 8006b08:	b538      	push	{r3, r4, r5, lr}
 8006b0a:	4d07      	ldr	r5, [pc, #28]	@ (8006b28 <_write_r+0x20>)
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	4608      	mov	r0, r1
 8006b10:	4611      	mov	r1, r2
 8006b12:	2200      	movs	r2, #0
 8006b14:	602a      	str	r2, [r5, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	f7fb f836 	bl	8001b88 <_write>
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d102      	bne.n	8006b26 <_write_r+0x1e>
 8006b20:	682b      	ldr	r3, [r5, #0]
 8006b22:	b103      	cbz	r3, 8006b26 <_write_r+0x1e>
 8006b24:	6023      	str	r3, [r4, #0]
 8006b26:	bd38      	pop	{r3, r4, r5, pc}
 8006b28:	20000488 	.word	0x20000488

08006b2c <__errno>:
 8006b2c:	4b01      	ldr	r3, [pc, #4]	@ (8006b34 <__errno+0x8>)
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	20000018 	.word	0x20000018

08006b38 <__libc_init_array>:
 8006b38:	b570      	push	{r4, r5, r6, lr}
 8006b3a:	4d0d      	ldr	r5, [pc, #52]	@ (8006b70 <__libc_init_array+0x38>)
 8006b3c:	4c0d      	ldr	r4, [pc, #52]	@ (8006b74 <__libc_init_array+0x3c>)
 8006b3e:	1b64      	subs	r4, r4, r5
 8006b40:	10a4      	asrs	r4, r4, #2
 8006b42:	2600      	movs	r6, #0
 8006b44:	42a6      	cmp	r6, r4
 8006b46:	d109      	bne.n	8006b5c <__libc_init_array+0x24>
 8006b48:	4d0b      	ldr	r5, [pc, #44]	@ (8006b78 <__libc_init_array+0x40>)
 8006b4a:	4c0c      	ldr	r4, [pc, #48]	@ (8006b7c <__libc_init_array+0x44>)
 8006b4c:	f000 ff66 	bl	8007a1c <_init>
 8006b50:	1b64      	subs	r4, r4, r5
 8006b52:	10a4      	asrs	r4, r4, #2
 8006b54:	2600      	movs	r6, #0
 8006b56:	42a6      	cmp	r6, r4
 8006b58:	d105      	bne.n	8006b66 <__libc_init_array+0x2e>
 8006b5a:	bd70      	pop	{r4, r5, r6, pc}
 8006b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b60:	4798      	blx	r3
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7ee      	b.n	8006b44 <__libc_init_array+0xc>
 8006b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b6a:	4798      	blx	r3
 8006b6c:	3601      	adds	r6, #1
 8006b6e:	e7f2      	b.n	8006b56 <__libc_init_array+0x1e>
 8006b70:	08007c64 	.word	0x08007c64
 8006b74:	08007c64 	.word	0x08007c64
 8006b78:	08007c64 	.word	0x08007c64
 8006b7c:	08007c68 	.word	0x08007c68

08006b80 <__retarget_lock_init_recursive>:
 8006b80:	4770      	bx	lr

08006b82 <__retarget_lock_acquire_recursive>:
 8006b82:	4770      	bx	lr

08006b84 <__retarget_lock_release_recursive>:
 8006b84:	4770      	bx	lr

08006b86 <strcpy>:
 8006b86:	4603      	mov	r3, r0
 8006b88:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b8c:	f803 2b01 	strb.w	r2, [r3], #1
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	d1f9      	bne.n	8006b88 <strcpy+0x2>
 8006b94:	4770      	bx	lr
	...

08006b98 <__assert_func>:
 8006b98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b9a:	4614      	mov	r4, r2
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	4b09      	ldr	r3, [pc, #36]	@ (8006bc4 <__assert_func+0x2c>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4605      	mov	r5, r0
 8006ba4:	68d8      	ldr	r0, [r3, #12]
 8006ba6:	b954      	cbnz	r4, 8006bbe <__assert_func+0x26>
 8006ba8:	4b07      	ldr	r3, [pc, #28]	@ (8006bc8 <__assert_func+0x30>)
 8006baa:	461c      	mov	r4, r3
 8006bac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bb0:	9100      	str	r1, [sp, #0]
 8006bb2:	462b      	mov	r3, r5
 8006bb4:	4905      	ldr	r1, [pc, #20]	@ (8006bcc <__assert_func+0x34>)
 8006bb6:	f000 fde1 	bl	800777c <fiprintf>
 8006bba:	f000 fead 	bl	8007918 <abort>
 8006bbe:	4b04      	ldr	r3, [pc, #16]	@ (8006bd0 <__assert_func+0x38>)
 8006bc0:	e7f4      	b.n	8006bac <__assert_func+0x14>
 8006bc2:	bf00      	nop
 8006bc4:	20000018 	.word	0x20000018
 8006bc8:	08007c28 	.word	0x08007c28
 8006bcc:	08007bfa 	.word	0x08007bfa
 8006bd0:	08007bed 	.word	0x08007bed

08006bd4 <_free_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	2900      	cmp	r1, #0
 8006bda:	d041      	beq.n	8006c60 <_free_r+0x8c>
 8006bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006be0:	1f0c      	subs	r4, r1, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bfb8      	it	lt
 8006be6:	18e4      	addlt	r4, r4, r3
 8006be8:	f000 f8e8 	bl	8006dbc <__malloc_lock>
 8006bec:	4a1d      	ldr	r2, [pc, #116]	@ (8006c64 <_free_r+0x90>)
 8006bee:	6813      	ldr	r3, [r2, #0]
 8006bf0:	b933      	cbnz	r3, 8006c00 <_free_r+0x2c>
 8006bf2:	6063      	str	r3, [r4, #4]
 8006bf4:	6014      	str	r4, [r2, #0]
 8006bf6:	4628      	mov	r0, r5
 8006bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bfc:	f000 b8e4 	b.w	8006dc8 <__malloc_unlock>
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	d908      	bls.n	8006c16 <_free_r+0x42>
 8006c04:	6820      	ldr	r0, [r4, #0]
 8006c06:	1821      	adds	r1, r4, r0
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	bf01      	itttt	eq
 8006c0c:	6819      	ldreq	r1, [r3, #0]
 8006c0e:	685b      	ldreq	r3, [r3, #4]
 8006c10:	1809      	addeq	r1, r1, r0
 8006c12:	6021      	streq	r1, [r4, #0]
 8006c14:	e7ed      	b.n	8006bf2 <_free_r+0x1e>
 8006c16:	461a      	mov	r2, r3
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	b10b      	cbz	r3, 8006c20 <_free_r+0x4c>
 8006c1c:	42a3      	cmp	r3, r4
 8006c1e:	d9fa      	bls.n	8006c16 <_free_r+0x42>
 8006c20:	6811      	ldr	r1, [r2, #0]
 8006c22:	1850      	adds	r0, r2, r1
 8006c24:	42a0      	cmp	r0, r4
 8006c26:	d10b      	bne.n	8006c40 <_free_r+0x6c>
 8006c28:	6820      	ldr	r0, [r4, #0]
 8006c2a:	4401      	add	r1, r0
 8006c2c:	1850      	adds	r0, r2, r1
 8006c2e:	4283      	cmp	r3, r0
 8006c30:	6011      	str	r1, [r2, #0]
 8006c32:	d1e0      	bne.n	8006bf6 <_free_r+0x22>
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	6053      	str	r3, [r2, #4]
 8006c3a:	4408      	add	r0, r1
 8006c3c:	6010      	str	r0, [r2, #0]
 8006c3e:	e7da      	b.n	8006bf6 <_free_r+0x22>
 8006c40:	d902      	bls.n	8006c48 <_free_r+0x74>
 8006c42:	230c      	movs	r3, #12
 8006c44:	602b      	str	r3, [r5, #0]
 8006c46:	e7d6      	b.n	8006bf6 <_free_r+0x22>
 8006c48:	6820      	ldr	r0, [r4, #0]
 8006c4a:	1821      	adds	r1, r4, r0
 8006c4c:	428b      	cmp	r3, r1
 8006c4e:	bf04      	itt	eq
 8006c50:	6819      	ldreq	r1, [r3, #0]
 8006c52:	685b      	ldreq	r3, [r3, #4]
 8006c54:	6063      	str	r3, [r4, #4]
 8006c56:	bf04      	itt	eq
 8006c58:	1809      	addeq	r1, r1, r0
 8006c5a:	6021      	streq	r1, [r4, #0]
 8006c5c:	6054      	str	r4, [r2, #4]
 8006c5e:	e7ca      	b.n	8006bf6 <_free_r+0x22>
 8006c60:	bd38      	pop	{r3, r4, r5, pc}
 8006c62:	bf00      	nop
 8006c64:	20000494 	.word	0x20000494

08006c68 <malloc>:
 8006c68:	4b02      	ldr	r3, [pc, #8]	@ (8006c74 <malloc+0xc>)
 8006c6a:	4601      	mov	r1, r0
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	f000 b825 	b.w	8006cbc <_malloc_r>
 8006c72:	bf00      	nop
 8006c74:	20000018 	.word	0x20000018

08006c78 <sbrk_aligned>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	4e0f      	ldr	r6, [pc, #60]	@ (8006cb8 <sbrk_aligned+0x40>)
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	6831      	ldr	r1, [r6, #0]
 8006c80:	4605      	mov	r5, r0
 8006c82:	b911      	cbnz	r1, 8006c8a <sbrk_aligned+0x12>
 8006c84:	f000 fe2a 	bl	80078dc <_sbrk_r>
 8006c88:	6030      	str	r0, [r6, #0]
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 fe25 	bl	80078dc <_sbrk_r>
 8006c92:	1c43      	adds	r3, r0, #1
 8006c94:	d103      	bne.n	8006c9e <sbrk_aligned+0x26>
 8006c96:	f04f 34ff 	mov.w	r4, #4294967295
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	bd70      	pop	{r4, r5, r6, pc}
 8006c9e:	1cc4      	adds	r4, r0, #3
 8006ca0:	f024 0403 	bic.w	r4, r4, #3
 8006ca4:	42a0      	cmp	r0, r4
 8006ca6:	d0f8      	beq.n	8006c9a <sbrk_aligned+0x22>
 8006ca8:	1a21      	subs	r1, r4, r0
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 fe16 	bl	80078dc <_sbrk_r>
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d1f2      	bne.n	8006c9a <sbrk_aligned+0x22>
 8006cb4:	e7ef      	b.n	8006c96 <sbrk_aligned+0x1e>
 8006cb6:	bf00      	nop
 8006cb8:	20000490 	.word	0x20000490

08006cbc <_malloc_r>:
 8006cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cc0:	1ccd      	adds	r5, r1, #3
 8006cc2:	f025 0503 	bic.w	r5, r5, #3
 8006cc6:	3508      	adds	r5, #8
 8006cc8:	2d0c      	cmp	r5, #12
 8006cca:	bf38      	it	cc
 8006ccc:	250c      	movcc	r5, #12
 8006cce:	2d00      	cmp	r5, #0
 8006cd0:	4606      	mov	r6, r0
 8006cd2:	db01      	blt.n	8006cd8 <_malloc_r+0x1c>
 8006cd4:	42a9      	cmp	r1, r5
 8006cd6:	d904      	bls.n	8006ce2 <_malloc_r+0x26>
 8006cd8:	230c      	movs	r3, #12
 8006cda:	6033      	str	r3, [r6, #0]
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006db8 <_malloc_r+0xfc>
 8006ce6:	f000 f869 	bl	8006dbc <__malloc_lock>
 8006cea:	f8d8 3000 	ldr.w	r3, [r8]
 8006cee:	461c      	mov	r4, r3
 8006cf0:	bb44      	cbnz	r4, 8006d44 <_malloc_r+0x88>
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	4630      	mov	r0, r6
 8006cf6:	f7ff ffbf 	bl	8006c78 <sbrk_aligned>
 8006cfa:	1c43      	adds	r3, r0, #1
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	d158      	bne.n	8006db2 <_malloc_r+0xf6>
 8006d00:	f8d8 4000 	ldr.w	r4, [r8]
 8006d04:	4627      	mov	r7, r4
 8006d06:	2f00      	cmp	r7, #0
 8006d08:	d143      	bne.n	8006d92 <_malloc_r+0xd6>
 8006d0a:	2c00      	cmp	r4, #0
 8006d0c:	d04b      	beq.n	8006da6 <_malloc_r+0xea>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	4639      	mov	r1, r7
 8006d12:	4630      	mov	r0, r6
 8006d14:	eb04 0903 	add.w	r9, r4, r3
 8006d18:	f000 fde0 	bl	80078dc <_sbrk_r>
 8006d1c:	4581      	cmp	r9, r0
 8006d1e:	d142      	bne.n	8006da6 <_malloc_r+0xea>
 8006d20:	6821      	ldr	r1, [r4, #0]
 8006d22:	1a6d      	subs	r5, r5, r1
 8006d24:	4629      	mov	r1, r5
 8006d26:	4630      	mov	r0, r6
 8006d28:	f7ff ffa6 	bl	8006c78 <sbrk_aligned>
 8006d2c:	3001      	adds	r0, #1
 8006d2e:	d03a      	beq.n	8006da6 <_malloc_r+0xea>
 8006d30:	6823      	ldr	r3, [r4, #0]
 8006d32:	442b      	add	r3, r5
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	f8d8 3000 	ldr.w	r3, [r8]
 8006d3a:	685a      	ldr	r2, [r3, #4]
 8006d3c:	bb62      	cbnz	r2, 8006d98 <_malloc_r+0xdc>
 8006d3e:	f8c8 7000 	str.w	r7, [r8]
 8006d42:	e00f      	b.n	8006d64 <_malloc_r+0xa8>
 8006d44:	6822      	ldr	r2, [r4, #0]
 8006d46:	1b52      	subs	r2, r2, r5
 8006d48:	d420      	bmi.n	8006d8c <_malloc_r+0xd0>
 8006d4a:	2a0b      	cmp	r2, #11
 8006d4c:	d917      	bls.n	8006d7e <_malloc_r+0xc2>
 8006d4e:	1961      	adds	r1, r4, r5
 8006d50:	42a3      	cmp	r3, r4
 8006d52:	6025      	str	r5, [r4, #0]
 8006d54:	bf18      	it	ne
 8006d56:	6059      	strne	r1, [r3, #4]
 8006d58:	6863      	ldr	r3, [r4, #4]
 8006d5a:	bf08      	it	eq
 8006d5c:	f8c8 1000 	streq.w	r1, [r8]
 8006d60:	5162      	str	r2, [r4, r5]
 8006d62:	604b      	str	r3, [r1, #4]
 8006d64:	4630      	mov	r0, r6
 8006d66:	f000 f82f 	bl	8006dc8 <__malloc_unlock>
 8006d6a:	f104 000b 	add.w	r0, r4, #11
 8006d6e:	1d23      	adds	r3, r4, #4
 8006d70:	f020 0007 	bic.w	r0, r0, #7
 8006d74:	1ac2      	subs	r2, r0, r3
 8006d76:	bf1c      	itt	ne
 8006d78:	1a1b      	subne	r3, r3, r0
 8006d7a:	50a3      	strne	r3, [r4, r2]
 8006d7c:	e7af      	b.n	8006cde <_malloc_r+0x22>
 8006d7e:	6862      	ldr	r2, [r4, #4]
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	bf0c      	ite	eq
 8006d84:	f8c8 2000 	streq.w	r2, [r8]
 8006d88:	605a      	strne	r2, [r3, #4]
 8006d8a:	e7eb      	b.n	8006d64 <_malloc_r+0xa8>
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	6864      	ldr	r4, [r4, #4]
 8006d90:	e7ae      	b.n	8006cf0 <_malloc_r+0x34>
 8006d92:	463c      	mov	r4, r7
 8006d94:	687f      	ldr	r7, [r7, #4]
 8006d96:	e7b6      	b.n	8006d06 <_malloc_r+0x4a>
 8006d98:	461a      	mov	r2, r3
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	42a3      	cmp	r3, r4
 8006d9e:	d1fb      	bne.n	8006d98 <_malloc_r+0xdc>
 8006da0:	2300      	movs	r3, #0
 8006da2:	6053      	str	r3, [r2, #4]
 8006da4:	e7de      	b.n	8006d64 <_malloc_r+0xa8>
 8006da6:	230c      	movs	r3, #12
 8006da8:	6033      	str	r3, [r6, #0]
 8006daa:	4630      	mov	r0, r6
 8006dac:	f000 f80c 	bl	8006dc8 <__malloc_unlock>
 8006db0:	e794      	b.n	8006cdc <_malloc_r+0x20>
 8006db2:	6005      	str	r5, [r0, #0]
 8006db4:	e7d6      	b.n	8006d64 <_malloc_r+0xa8>
 8006db6:	bf00      	nop
 8006db8:	20000494 	.word	0x20000494

08006dbc <__malloc_lock>:
 8006dbc:	4801      	ldr	r0, [pc, #4]	@ (8006dc4 <__malloc_lock+0x8>)
 8006dbe:	f7ff bee0 	b.w	8006b82 <__retarget_lock_acquire_recursive>
 8006dc2:	bf00      	nop
 8006dc4:	2000048c 	.word	0x2000048c

08006dc8 <__malloc_unlock>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	@ (8006dd0 <__malloc_unlock+0x8>)
 8006dca:	f7ff bedb 	b.w	8006b84 <__retarget_lock_release_recursive>
 8006dce:	bf00      	nop
 8006dd0:	2000048c 	.word	0x2000048c

08006dd4 <__ssputs_r>:
 8006dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	688e      	ldr	r6, [r1, #8]
 8006dda:	461f      	mov	r7, r3
 8006ddc:	42be      	cmp	r6, r7
 8006dde:	680b      	ldr	r3, [r1, #0]
 8006de0:	4682      	mov	sl, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	4690      	mov	r8, r2
 8006de6:	d82d      	bhi.n	8006e44 <__ssputs_r+0x70>
 8006de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006df0:	d026      	beq.n	8006e40 <__ssputs_r+0x6c>
 8006df2:	6965      	ldr	r5, [r4, #20]
 8006df4:	6909      	ldr	r1, [r1, #16]
 8006df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dfa:	eba3 0901 	sub.w	r9, r3, r1
 8006dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e02:	1c7b      	adds	r3, r7, #1
 8006e04:	444b      	add	r3, r9
 8006e06:	106d      	asrs	r5, r5, #1
 8006e08:	429d      	cmp	r5, r3
 8006e0a:	bf38      	it	cc
 8006e0c:	461d      	movcc	r5, r3
 8006e0e:	0553      	lsls	r3, r2, #21
 8006e10:	d527      	bpl.n	8006e62 <__ssputs_r+0x8e>
 8006e12:	4629      	mov	r1, r5
 8006e14:	f7ff ff52 	bl	8006cbc <_malloc_r>
 8006e18:	4606      	mov	r6, r0
 8006e1a:	b360      	cbz	r0, 8006e76 <__ssputs_r+0xa2>
 8006e1c:	6921      	ldr	r1, [r4, #16]
 8006e1e:	464a      	mov	r2, r9
 8006e20:	f000 fd6c 	bl	80078fc <memcpy>
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e2e:	81a3      	strh	r3, [r4, #12]
 8006e30:	6126      	str	r6, [r4, #16]
 8006e32:	6165      	str	r5, [r4, #20]
 8006e34:	444e      	add	r6, r9
 8006e36:	eba5 0509 	sub.w	r5, r5, r9
 8006e3a:	6026      	str	r6, [r4, #0]
 8006e3c:	60a5      	str	r5, [r4, #8]
 8006e3e:	463e      	mov	r6, r7
 8006e40:	42be      	cmp	r6, r7
 8006e42:	d900      	bls.n	8006e46 <__ssputs_r+0x72>
 8006e44:	463e      	mov	r6, r7
 8006e46:	6820      	ldr	r0, [r4, #0]
 8006e48:	4632      	mov	r2, r6
 8006e4a:	4641      	mov	r1, r8
 8006e4c:	f000 fd0a 	bl	8007864 <memmove>
 8006e50:	68a3      	ldr	r3, [r4, #8]
 8006e52:	1b9b      	subs	r3, r3, r6
 8006e54:	60a3      	str	r3, [r4, #8]
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	4433      	add	r3, r6
 8006e5a:	6023      	str	r3, [r4, #0]
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e62:	462a      	mov	r2, r5
 8006e64:	f000 fd5f 	bl	8007926 <_realloc_r>
 8006e68:	4606      	mov	r6, r0
 8006e6a:	2800      	cmp	r0, #0
 8006e6c:	d1e0      	bne.n	8006e30 <__ssputs_r+0x5c>
 8006e6e:	6921      	ldr	r1, [r4, #16]
 8006e70:	4650      	mov	r0, sl
 8006e72:	f7ff feaf 	bl	8006bd4 <_free_r>
 8006e76:	230c      	movs	r3, #12
 8006e78:	f8ca 3000 	str.w	r3, [sl]
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e82:	81a3      	strh	r3, [r4, #12]
 8006e84:	f04f 30ff 	mov.w	r0, #4294967295
 8006e88:	e7e9      	b.n	8006e5e <__ssputs_r+0x8a>
	...

08006e8c <_svfiprintf_r>:
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	4698      	mov	r8, r3
 8006e92:	898b      	ldrh	r3, [r1, #12]
 8006e94:	061b      	lsls	r3, r3, #24
 8006e96:	b09d      	sub	sp, #116	@ 0x74
 8006e98:	4607      	mov	r7, r0
 8006e9a:	460d      	mov	r5, r1
 8006e9c:	4614      	mov	r4, r2
 8006e9e:	d510      	bpl.n	8006ec2 <_svfiprintf_r+0x36>
 8006ea0:	690b      	ldr	r3, [r1, #16]
 8006ea2:	b973      	cbnz	r3, 8006ec2 <_svfiprintf_r+0x36>
 8006ea4:	2140      	movs	r1, #64	@ 0x40
 8006ea6:	f7ff ff09 	bl	8006cbc <_malloc_r>
 8006eaa:	6028      	str	r0, [r5, #0]
 8006eac:	6128      	str	r0, [r5, #16]
 8006eae:	b930      	cbnz	r0, 8006ebe <_svfiprintf_r+0x32>
 8006eb0:	230c      	movs	r3, #12
 8006eb2:	603b      	str	r3, [r7, #0]
 8006eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb8:	b01d      	add	sp, #116	@ 0x74
 8006eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ebe:	2340      	movs	r3, #64	@ 0x40
 8006ec0:	616b      	str	r3, [r5, #20]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec6:	2320      	movs	r3, #32
 8006ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ecc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ed0:	2330      	movs	r3, #48	@ 0x30
 8006ed2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007070 <_svfiprintf_r+0x1e4>
 8006ed6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006eda:	f04f 0901 	mov.w	r9, #1
 8006ede:	4623      	mov	r3, r4
 8006ee0:	469a      	mov	sl, r3
 8006ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ee6:	b10a      	cbz	r2, 8006eec <_svfiprintf_r+0x60>
 8006ee8:	2a25      	cmp	r2, #37	@ 0x25
 8006eea:	d1f9      	bne.n	8006ee0 <_svfiprintf_r+0x54>
 8006eec:	ebba 0b04 	subs.w	fp, sl, r4
 8006ef0:	d00b      	beq.n	8006f0a <_svfiprintf_r+0x7e>
 8006ef2:	465b      	mov	r3, fp
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7ff ff6b 	bl	8006dd4 <__ssputs_r>
 8006efe:	3001      	adds	r0, #1
 8006f00:	f000 80a7 	beq.w	8007052 <_svfiprintf_r+0x1c6>
 8006f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f06:	445a      	add	r2, fp
 8006f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 809f 	beq.w	8007052 <_svfiprintf_r+0x1c6>
 8006f14:	2300      	movs	r3, #0
 8006f16:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f1e:	f10a 0a01 	add.w	sl, sl, #1
 8006f22:	9304      	str	r3, [sp, #16]
 8006f24:	9307      	str	r3, [sp, #28]
 8006f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f2c:	4654      	mov	r4, sl
 8006f2e:	2205      	movs	r2, #5
 8006f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f34:	484e      	ldr	r0, [pc, #312]	@ (8007070 <_svfiprintf_r+0x1e4>)
 8006f36:	f7f9 f96b 	bl	8000210 <memchr>
 8006f3a:	9a04      	ldr	r2, [sp, #16]
 8006f3c:	b9d8      	cbnz	r0, 8006f76 <_svfiprintf_r+0xea>
 8006f3e:	06d0      	lsls	r0, r2, #27
 8006f40:	bf44      	itt	mi
 8006f42:	2320      	movmi	r3, #32
 8006f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f48:	0711      	lsls	r1, r2, #28
 8006f4a:	bf44      	itt	mi
 8006f4c:	232b      	movmi	r3, #43	@ 0x2b
 8006f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f52:	f89a 3000 	ldrb.w	r3, [sl]
 8006f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f58:	d015      	beq.n	8006f86 <_svfiprintf_r+0xfa>
 8006f5a:	9a07      	ldr	r2, [sp, #28]
 8006f5c:	4654      	mov	r4, sl
 8006f5e:	2000      	movs	r0, #0
 8006f60:	f04f 0c0a 	mov.w	ip, #10
 8006f64:	4621      	mov	r1, r4
 8006f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f6a:	3b30      	subs	r3, #48	@ 0x30
 8006f6c:	2b09      	cmp	r3, #9
 8006f6e:	d94b      	bls.n	8007008 <_svfiprintf_r+0x17c>
 8006f70:	b1b0      	cbz	r0, 8006fa0 <_svfiprintf_r+0x114>
 8006f72:	9207      	str	r2, [sp, #28]
 8006f74:	e014      	b.n	8006fa0 <_svfiprintf_r+0x114>
 8006f76:	eba0 0308 	sub.w	r3, r0, r8
 8006f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	46a2      	mov	sl, r4
 8006f84:	e7d2      	b.n	8006f2c <_svfiprintf_r+0xa0>
 8006f86:	9b03      	ldr	r3, [sp, #12]
 8006f88:	1d19      	adds	r1, r3, #4
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	9103      	str	r1, [sp, #12]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	bfbb      	ittet	lt
 8006f92:	425b      	neglt	r3, r3
 8006f94:	f042 0202 	orrlt.w	r2, r2, #2
 8006f98:	9307      	strge	r3, [sp, #28]
 8006f9a:	9307      	strlt	r3, [sp, #28]
 8006f9c:	bfb8      	it	lt
 8006f9e:	9204      	strlt	r2, [sp, #16]
 8006fa0:	7823      	ldrb	r3, [r4, #0]
 8006fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006fa4:	d10a      	bne.n	8006fbc <_svfiprintf_r+0x130>
 8006fa6:	7863      	ldrb	r3, [r4, #1]
 8006fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006faa:	d132      	bne.n	8007012 <_svfiprintf_r+0x186>
 8006fac:	9b03      	ldr	r3, [sp, #12]
 8006fae:	1d1a      	adds	r2, r3, #4
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	9203      	str	r2, [sp, #12]
 8006fb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006fb8:	3402      	adds	r4, #2
 8006fba:	9305      	str	r3, [sp, #20]
 8006fbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007080 <_svfiprintf_r+0x1f4>
 8006fc0:	7821      	ldrb	r1, [r4, #0]
 8006fc2:	2203      	movs	r2, #3
 8006fc4:	4650      	mov	r0, sl
 8006fc6:	f7f9 f923 	bl	8000210 <memchr>
 8006fca:	b138      	cbz	r0, 8006fdc <_svfiprintf_r+0x150>
 8006fcc:	9b04      	ldr	r3, [sp, #16]
 8006fce:	eba0 000a 	sub.w	r0, r0, sl
 8006fd2:	2240      	movs	r2, #64	@ 0x40
 8006fd4:	4082      	lsls	r2, r0
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	3401      	adds	r4, #1
 8006fda:	9304      	str	r3, [sp, #16]
 8006fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fe0:	4824      	ldr	r0, [pc, #144]	@ (8007074 <_svfiprintf_r+0x1e8>)
 8006fe2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fe6:	2206      	movs	r2, #6
 8006fe8:	f7f9 f912 	bl	8000210 <memchr>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d036      	beq.n	800705e <_svfiprintf_r+0x1d2>
 8006ff0:	4b21      	ldr	r3, [pc, #132]	@ (8007078 <_svfiprintf_r+0x1ec>)
 8006ff2:	bb1b      	cbnz	r3, 800703c <_svfiprintf_r+0x1b0>
 8006ff4:	9b03      	ldr	r3, [sp, #12]
 8006ff6:	3307      	adds	r3, #7
 8006ff8:	f023 0307 	bic.w	r3, r3, #7
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	9303      	str	r3, [sp, #12]
 8007000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007002:	4433      	add	r3, r6
 8007004:	9309      	str	r3, [sp, #36]	@ 0x24
 8007006:	e76a      	b.n	8006ede <_svfiprintf_r+0x52>
 8007008:	fb0c 3202 	mla	r2, ip, r2, r3
 800700c:	460c      	mov	r4, r1
 800700e:	2001      	movs	r0, #1
 8007010:	e7a8      	b.n	8006f64 <_svfiprintf_r+0xd8>
 8007012:	2300      	movs	r3, #0
 8007014:	3401      	adds	r4, #1
 8007016:	9305      	str	r3, [sp, #20]
 8007018:	4619      	mov	r1, r3
 800701a:	f04f 0c0a 	mov.w	ip, #10
 800701e:	4620      	mov	r0, r4
 8007020:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007024:	3a30      	subs	r2, #48	@ 0x30
 8007026:	2a09      	cmp	r2, #9
 8007028:	d903      	bls.n	8007032 <_svfiprintf_r+0x1a6>
 800702a:	2b00      	cmp	r3, #0
 800702c:	d0c6      	beq.n	8006fbc <_svfiprintf_r+0x130>
 800702e:	9105      	str	r1, [sp, #20]
 8007030:	e7c4      	b.n	8006fbc <_svfiprintf_r+0x130>
 8007032:	fb0c 2101 	mla	r1, ip, r1, r2
 8007036:	4604      	mov	r4, r0
 8007038:	2301      	movs	r3, #1
 800703a:	e7f0      	b.n	800701e <_svfiprintf_r+0x192>
 800703c:	ab03      	add	r3, sp, #12
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	462a      	mov	r2, r5
 8007042:	4b0e      	ldr	r3, [pc, #56]	@ (800707c <_svfiprintf_r+0x1f0>)
 8007044:	a904      	add	r1, sp, #16
 8007046:	4638      	mov	r0, r7
 8007048:	f3af 8000 	nop.w
 800704c:	1c42      	adds	r2, r0, #1
 800704e:	4606      	mov	r6, r0
 8007050:	d1d6      	bne.n	8007000 <_svfiprintf_r+0x174>
 8007052:	89ab      	ldrh	r3, [r5, #12]
 8007054:	065b      	lsls	r3, r3, #25
 8007056:	f53f af2d 	bmi.w	8006eb4 <_svfiprintf_r+0x28>
 800705a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800705c:	e72c      	b.n	8006eb8 <_svfiprintf_r+0x2c>
 800705e:	ab03      	add	r3, sp, #12
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	462a      	mov	r2, r5
 8007064:	4b05      	ldr	r3, [pc, #20]	@ (800707c <_svfiprintf_r+0x1f0>)
 8007066:	a904      	add	r1, sp, #16
 8007068:	4638      	mov	r0, r7
 800706a:	f000 f9bb 	bl	80073e4 <_printf_i>
 800706e:	e7ed      	b.n	800704c <_svfiprintf_r+0x1c0>
 8007070:	08007c29 	.word	0x08007c29
 8007074:	08007c33 	.word	0x08007c33
 8007078:	00000000 	.word	0x00000000
 800707c:	08006dd5 	.word	0x08006dd5
 8007080:	08007c2f 	.word	0x08007c2f

08007084 <__sfputc_r>:
 8007084:	6893      	ldr	r3, [r2, #8]
 8007086:	3b01      	subs	r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	b410      	push	{r4}
 800708c:	6093      	str	r3, [r2, #8]
 800708e:	da08      	bge.n	80070a2 <__sfputc_r+0x1e>
 8007090:	6994      	ldr	r4, [r2, #24]
 8007092:	42a3      	cmp	r3, r4
 8007094:	db01      	blt.n	800709a <__sfputc_r+0x16>
 8007096:	290a      	cmp	r1, #10
 8007098:	d103      	bne.n	80070a2 <__sfputc_r+0x1e>
 800709a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800709e:	f7ff bc06 	b.w	80068ae <__swbuf_r>
 80070a2:	6813      	ldr	r3, [r2, #0]
 80070a4:	1c58      	adds	r0, r3, #1
 80070a6:	6010      	str	r0, [r2, #0]
 80070a8:	7019      	strb	r1, [r3, #0]
 80070aa:	4608      	mov	r0, r1
 80070ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <__sfputs_r>:
 80070b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070b4:	4606      	mov	r6, r0
 80070b6:	460f      	mov	r7, r1
 80070b8:	4614      	mov	r4, r2
 80070ba:	18d5      	adds	r5, r2, r3
 80070bc:	42ac      	cmp	r4, r5
 80070be:	d101      	bne.n	80070c4 <__sfputs_r+0x12>
 80070c0:	2000      	movs	r0, #0
 80070c2:	e007      	b.n	80070d4 <__sfputs_r+0x22>
 80070c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c8:	463a      	mov	r2, r7
 80070ca:	4630      	mov	r0, r6
 80070cc:	f7ff ffda 	bl	8007084 <__sfputc_r>
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	d1f3      	bne.n	80070bc <__sfputs_r+0xa>
 80070d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070d8 <_vfiprintf_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	460d      	mov	r5, r1
 80070de:	b09d      	sub	sp, #116	@ 0x74
 80070e0:	4614      	mov	r4, r2
 80070e2:	4698      	mov	r8, r3
 80070e4:	4606      	mov	r6, r0
 80070e6:	b118      	cbz	r0, 80070f0 <_vfiprintf_r+0x18>
 80070e8:	6a03      	ldr	r3, [r0, #32]
 80070ea:	b90b      	cbnz	r3, 80070f0 <_vfiprintf_r+0x18>
 80070ec:	f7ff fac2 	bl	8006674 <__sinit>
 80070f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070f2:	07d9      	lsls	r1, r3, #31
 80070f4:	d405      	bmi.n	8007102 <_vfiprintf_r+0x2a>
 80070f6:	89ab      	ldrh	r3, [r5, #12]
 80070f8:	059a      	lsls	r2, r3, #22
 80070fa:	d402      	bmi.n	8007102 <_vfiprintf_r+0x2a>
 80070fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070fe:	f7ff fd40 	bl	8006b82 <__retarget_lock_acquire_recursive>
 8007102:	89ab      	ldrh	r3, [r5, #12]
 8007104:	071b      	lsls	r3, r3, #28
 8007106:	d501      	bpl.n	800710c <_vfiprintf_r+0x34>
 8007108:	692b      	ldr	r3, [r5, #16]
 800710a:	b99b      	cbnz	r3, 8007134 <_vfiprintf_r+0x5c>
 800710c:	4629      	mov	r1, r5
 800710e:	4630      	mov	r0, r6
 8007110:	f7ff fc0c 	bl	800692c <__swsetup_r>
 8007114:	b170      	cbz	r0, 8007134 <_vfiprintf_r+0x5c>
 8007116:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007118:	07dc      	lsls	r4, r3, #31
 800711a:	d504      	bpl.n	8007126 <_vfiprintf_r+0x4e>
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	b01d      	add	sp, #116	@ 0x74
 8007122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007126:	89ab      	ldrh	r3, [r5, #12]
 8007128:	0598      	lsls	r0, r3, #22
 800712a:	d4f7      	bmi.n	800711c <_vfiprintf_r+0x44>
 800712c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800712e:	f7ff fd29 	bl	8006b84 <__retarget_lock_release_recursive>
 8007132:	e7f3      	b.n	800711c <_vfiprintf_r+0x44>
 8007134:	2300      	movs	r3, #0
 8007136:	9309      	str	r3, [sp, #36]	@ 0x24
 8007138:	2320      	movs	r3, #32
 800713a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800713e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007142:	2330      	movs	r3, #48	@ 0x30
 8007144:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80072f4 <_vfiprintf_r+0x21c>
 8007148:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800714c:	f04f 0901 	mov.w	r9, #1
 8007150:	4623      	mov	r3, r4
 8007152:	469a      	mov	sl, r3
 8007154:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007158:	b10a      	cbz	r2, 800715e <_vfiprintf_r+0x86>
 800715a:	2a25      	cmp	r2, #37	@ 0x25
 800715c:	d1f9      	bne.n	8007152 <_vfiprintf_r+0x7a>
 800715e:	ebba 0b04 	subs.w	fp, sl, r4
 8007162:	d00b      	beq.n	800717c <_vfiprintf_r+0xa4>
 8007164:	465b      	mov	r3, fp
 8007166:	4622      	mov	r2, r4
 8007168:	4629      	mov	r1, r5
 800716a:	4630      	mov	r0, r6
 800716c:	f7ff ffa1 	bl	80070b2 <__sfputs_r>
 8007170:	3001      	adds	r0, #1
 8007172:	f000 80a7 	beq.w	80072c4 <_vfiprintf_r+0x1ec>
 8007176:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007178:	445a      	add	r2, fp
 800717a:	9209      	str	r2, [sp, #36]	@ 0x24
 800717c:	f89a 3000 	ldrb.w	r3, [sl]
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 809f 	beq.w	80072c4 <_vfiprintf_r+0x1ec>
 8007186:	2300      	movs	r3, #0
 8007188:	f04f 32ff 	mov.w	r2, #4294967295
 800718c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007190:	f10a 0a01 	add.w	sl, sl, #1
 8007194:	9304      	str	r3, [sp, #16]
 8007196:	9307      	str	r3, [sp, #28]
 8007198:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800719c:	931a      	str	r3, [sp, #104]	@ 0x68
 800719e:	4654      	mov	r4, sl
 80071a0:	2205      	movs	r2, #5
 80071a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a6:	4853      	ldr	r0, [pc, #332]	@ (80072f4 <_vfiprintf_r+0x21c>)
 80071a8:	f7f9 f832 	bl	8000210 <memchr>
 80071ac:	9a04      	ldr	r2, [sp, #16]
 80071ae:	b9d8      	cbnz	r0, 80071e8 <_vfiprintf_r+0x110>
 80071b0:	06d1      	lsls	r1, r2, #27
 80071b2:	bf44      	itt	mi
 80071b4:	2320      	movmi	r3, #32
 80071b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071ba:	0713      	lsls	r3, r2, #28
 80071bc:	bf44      	itt	mi
 80071be:	232b      	movmi	r3, #43	@ 0x2b
 80071c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80071c4:	f89a 3000 	ldrb.w	r3, [sl]
 80071c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80071ca:	d015      	beq.n	80071f8 <_vfiprintf_r+0x120>
 80071cc:	9a07      	ldr	r2, [sp, #28]
 80071ce:	4654      	mov	r4, sl
 80071d0:	2000      	movs	r0, #0
 80071d2:	f04f 0c0a 	mov.w	ip, #10
 80071d6:	4621      	mov	r1, r4
 80071d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071dc:	3b30      	subs	r3, #48	@ 0x30
 80071de:	2b09      	cmp	r3, #9
 80071e0:	d94b      	bls.n	800727a <_vfiprintf_r+0x1a2>
 80071e2:	b1b0      	cbz	r0, 8007212 <_vfiprintf_r+0x13a>
 80071e4:	9207      	str	r2, [sp, #28]
 80071e6:	e014      	b.n	8007212 <_vfiprintf_r+0x13a>
 80071e8:	eba0 0308 	sub.w	r3, r0, r8
 80071ec:	fa09 f303 	lsl.w	r3, r9, r3
 80071f0:	4313      	orrs	r3, r2
 80071f2:	9304      	str	r3, [sp, #16]
 80071f4:	46a2      	mov	sl, r4
 80071f6:	e7d2      	b.n	800719e <_vfiprintf_r+0xc6>
 80071f8:	9b03      	ldr	r3, [sp, #12]
 80071fa:	1d19      	adds	r1, r3, #4
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	9103      	str	r1, [sp, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	bfbb      	ittet	lt
 8007204:	425b      	neglt	r3, r3
 8007206:	f042 0202 	orrlt.w	r2, r2, #2
 800720a:	9307      	strge	r3, [sp, #28]
 800720c:	9307      	strlt	r3, [sp, #28]
 800720e:	bfb8      	it	lt
 8007210:	9204      	strlt	r2, [sp, #16]
 8007212:	7823      	ldrb	r3, [r4, #0]
 8007214:	2b2e      	cmp	r3, #46	@ 0x2e
 8007216:	d10a      	bne.n	800722e <_vfiprintf_r+0x156>
 8007218:	7863      	ldrb	r3, [r4, #1]
 800721a:	2b2a      	cmp	r3, #42	@ 0x2a
 800721c:	d132      	bne.n	8007284 <_vfiprintf_r+0x1ac>
 800721e:	9b03      	ldr	r3, [sp, #12]
 8007220:	1d1a      	adds	r2, r3, #4
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	9203      	str	r2, [sp, #12]
 8007226:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800722a:	3402      	adds	r4, #2
 800722c:	9305      	str	r3, [sp, #20]
 800722e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007304 <_vfiprintf_r+0x22c>
 8007232:	7821      	ldrb	r1, [r4, #0]
 8007234:	2203      	movs	r2, #3
 8007236:	4650      	mov	r0, sl
 8007238:	f7f8 ffea 	bl	8000210 <memchr>
 800723c:	b138      	cbz	r0, 800724e <_vfiprintf_r+0x176>
 800723e:	9b04      	ldr	r3, [sp, #16]
 8007240:	eba0 000a 	sub.w	r0, r0, sl
 8007244:	2240      	movs	r2, #64	@ 0x40
 8007246:	4082      	lsls	r2, r0
 8007248:	4313      	orrs	r3, r2
 800724a:	3401      	adds	r4, #1
 800724c:	9304      	str	r3, [sp, #16]
 800724e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007252:	4829      	ldr	r0, [pc, #164]	@ (80072f8 <_vfiprintf_r+0x220>)
 8007254:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007258:	2206      	movs	r2, #6
 800725a:	f7f8 ffd9 	bl	8000210 <memchr>
 800725e:	2800      	cmp	r0, #0
 8007260:	d03f      	beq.n	80072e2 <_vfiprintf_r+0x20a>
 8007262:	4b26      	ldr	r3, [pc, #152]	@ (80072fc <_vfiprintf_r+0x224>)
 8007264:	bb1b      	cbnz	r3, 80072ae <_vfiprintf_r+0x1d6>
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	3307      	adds	r3, #7
 800726a:	f023 0307 	bic.w	r3, r3, #7
 800726e:	3308      	adds	r3, #8
 8007270:	9303      	str	r3, [sp, #12]
 8007272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007274:	443b      	add	r3, r7
 8007276:	9309      	str	r3, [sp, #36]	@ 0x24
 8007278:	e76a      	b.n	8007150 <_vfiprintf_r+0x78>
 800727a:	fb0c 3202 	mla	r2, ip, r2, r3
 800727e:	460c      	mov	r4, r1
 8007280:	2001      	movs	r0, #1
 8007282:	e7a8      	b.n	80071d6 <_vfiprintf_r+0xfe>
 8007284:	2300      	movs	r3, #0
 8007286:	3401      	adds	r4, #1
 8007288:	9305      	str	r3, [sp, #20]
 800728a:	4619      	mov	r1, r3
 800728c:	f04f 0c0a 	mov.w	ip, #10
 8007290:	4620      	mov	r0, r4
 8007292:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007296:	3a30      	subs	r2, #48	@ 0x30
 8007298:	2a09      	cmp	r2, #9
 800729a:	d903      	bls.n	80072a4 <_vfiprintf_r+0x1cc>
 800729c:	2b00      	cmp	r3, #0
 800729e:	d0c6      	beq.n	800722e <_vfiprintf_r+0x156>
 80072a0:	9105      	str	r1, [sp, #20]
 80072a2:	e7c4      	b.n	800722e <_vfiprintf_r+0x156>
 80072a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80072a8:	4604      	mov	r4, r0
 80072aa:	2301      	movs	r3, #1
 80072ac:	e7f0      	b.n	8007290 <_vfiprintf_r+0x1b8>
 80072ae:	ab03      	add	r3, sp, #12
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	462a      	mov	r2, r5
 80072b4:	4b12      	ldr	r3, [pc, #72]	@ (8007300 <_vfiprintf_r+0x228>)
 80072b6:	a904      	add	r1, sp, #16
 80072b8:	4630      	mov	r0, r6
 80072ba:	f3af 8000 	nop.w
 80072be:	4607      	mov	r7, r0
 80072c0:	1c78      	adds	r0, r7, #1
 80072c2:	d1d6      	bne.n	8007272 <_vfiprintf_r+0x19a>
 80072c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072c6:	07d9      	lsls	r1, r3, #31
 80072c8:	d405      	bmi.n	80072d6 <_vfiprintf_r+0x1fe>
 80072ca:	89ab      	ldrh	r3, [r5, #12]
 80072cc:	059a      	lsls	r2, r3, #22
 80072ce:	d402      	bmi.n	80072d6 <_vfiprintf_r+0x1fe>
 80072d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072d2:	f7ff fc57 	bl	8006b84 <__retarget_lock_release_recursive>
 80072d6:	89ab      	ldrh	r3, [r5, #12]
 80072d8:	065b      	lsls	r3, r3, #25
 80072da:	f53f af1f 	bmi.w	800711c <_vfiprintf_r+0x44>
 80072de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80072e0:	e71e      	b.n	8007120 <_vfiprintf_r+0x48>
 80072e2:	ab03      	add	r3, sp, #12
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	462a      	mov	r2, r5
 80072e8:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <_vfiprintf_r+0x228>)
 80072ea:	a904      	add	r1, sp, #16
 80072ec:	4630      	mov	r0, r6
 80072ee:	f000 f879 	bl	80073e4 <_printf_i>
 80072f2:	e7e4      	b.n	80072be <_vfiprintf_r+0x1e6>
 80072f4:	08007c29 	.word	0x08007c29
 80072f8:	08007c33 	.word	0x08007c33
 80072fc:	00000000 	.word	0x00000000
 8007300:	080070b3 	.word	0x080070b3
 8007304:	08007c2f 	.word	0x08007c2f

08007308 <_printf_common>:
 8007308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	4616      	mov	r6, r2
 800730e:	4698      	mov	r8, r3
 8007310:	688a      	ldr	r2, [r1, #8]
 8007312:	690b      	ldr	r3, [r1, #16]
 8007314:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007318:	4293      	cmp	r3, r2
 800731a:	bfb8      	it	lt
 800731c:	4613      	movlt	r3, r2
 800731e:	6033      	str	r3, [r6, #0]
 8007320:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007324:	4607      	mov	r7, r0
 8007326:	460c      	mov	r4, r1
 8007328:	b10a      	cbz	r2, 800732e <_printf_common+0x26>
 800732a:	3301      	adds	r3, #1
 800732c:	6033      	str	r3, [r6, #0]
 800732e:	6823      	ldr	r3, [r4, #0]
 8007330:	0699      	lsls	r1, r3, #26
 8007332:	bf42      	ittt	mi
 8007334:	6833      	ldrmi	r3, [r6, #0]
 8007336:	3302      	addmi	r3, #2
 8007338:	6033      	strmi	r3, [r6, #0]
 800733a:	6825      	ldr	r5, [r4, #0]
 800733c:	f015 0506 	ands.w	r5, r5, #6
 8007340:	d106      	bne.n	8007350 <_printf_common+0x48>
 8007342:	f104 0a19 	add.w	sl, r4, #25
 8007346:	68e3      	ldr	r3, [r4, #12]
 8007348:	6832      	ldr	r2, [r6, #0]
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	42ab      	cmp	r3, r5
 800734e:	dc26      	bgt.n	800739e <_printf_common+0x96>
 8007350:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007354:	6822      	ldr	r2, [r4, #0]
 8007356:	3b00      	subs	r3, #0
 8007358:	bf18      	it	ne
 800735a:	2301      	movne	r3, #1
 800735c:	0692      	lsls	r2, r2, #26
 800735e:	d42b      	bmi.n	80073b8 <_printf_common+0xb0>
 8007360:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007364:	4641      	mov	r1, r8
 8007366:	4638      	mov	r0, r7
 8007368:	47c8      	blx	r9
 800736a:	3001      	adds	r0, #1
 800736c:	d01e      	beq.n	80073ac <_printf_common+0xa4>
 800736e:	6823      	ldr	r3, [r4, #0]
 8007370:	6922      	ldr	r2, [r4, #16]
 8007372:	f003 0306 	and.w	r3, r3, #6
 8007376:	2b04      	cmp	r3, #4
 8007378:	bf02      	ittt	eq
 800737a:	68e5      	ldreq	r5, [r4, #12]
 800737c:	6833      	ldreq	r3, [r6, #0]
 800737e:	1aed      	subeq	r5, r5, r3
 8007380:	68a3      	ldr	r3, [r4, #8]
 8007382:	bf0c      	ite	eq
 8007384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007388:	2500      	movne	r5, #0
 800738a:	4293      	cmp	r3, r2
 800738c:	bfc4      	itt	gt
 800738e:	1a9b      	subgt	r3, r3, r2
 8007390:	18ed      	addgt	r5, r5, r3
 8007392:	2600      	movs	r6, #0
 8007394:	341a      	adds	r4, #26
 8007396:	42b5      	cmp	r5, r6
 8007398:	d11a      	bne.n	80073d0 <_printf_common+0xc8>
 800739a:	2000      	movs	r0, #0
 800739c:	e008      	b.n	80073b0 <_printf_common+0xa8>
 800739e:	2301      	movs	r3, #1
 80073a0:	4652      	mov	r2, sl
 80073a2:	4641      	mov	r1, r8
 80073a4:	4638      	mov	r0, r7
 80073a6:	47c8      	blx	r9
 80073a8:	3001      	adds	r0, #1
 80073aa:	d103      	bne.n	80073b4 <_printf_common+0xac>
 80073ac:	f04f 30ff 	mov.w	r0, #4294967295
 80073b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073b4:	3501      	adds	r5, #1
 80073b6:	e7c6      	b.n	8007346 <_printf_common+0x3e>
 80073b8:	18e1      	adds	r1, r4, r3
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	2030      	movs	r0, #48	@ 0x30
 80073be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80073c2:	4422      	add	r2, r4
 80073c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80073c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80073cc:	3302      	adds	r3, #2
 80073ce:	e7c7      	b.n	8007360 <_printf_common+0x58>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4622      	mov	r2, r4
 80073d4:	4641      	mov	r1, r8
 80073d6:	4638      	mov	r0, r7
 80073d8:	47c8      	blx	r9
 80073da:	3001      	adds	r0, #1
 80073dc:	d0e6      	beq.n	80073ac <_printf_common+0xa4>
 80073de:	3601      	adds	r6, #1
 80073e0:	e7d9      	b.n	8007396 <_printf_common+0x8e>
	...

080073e4 <_printf_i>:
 80073e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073e8:	7e0f      	ldrb	r7, [r1, #24]
 80073ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80073ec:	2f78      	cmp	r7, #120	@ 0x78
 80073ee:	4691      	mov	r9, r2
 80073f0:	4680      	mov	r8, r0
 80073f2:	460c      	mov	r4, r1
 80073f4:	469a      	mov	sl, r3
 80073f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80073fa:	d807      	bhi.n	800740c <_printf_i+0x28>
 80073fc:	2f62      	cmp	r7, #98	@ 0x62
 80073fe:	d80a      	bhi.n	8007416 <_printf_i+0x32>
 8007400:	2f00      	cmp	r7, #0
 8007402:	f000 80d2 	beq.w	80075aa <_printf_i+0x1c6>
 8007406:	2f58      	cmp	r7, #88	@ 0x58
 8007408:	f000 80b9 	beq.w	800757e <_printf_i+0x19a>
 800740c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007414:	e03a      	b.n	800748c <_printf_i+0xa8>
 8007416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800741a:	2b15      	cmp	r3, #21
 800741c:	d8f6      	bhi.n	800740c <_printf_i+0x28>
 800741e:	a101      	add	r1, pc, #4	@ (adr r1, 8007424 <_printf_i+0x40>)
 8007420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007424:	0800747d 	.word	0x0800747d
 8007428:	08007491 	.word	0x08007491
 800742c:	0800740d 	.word	0x0800740d
 8007430:	0800740d 	.word	0x0800740d
 8007434:	0800740d 	.word	0x0800740d
 8007438:	0800740d 	.word	0x0800740d
 800743c:	08007491 	.word	0x08007491
 8007440:	0800740d 	.word	0x0800740d
 8007444:	0800740d 	.word	0x0800740d
 8007448:	0800740d 	.word	0x0800740d
 800744c:	0800740d 	.word	0x0800740d
 8007450:	08007591 	.word	0x08007591
 8007454:	080074bb 	.word	0x080074bb
 8007458:	0800754b 	.word	0x0800754b
 800745c:	0800740d 	.word	0x0800740d
 8007460:	0800740d 	.word	0x0800740d
 8007464:	080075b3 	.word	0x080075b3
 8007468:	0800740d 	.word	0x0800740d
 800746c:	080074bb 	.word	0x080074bb
 8007470:	0800740d 	.word	0x0800740d
 8007474:	0800740d 	.word	0x0800740d
 8007478:	08007553 	.word	0x08007553
 800747c:	6833      	ldr	r3, [r6, #0]
 800747e:	1d1a      	adds	r2, r3, #4
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6032      	str	r2, [r6, #0]
 8007484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800748c:	2301      	movs	r3, #1
 800748e:	e09d      	b.n	80075cc <_printf_i+0x1e8>
 8007490:	6833      	ldr	r3, [r6, #0]
 8007492:	6820      	ldr	r0, [r4, #0]
 8007494:	1d19      	adds	r1, r3, #4
 8007496:	6031      	str	r1, [r6, #0]
 8007498:	0606      	lsls	r6, r0, #24
 800749a:	d501      	bpl.n	80074a0 <_printf_i+0xbc>
 800749c:	681d      	ldr	r5, [r3, #0]
 800749e:	e003      	b.n	80074a8 <_printf_i+0xc4>
 80074a0:	0645      	lsls	r5, r0, #25
 80074a2:	d5fb      	bpl.n	800749c <_printf_i+0xb8>
 80074a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80074a8:	2d00      	cmp	r5, #0
 80074aa:	da03      	bge.n	80074b4 <_printf_i+0xd0>
 80074ac:	232d      	movs	r3, #45	@ 0x2d
 80074ae:	426d      	negs	r5, r5
 80074b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074b4:	4859      	ldr	r0, [pc, #356]	@ (800761c <_printf_i+0x238>)
 80074b6:	230a      	movs	r3, #10
 80074b8:	e011      	b.n	80074de <_printf_i+0xfa>
 80074ba:	6821      	ldr	r1, [r4, #0]
 80074bc:	6833      	ldr	r3, [r6, #0]
 80074be:	0608      	lsls	r0, r1, #24
 80074c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80074c4:	d402      	bmi.n	80074cc <_printf_i+0xe8>
 80074c6:	0649      	lsls	r1, r1, #25
 80074c8:	bf48      	it	mi
 80074ca:	b2ad      	uxthmi	r5, r5
 80074cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80074ce:	4853      	ldr	r0, [pc, #332]	@ (800761c <_printf_i+0x238>)
 80074d0:	6033      	str	r3, [r6, #0]
 80074d2:	bf14      	ite	ne
 80074d4:	230a      	movne	r3, #10
 80074d6:	2308      	moveq	r3, #8
 80074d8:	2100      	movs	r1, #0
 80074da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80074de:	6866      	ldr	r6, [r4, #4]
 80074e0:	60a6      	str	r6, [r4, #8]
 80074e2:	2e00      	cmp	r6, #0
 80074e4:	bfa2      	ittt	ge
 80074e6:	6821      	ldrge	r1, [r4, #0]
 80074e8:	f021 0104 	bicge.w	r1, r1, #4
 80074ec:	6021      	strge	r1, [r4, #0]
 80074ee:	b90d      	cbnz	r5, 80074f4 <_printf_i+0x110>
 80074f0:	2e00      	cmp	r6, #0
 80074f2:	d04b      	beq.n	800758c <_printf_i+0x1a8>
 80074f4:	4616      	mov	r6, r2
 80074f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80074fa:	fb03 5711 	mls	r7, r3, r1, r5
 80074fe:	5dc7      	ldrb	r7, [r0, r7]
 8007500:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007504:	462f      	mov	r7, r5
 8007506:	42bb      	cmp	r3, r7
 8007508:	460d      	mov	r5, r1
 800750a:	d9f4      	bls.n	80074f6 <_printf_i+0x112>
 800750c:	2b08      	cmp	r3, #8
 800750e:	d10b      	bne.n	8007528 <_printf_i+0x144>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	07df      	lsls	r7, r3, #31
 8007514:	d508      	bpl.n	8007528 <_printf_i+0x144>
 8007516:	6923      	ldr	r3, [r4, #16]
 8007518:	6861      	ldr	r1, [r4, #4]
 800751a:	4299      	cmp	r1, r3
 800751c:	bfde      	ittt	le
 800751e:	2330      	movle	r3, #48	@ 0x30
 8007520:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007524:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007528:	1b92      	subs	r2, r2, r6
 800752a:	6122      	str	r2, [r4, #16]
 800752c:	f8cd a000 	str.w	sl, [sp]
 8007530:	464b      	mov	r3, r9
 8007532:	aa03      	add	r2, sp, #12
 8007534:	4621      	mov	r1, r4
 8007536:	4640      	mov	r0, r8
 8007538:	f7ff fee6 	bl	8007308 <_printf_common>
 800753c:	3001      	adds	r0, #1
 800753e:	d14a      	bne.n	80075d6 <_printf_i+0x1f2>
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	b004      	add	sp, #16
 8007546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	f043 0320 	orr.w	r3, r3, #32
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	4833      	ldr	r0, [pc, #204]	@ (8007620 <_printf_i+0x23c>)
 8007554:	2778      	movs	r7, #120	@ 0x78
 8007556:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	6831      	ldr	r1, [r6, #0]
 800755e:	061f      	lsls	r7, r3, #24
 8007560:	f851 5b04 	ldr.w	r5, [r1], #4
 8007564:	d402      	bmi.n	800756c <_printf_i+0x188>
 8007566:	065f      	lsls	r7, r3, #25
 8007568:	bf48      	it	mi
 800756a:	b2ad      	uxthmi	r5, r5
 800756c:	6031      	str	r1, [r6, #0]
 800756e:	07d9      	lsls	r1, r3, #31
 8007570:	bf44      	itt	mi
 8007572:	f043 0320 	orrmi.w	r3, r3, #32
 8007576:	6023      	strmi	r3, [r4, #0]
 8007578:	b11d      	cbz	r5, 8007582 <_printf_i+0x19e>
 800757a:	2310      	movs	r3, #16
 800757c:	e7ac      	b.n	80074d8 <_printf_i+0xf4>
 800757e:	4827      	ldr	r0, [pc, #156]	@ (800761c <_printf_i+0x238>)
 8007580:	e7e9      	b.n	8007556 <_printf_i+0x172>
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	f023 0320 	bic.w	r3, r3, #32
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	e7f6      	b.n	800757a <_printf_i+0x196>
 800758c:	4616      	mov	r6, r2
 800758e:	e7bd      	b.n	800750c <_printf_i+0x128>
 8007590:	6833      	ldr	r3, [r6, #0]
 8007592:	6825      	ldr	r5, [r4, #0]
 8007594:	6961      	ldr	r1, [r4, #20]
 8007596:	1d18      	adds	r0, r3, #4
 8007598:	6030      	str	r0, [r6, #0]
 800759a:	062e      	lsls	r6, r5, #24
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	d501      	bpl.n	80075a4 <_printf_i+0x1c0>
 80075a0:	6019      	str	r1, [r3, #0]
 80075a2:	e002      	b.n	80075aa <_printf_i+0x1c6>
 80075a4:	0668      	lsls	r0, r5, #25
 80075a6:	d5fb      	bpl.n	80075a0 <_printf_i+0x1bc>
 80075a8:	8019      	strh	r1, [r3, #0]
 80075aa:	2300      	movs	r3, #0
 80075ac:	6123      	str	r3, [r4, #16]
 80075ae:	4616      	mov	r6, r2
 80075b0:	e7bc      	b.n	800752c <_printf_i+0x148>
 80075b2:	6833      	ldr	r3, [r6, #0]
 80075b4:	1d1a      	adds	r2, r3, #4
 80075b6:	6032      	str	r2, [r6, #0]
 80075b8:	681e      	ldr	r6, [r3, #0]
 80075ba:	6862      	ldr	r2, [r4, #4]
 80075bc:	2100      	movs	r1, #0
 80075be:	4630      	mov	r0, r6
 80075c0:	f7f8 fe26 	bl	8000210 <memchr>
 80075c4:	b108      	cbz	r0, 80075ca <_printf_i+0x1e6>
 80075c6:	1b80      	subs	r0, r0, r6
 80075c8:	6060      	str	r0, [r4, #4]
 80075ca:	6863      	ldr	r3, [r4, #4]
 80075cc:	6123      	str	r3, [r4, #16]
 80075ce:	2300      	movs	r3, #0
 80075d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075d4:	e7aa      	b.n	800752c <_printf_i+0x148>
 80075d6:	6923      	ldr	r3, [r4, #16]
 80075d8:	4632      	mov	r2, r6
 80075da:	4649      	mov	r1, r9
 80075dc:	4640      	mov	r0, r8
 80075de:	47d0      	blx	sl
 80075e0:	3001      	adds	r0, #1
 80075e2:	d0ad      	beq.n	8007540 <_printf_i+0x15c>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	079b      	lsls	r3, r3, #30
 80075e8:	d413      	bmi.n	8007612 <_printf_i+0x22e>
 80075ea:	68e0      	ldr	r0, [r4, #12]
 80075ec:	9b03      	ldr	r3, [sp, #12]
 80075ee:	4298      	cmp	r0, r3
 80075f0:	bfb8      	it	lt
 80075f2:	4618      	movlt	r0, r3
 80075f4:	e7a6      	b.n	8007544 <_printf_i+0x160>
 80075f6:	2301      	movs	r3, #1
 80075f8:	4632      	mov	r2, r6
 80075fa:	4649      	mov	r1, r9
 80075fc:	4640      	mov	r0, r8
 80075fe:	47d0      	blx	sl
 8007600:	3001      	adds	r0, #1
 8007602:	d09d      	beq.n	8007540 <_printf_i+0x15c>
 8007604:	3501      	adds	r5, #1
 8007606:	68e3      	ldr	r3, [r4, #12]
 8007608:	9903      	ldr	r1, [sp, #12]
 800760a:	1a5b      	subs	r3, r3, r1
 800760c:	42ab      	cmp	r3, r5
 800760e:	dcf2      	bgt.n	80075f6 <_printf_i+0x212>
 8007610:	e7eb      	b.n	80075ea <_printf_i+0x206>
 8007612:	2500      	movs	r5, #0
 8007614:	f104 0619 	add.w	r6, r4, #25
 8007618:	e7f5      	b.n	8007606 <_printf_i+0x222>
 800761a:	bf00      	nop
 800761c:	08007c3a 	.word	0x08007c3a
 8007620:	08007c4b 	.word	0x08007c4b

08007624 <__sflush_r>:
 8007624:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800762c:	0716      	lsls	r6, r2, #28
 800762e:	4605      	mov	r5, r0
 8007630:	460c      	mov	r4, r1
 8007632:	d454      	bmi.n	80076de <__sflush_r+0xba>
 8007634:	684b      	ldr	r3, [r1, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	dc02      	bgt.n	8007640 <__sflush_r+0x1c>
 800763a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800763c:	2b00      	cmp	r3, #0
 800763e:	dd48      	ble.n	80076d2 <__sflush_r+0xae>
 8007640:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007642:	2e00      	cmp	r6, #0
 8007644:	d045      	beq.n	80076d2 <__sflush_r+0xae>
 8007646:	2300      	movs	r3, #0
 8007648:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800764c:	682f      	ldr	r7, [r5, #0]
 800764e:	6a21      	ldr	r1, [r4, #32]
 8007650:	602b      	str	r3, [r5, #0]
 8007652:	d030      	beq.n	80076b6 <__sflush_r+0x92>
 8007654:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	0759      	lsls	r1, r3, #29
 800765a:	d505      	bpl.n	8007668 <__sflush_r+0x44>
 800765c:	6863      	ldr	r3, [r4, #4]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007662:	b10b      	cbz	r3, 8007668 <__sflush_r+0x44>
 8007664:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007666:	1ad2      	subs	r2, r2, r3
 8007668:	2300      	movs	r3, #0
 800766a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800766c:	6a21      	ldr	r1, [r4, #32]
 800766e:	4628      	mov	r0, r5
 8007670:	47b0      	blx	r6
 8007672:	1c43      	adds	r3, r0, #1
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	d106      	bne.n	8007686 <__sflush_r+0x62>
 8007678:	6829      	ldr	r1, [r5, #0]
 800767a:	291d      	cmp	r1, #29
 800767c:	d82b      	bhi.n	80076d6 <__sflush_r+0xb2>
 800767e:	4a2a      	ldr	r2, [pc, #168]	@ (8007728 <__sflush_r+0x104>)
 8007680:	410a      	asrs	r2, r1
 8007682:	07d6      	lsls	r6, r2, #31
 8007684:	d427      	bmi.n	80076d6 <__sflush_r+0xb2>
 8007686:	2200      	movs	r2, #0
 8007688:	6062      	str	r2, [r4, #4]
 800768a:	04d9      	lsls	r1, r3, #19
 800768c:	6922      	ldr	r2, [r4, #16]
 800768e:	6022      	str	r2, [r4, #0]
 8007690:	d504      	bpl.n	800769c <__sflush_r+0x78>
 8007692:	1c42      	adds	r2, r0, #1
 8007694:	d101      	bne.n	800769a <__sflush_r+0x76>
 8007696:	682b      	ldr	r3, [r5, #0]
 8007698:	b903      	cbnz	r3, 800769c <__sflush_r+0x78>
 800769a:	6560      	str	r0, [r4, #84]	@ 0x54
 800769c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800769e:	602f      	str	r7, [r5, #0]
 80076a0:	b1b9      	cbz	r1, 80076d2 <__sflush_r+0xae>
 80076a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076a6:	4299      	cmp	r1, r3
 80076a8:	d002      	beq.n	80076b0 <__sflush_r+0x8c>
 80076aa:	4628      	mov	r0, r5
 80076ac:	f7ff fa92 	bl	8006bd4 <_free_r>
 80076b0:	2300      	movs	r3, #0
 80076b2:	6363      	str	r3, [r4, #52]	@ 0x34
 80076b4:	e00d      	b.n	80076d2 <__sflush_r+0xae>
 80076b6:	2301      	movs	r3, #1
 80076b8:	4628      	mov	r0, r5
 80076ba:	47b0      	blx	r6
 80076bc:	4602      	mov	r2, r0
 80076be:	1c50      	adds	r0, r2, #1
 80076c0:	d1c9      	bne.n	8007656 <__sflush_r+0x32>
 80076c2:	682b      	ldr	r3, [r5, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d0c6      	beq.n	8007656 <__sflush_r+0x32>
 80076c8:	2b1d      	cmp	r3, #29
 80076ca:	d001      	beq.n	80076d0 <__sflush_r+0xac>
 80076cc:	2b16      	cmp	r3, #22
 80076ce:	d11e      	bne.n	800770e <__sflush_r+0xea>
 80076d0:	602f      	str	r7, [r5, #0]
 80076d2:	2000      	movs	r0, #0
 80076d4:	e022      	b.n	800771c <__sflush_r+0xf8>
 80076d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076da:	b21b      	sxth	r3, r3
 80076dc:	e01b      	b.n	8007716 <__sflush_r+0xf2>
 80076de:	690f      	ldr	r7, [r1, #16]
 80076e0:	2f00      	cmp	r7, #0
 80076e2:	d0f6      	beq.n	80076d2 <__sflush_r+0xae>
 80076e4:	0793      	lsls	r3, r2, #30
 80076e6:	680e      	ldr	r6, [r1, #0]
 80076e8:	bf08      	it	eq
 80076ea:	694b      	ldreq	r3, [r1, #20]
 80076ec:	600f      	str	r7, [r1, #0]
 80076ee:	bf18      	it	ne
 80076f0:	2300      	movne	r3, #0
 80076f2:	eba6 0807 	sub.w	r8, r6, r7
 80076f6:	608b      	str	r3, [r1, #8]
 80076f8:	f1b8 0f00 	cmp.w	r8, #0
 80076fc:	dde9      	ble.n	80076d2 <__sflush_r+0xae>
 80076fe:	6a21      	ldr	r1, [r4, #32]
 8007700:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007702:	4643      	mov	r3, r8
 8007704:	463a      	mov	r2, r7
 8007706:	4628      	mov	r0, r5
 8007708:	47b0      	blx	r6
 800770a:	2800      	cmp	r0, #0
 800770c:	dc08      	bgt.n	8007720 <__sflush_r+0xfc>
 800770e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007716:	81a3      	strh	r3, [r4, #12]
 8007718:	f04f 30ff 	mov.w	r0, #4294967295
 800771c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007720:	4407      	add	r7, r0
 8007722:	eba8 0800 	sub.w	r8, r8, r0
 8007726:	e7e7      	b.n	80076f8 <__sflush_r+0xd4>
 8007728:	dfbffffe 	.word	0xdfbffffe

0800772c <_fflush_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	690b      	ldr	r3, [r1, #16]
 8007730:	4605      	mov	r5, r0
 8007732:	460c      	mov	r4, r1
 8007734:	b913      	cbnz	r3, 800773c <_fflush_r+0x10>
 8007736:	2500      	movs	r5, #0
 8007738:	4628      	mov	r0, r5
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	b118      	cbz	r0, 8007746 <_fflush_r+0x1a>
 800773e:	6a03      	ldr	r3, [r0, #32]
 8007740:	b90b      	cbnz	r3, 8007746 <_fflush_r+0x1a>
 8007742:	f7fe ff97 	bl	8006674 <__sinit>
 8007746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0f3      	beq.n	8007736 <_fflush_r+0xa>
 800774e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007750:	07d0      	lsls	r0, r2, #31
 8007752:	d404      	bmi.n	800775e <_fflush_r+0x32>
 8007754:	0599      	lsls	r1, r3, #22
 8007756:	d402      	bmi.n	800775e <_fflush_r+0x32>
 8007758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800775a:	f7ff fa12 	bl	8006b82 <__retarget_lock_acquire_recursive>
 800775e:	4628      	mov	r0, r5
 8007760:	4621      	mov	r1, r4
 8007762:	f7ff ff5f 	bl	8007624 <__sflush_r>
 8007766:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007768:	07da      	lsls	r2, r3, #31
 800776a:	4605      	mov	r5, r0
 800776c:	d4e4      	bmi.n	8007738 <_fflush_r+0xc>
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	059b      	lsls	r3, r3, #22
 8007772:	d4e1      	bmi.n	8007738 <_fflush_r+0xc>
 8007774:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007776:	f7ff fa05 	bl	8006b84 <__retarget_lock_release_recursive>
 800777a:	e7dd      	b.n	8007738 <_fflush_r+0xc>

0800777c <fiprintf>:
 800777c:	b40e      	push	{r1, r2, r3}
 800777e:	b503      	push	{r0, r1, lr}
 8007780:	4601      	mov	r1, r0
 8007782:	ab03      	add	r3, sp, #12
 8007784:	4805      	ldr	r0, [pc, #20]	@ (800779c <fiprintf+0x20>)
 8007786:	f853 2b04 	ldr.w	r2, [r3], #4
 800778a:	6800      	ldr	r0, [r0, #0]
 800778c:	9301      	str	r3, [sp, #4]
 800778e:	f7ff fca3 	bl	80070d8 <_vfiprintf_r>
 8007792:	b002      	add	sp, #8
 8007794:	f85d eb04 	ldr.w	lr, [sp], #4
 8007798:	b003      	add	sp, #12
 800779a:	4770      	bx	lr
 800779c:	20000018 	.word	0x20000018

080077a0 <__swhatbuf_r>:
 80077a0:	b570      	push	{r4, r5, r6, lr}
 80077a2:	460c      	mov	r4, r1
 80077a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a8:	2900      	cmp	r1, #0
 80077aa:	b096      	sub	sp, #88	@ 0x58
 80077ac:	4615      	mov	r5, r2
 80077ae:	461e      	mov	r6, r3
 80077b0:	da0d      	bge.n	80077ce <__swhatbuf_r+0x2e>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80077b8:	f04f 0100 	mov.w	r1, #0
 80077bc:	bf14      	ite	ne
 80077be:	2340      	movne	r3, #64	@ 0x40
 80077c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80077c4:	2000      	movs	r0, #0
 80077c6:	6031      	str	r1, [r6, #0]
 80077c8:	602b      	str	r3, [r5, #0]
 80077ca:	b016      	add	sp, #88	@ 0x58
 80077cc:	bd70      	pop	{r4, r5, r6, pc}
 80077ce:	466a      	mov	r2, sp
 80077d0:	f000 f862 	bl	8007898 <_fstat_r>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	dbec      	blt.n	80077b2 <__swhatbuf_r+0x12>
 80077d8:	9901      	ldr	r1, [sp, #4]
 80077da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80077de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80077e2:	4259      	negs	r1, r3
 80077e4:	4159      	adcs	r1, r3
 80077e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80077ea:	e7eb      	b.n	80077c4 <__swhatbuf_r+0x24>

080077ec <__smakebuf_r>:
 80077ec:	898b      	ldrh	r3, [r1, #12]
 80077ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077f0:	079d      	lsls	r5, r3, #30
 80077f2:	4606      	mov	r6, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	d507      	bpl.n	8007808 <__smakebuf_r+0x1c>
 80077f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	2301      	movs	r3, #1
 8007802:	6163      	str	r3, [r4, #20]
 8007804:	b003      	add	sp, #12
 8007806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007808:	ab01      	add	r3, sp, #4
 800780a:	466a      	mov	r2, sp
 800780c:	f7ff ffc8 	bl	80077a0 <__swhatbuf_r>
 8007810:	9f00      	ldr	r7, [sp, #0]
 8007812:	4605      	mov	r5, r0
 8007814:	4639      	mov	r1, r7
 8007816:	4630      	mov	r0, r6
 8007818:	f7ff fa50 	bl	8006cbc <_malloc_r>
 800781c:	b948      	cbnz	r0, 8007832 <__smakebuf_r+0x46>
 800781e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007822:	059a      	lsls	r2, r3, #22
 8007824:	d4ee      	bmi.n	8007804 <__smakebuf_r+0x18>
 8007826:	f023 0303 	bic.w	r3, r3, #3
 800782a:	f043 0302 	orr.w	r3, r3, #2
 800782e:	81a3      	strh	r3, [r4, #12]
 8007830:	e7e2      	b.n	80077f8 <__smakebuf_r+0xc>
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	6020      	str	r0, [r4, #0]
 8007836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800783a:	81a3      	strh	r3, [r4, #12]
 800783c:	9b01      	ldr	r3, [sp, #4]
 800783e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007842:	b15b      	cbz	r3, 800785c <__smakebuf_r+0x70>
 8007844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007848:	4630      	mov	r0, r6
 800784a:	f000 f837 	bl	80078bc <_isatty_r>
 800784e:	b128      	cbz	r0, 800785c <__smakebuf_r+0x70>
 8007850:	89a3      	ldrh	r3, [r4, #12]
 8007852:	f023 0303 	bic.w	r3, r3, #3
 8007856:	f043 0301 	orr.w	r3, r3, #1
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	89a3      	ldrh	r3, [r4, #12]
 800785e:	431d      	orrs	r5, r3
 8007860:	81a5      	strh	r5, [r4, #12]
 8007862:	e7cf      	b.n	8007804 <__smakebuf_r+0x18>

08007864 <memmove>:
 8007864:	4288      	cmp	r0, r1
 8007866:	b510      	push	{r4, lr}
 8007868:	eb01 0402 	add.w	r4, r1, r2
 800786c:	d902      	bls.n	8007874 <memmove+0x10>
 800786e:	4284      	cmp	r4, r0
 8007870:	4623      	mov	r3, r4
 8007872:	d807      	bhi.n	8007884 <memmove+0x20>
 8007874:	1e43      	subs	r3, r0, #1
 8007876:	42a1      	cmp	r1, r4
 8007878:	d008      	beq.n	800788c <memmove+0x28>
 800787a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800787e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007882:	e7f8      	b.n	8007876 <memmove+0x12>
 8007884:	4402      	add	r2, r0
 8007886:	4601      	mov	r1, r0
 8007888:	428a      	cmp	r2, r1
 800788a:	d100      	bne.n	800788e <memmove+0x2a>
 800788c:	bd10      	pop	{r4, pc}
 800788e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007892:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007896:	e7f7      	b.n	8007888 <memmove+0x24>

08007898 <_fstat_r>:
 8007898:	b538      	push	{r3, r4, r5, lr}
 800789a:	4d07      	ldr	r5, [pc, #28]	@ (80078b8 <_fstat_r+0x20>)
 800789c:	2300      	movs	r3, #0
 800789e:	4604      	mov	r4, r0
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	f7fa f997 	bl	8001bd8 <_fstat>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d102      	bne.n	80078b4 <_fstat_r+0x1c>
 80078ae:	682b      	ldr	r3, [r5, #0]
 80078b0:	b103      	cbz	r3, 80078b4 <_fstat_r+0x1c>
 80078b2:	6023      	str	r3, [r4, #0]
 80078b4:	bd38      	pop	{r3, r4, r5, pc}
 80078b6:	bf00      	nop
 80078b8:	20000488 	.word	0x20000488

080078bc <_isatty_r>:
 80078bc:	b538      	push	{r3, r4, r5, lr}
 80078be:	4d06      	ldr	r5, [pc, #24]	@ (80078d8 <_isatty_r+0x1c>)
 80078c0:	2300      	movs	r3, #0
 80078c2:	4604      	mov	r4, r0
 80078c4:	4608      	mov	r0, r1
 80078c6:	602b      	str	r3, [r5, #0]
 80078c8:	f7fa f996 	bl	8001bf8 <_isatty>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_isatty_r+0x1a>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_isatty_r+0x1a>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	20000488 	.word	0x20000488

080078dc <_sbrk_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d06      	ldr	r5, [pc, #24]	@ (80078f8 <_sbrk_r+0x1c>)
 80078e0:	2300      	movs	r3, #0
 80078e2:	4604      	mov	r4, r0
 80078e4:	4608      	mov	r0, r1
 80078e6:	602b      	str	r3, [r5, #0]
 80078e8:	f7fa f99e 	bl	8001c28 <_sbrk>
 80078ec:	1c43      	adds	r3, r0, #1
 80078ee:	d102      	bne.n	80078f6 <_sbrk_r+0x1a>
 80078f0:	682b      	ldr	r3, [r5, #0]
 80078f2:	b103      	cbz	r3, 80078f6 <_sbrk_r+0x1a>
 80078f4:	6023      	str	r3, [r4, #0]
 80078f6:	bd38      	pop	{r3, r4, r5, pc}
 80078f8:	20000488 	.word	0x20000488

080078fc <memcpy>:
 80078fc:	440a      	add	r2, r1
 80078fe:	4291      	cmp	r1, r2
 8007900:	f100 33ff 	add.w	r3, r0, #4294967295
 8007904:	d100      	bne.n	8007908 <memcpy+0xc>
 8007906:	4770      	bx	lr
 8007908:	b510      	push	{r4, lr}
 800790a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800790e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007912:	4291      	cmp	r1, r2
 8007914:	d1f9      	bne.n	800790a <memcpy+0xe>
 8007916:	bd10      	pop	{r4, pc}

08007918 <abort>:
 8007918:	b508      	push	{r3, lr}
 800791a:	2006      	movs	r0, #6
 800791c:	f000 f85a 	bl	80079d4 <raise>
 8007920:	2001      	movs	r0, #1
 8007922:	f7fa f909 	bl	8001b38 <_exit>

08007926 <_realloc_r>:
 8007926:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800792a:	4680      	mov	r8, r0
 800792c:	4615      	mov	r5, r2
 800792e:	460c      	mov	r4, r1
 8007930:	b921      	cbnz	r1, 800793c <_realloc_r+0x16>
 8007932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007936:	4611      	mov	r1, r2
 8007938:	f7ff b9c0 	b.w	8006cbc <_malloc_r>
 800793c:	b92a      	cbnz	r2, 800794a <_realloc_r+0x24>
 800793e:	f7ff f949 	bl	8006bd4 <_free_r>
 8007942:	2400      	movs	r4, #0
 8007944:	4620      	mov	r0, r4
 8007946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800794a:	f000 f85f 	bl	8007a0c <_malloc_usable_size_r>
 800794e:	4285      	cmp	r5, r0
 8007950:	4606      	mov	r6, r0
 8007952:	d802      	bhi.n	800795a <_realloc_r+0x34>
 8007954:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007958:	d8f4      	bhi.n	8007944 <_realloc_r+0x1e>
 800795a:	4629      	mov	r1, r5
 800795c:	4640      	mov	r0, r8
 800795e:	f7ff f9ad 	bl	8006cbc <_malloc_r>
 8007962:	4607      	mov	r7, r0
 8007964:	2800      	cmp	r0, #0
 8007966:	d0ec      	beq.n	8007942 <_realloc_r+0x1c>
 8007968:	42b5      	cmp	r5, r6
 800796a:	462a      	mov	r2, r5
 800796c:	4621      	mov	r1, r4
 800796e:	bf28      	it	cs
 8007970:	4632      	movcs	r2, r6
 8007972:	f7ff ffc3 	bl	80078fc <memcpy>
 8007976:	4621      	mov	r1, r4
 8007978:	4640      	mov	r0, r8
 800797a:	f7ff f92b 	bl	8006bd4 <_free_r>
 800797e:	463c      	mov	r4, r7
 8007980:	e7e0      	b.n	8007944 <_realloc_r+0x1e>

08007982 <_raise_r>:
 8007982:	291f      	cmp	r1, #31
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4605      	mov	r5, r0
 8007988:	460c      	mov	r4, r1
 800798a:	d904      	bls.n	8007996 <_raise_r+0x14>
 800798c:	2316      	movs	r3, #22
 800798e:	6003      	str	r3, [r0, #0]
 8007990:	f04f 30ff 	mov.w	r0, #4294967295
 8007994:	bd38      	pop	{r3, r4, r5, pc}
 8007996:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007998:	b112      	cbz	r2, 80079a0 <_raise_r+0x1e>
 800799a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800799e:	b94b      	cbnz	r3, 80079b4 <_raise_r+0x32>
 80079a0:	4628      	mov	r0, r5
 80079a2:	f000 f831 	bl	8007a08 <_getpid_r>
 80079a6:	4622      	mov	r2, r4
 80079a8:	4601      	mov	r1, r0
 80079aa:	4628      	mov	r0, r5
 80079ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079b0:	f000 b818 	b.w	80079e4 <_kill_r>
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d00a      	beq.n	80079ce <_raise_r+0x4c>
 80079b8:	1c59      	adds	r1, r3, #1
 80079ba:	d103      	bne.n	80079c4 <_raise_r+0x42>
 80079bc:	2316      	movs	r3, #22
 80079be:	6003      	str	r3, [r0, #0]
 80079c0:	2001      	movs	r0, #1
 80079c2:	e7e7      	b.n	8007994 <_raise_r+0x12>
 80079c4:	2100      	movs	r1, #0
 80079c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80079ca:	4620      	mov	r0, r4
 80079cc:	4798      	blx	r3
 80079ce:	2000      	movs	r0, #0
 80079d0:	e7e0      	b.n	8007994 <_raise_r+0x12>
	...

080079d4 <raise>:
 80079d4:	4b02      	ldr	r3, [pc, #8]	@ (80079e0 <raise+0xc>)
 80079d6:	4601      	mov	r1, r0
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	f7ff bfd2 	b.w	8007982 <_raise_r>
 80079de:	bf00      	nop
 80079e0:	20000018 	.word	0x20000018

080079e4 <_kill_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	4d07      	ldr	r5, [pc, #28]	@ (8007a04 <_kill_r+0x20>)
 80079e8:	2300      	movs	r3, #0
 80079ea:	4604      	mov	r4, r0
 80079ec:	4608      	mov	r0, r1
 80079ee:	4611      	mov	r1, r2
 80079f0:	602b      	str	r3, [r5, #0]
 80079f2:	f7fa f891 	bl	8001b18 <_kill>
 80079f6:	1c43      	adds	r3, r0, #1
 80079f8:	d102      	bne.n	8007a00 <_kill_r+0x1c>
 80079fa:	682b      	ldr	r3, [r5, #0]
 80079fc:	b103      	cbz	r3, 8007a00 <_kill_r+0x1c>
 80079fe:	6023      	str	r3, [r4, #0]
 8007a00:	bd38      	pop	{r3, r4, r5, pc}
 8007a02:	bf00      	nop
 8007a04:	20000488 	.word	0x20000488

08007a08 <_getpid_r>:
 8007a08:	f7fa b87e 	b.w	8001b08 <_getpid>

08007a0c <_malloc_usable_size_r>:
 8007a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a10:	1f18      	subs	r0, r3, #4
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bfbc      	itt	lt
 8007a16:	580b      	ldrlt	r3, [r1, r0]
 8007a18:	18c0      	addlt	r0, r0, r3
 8007a1a:	4770      	bx	lr

08007a1c <_init>:
 8007a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1e:	bf00      	nop
 8007a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a22:	bc08      	pop	{r3}
 8007a24:	469e      	mov	lr, r3
 8007a26:	4770      	bx	lr

08007a28 <_fini>:
 8007a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2a:	bf00      	nop
 8007a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2e:	bc08      	pop	{r3}
 8007a30:	469e      	mov	lr, r3
 8007a32:	4770      	bx	lr
